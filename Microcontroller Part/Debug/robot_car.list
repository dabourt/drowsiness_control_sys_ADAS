
robot_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008d68  08008d68  00018d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800916c  0800916c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  200001dc  08009350  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08009350  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ef7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344f  00000000  00000000  00035103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00038558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005baf  00000000  00000000  0003a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001901d  00000000  00000000  0003fedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009046c  00000000  00000000  00058efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  000e93b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d50 	.word	0x08008d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008d50 	.word	0x08008d50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <car_driving>:

//uint8_t car_distance_limition = CAR_NON_DESIRED_DISTANCE;


void car_driving(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	 //distance_mesurment_front_start_measure();
	 if((Distance < CAR_DESIRED_DISTANCE) && (robot_car_wheels_dir == WHEELS_FORWARD))
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <car_driving+0x3c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b07      	cmp	r3, #7
 8000ec8:	d80b      	bhi.n	8000ee2 <car_driving+0x26>
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <car_driving+0x40>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d107      	bne.n	8000ee2 <car_driving+0x26>
	 {
		robot_car_speed = 0;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <car_driving+0x44>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		robot_car_apply_control();
 8000ed8:	f000 f816 	bl	8000f08 <robot_car_apply_control>
		usr_con_update_flag = USR_UPDATE_DATA_RESET;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <car_driving+0x48>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	 }

	 if(usr_con_update_flag == USR_UPDATE_DATA_SET)
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <car_driving+0x48>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d104      	bne.n	8000ef4 <car_driving+0x38>
	 {
		robot_car_apply_control();
 8000eea:	f000 f80d 	bl	8000f08 <robot_car_apply_control>
		usr_con_update_flag = USR_UPDATE_DATA_RESET;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <car_driving+0x48>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	 }
	 else
	 {

	 }
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000728 	.word	0x20000728
 8000efc:	20000816 	.word	0x20000816
 8000f00:	20000814 	.word	0x20000814
 8000f04:	20000818 	.word	0x20000818

08000f08 <robot_car_apply_control>:


void robot_car_apply_control(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	if(((robot_car_wheels_dir == WHEELS_REVERSE) || (robot_car_wheels_dir == WHEELS_FORWARD)) && (robot_car_speed <= 100))
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d003      	beq.n	8000f1c <robot_car_apply_control+0x14>
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d16b      	bne.n	8000ff4 <robot_car_apply_control+0xec>
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d867      	bhi.n	8000ff4 <robot_car_apply_control+0xec>
	{
		if((Distance < CAR_DESIRED_DISTANCE) && (robot_car_wheels_dir == WHEELS_FORWARD))
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <robot_car_apply_control+0xf8>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	d806      	bhi.n	8000f3c <robot_car_apply_control+0x34>
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <robot_car_apply_control+0x34>
		{
			robot_car_speed = 0;
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		}
		if(robot_car_speed == 0)  // STOP
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <robot_car_apply_control+0x4a>
		{
			dc_motor_driver_stop(MOTOR_DRIVER_CH_1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f004 fbd1 	bl	80056ec <dc_motor_driver_stop>
			dc_motor_driver_stop(MOTOR_DRIVER_CH_2);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f004 fbce 	bl	80056ec <dc_motor_driver_stop>
	}
	else
	{

	}
}
 8000f50:	e050      	b.n	8000ff4 <robot_car_apply_control+0xec>
		else if((robot_car_steering >= 0) && (robot_car_steering <= robot_car_speed)) // Moving right
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <robot_car_apply_control+0xfc>)
 8000f54:	f993 3000 	ldrsb.w	r3, [r3]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db23      	blt.n	8000fa4 <robot_car_apply_control+0x9c>
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <robot_car_apply_control+0xfc>)
 8000f5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dc1b      	bgt.n	8000fa4 <robot_car_apply_control+0x9c>
			dc_motor_driver_move(MOTOR_DRIVER_CH_2, robot_car_speed, robot_car_wheels_dir);
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	b252      	sxtb	r2, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f004 fb52 	bl	8005624 <dc_motor_driver_move>
			dc_motor_driver_move(MOTOR_DRIVER_CH_1, robot_car_speed - robot_car_steering, robot_car_wheels_dir);
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <robot_car_apply_control+0xfc>)
 8000f88:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	b252      	sxtb	r2, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f004 fb41 	bl	8005624 <dc_motor_driver_move>
}
 8000fa2:	e027      	b.n	8000ff4 <robot_car_apply_control+0xec>
		else if((robot_car_steering < 0) && ((0U - robot_car_steering) <= robot_car_speed)) //Moving left
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <robot_car_apply_control+0xfc>)
 8000fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da22      	bge.n	8000ff4 <robot_car_apply_control+0xec>
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <robot_car_apply_control+0xfc>)
 8000fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d81a      	bhi.n	8000ff4 <robot_car_apply_control+0xec>
			dc_motor_driver_move(MOTOR_DRIVER_CH_2, robot_car_speed + robot_car_steering, robot_car_wheels_dir);
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <robot_car_apply_control+0xfc>)
 8000fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	b252      	sxtb	r2, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f004 fb22 	bl	8005624 <dc_motor_driver_move>
			dc_motor_driver_move(MOTOR_DRIVER_CH_1, robot_car_speed, robot_car_wheels_dir);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <robot_car_apply_control+0xf4>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <robot_car_apply_control+0xf0>)
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	b252      	sxtb	r2, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f004 fb18 	bl	8005624 <dc_motor_driver_move>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000816 	.word	0x20000816
 8000ffc:	20000814 	.word	0x20000814
 8001000:	20000728 	.word	0x20000728
 8001004:	20000815 	.word	0x20000815

08001008 <Adaptive_Cruise_Control>:

#define ACC_LIMIT_SPEED 90

uint8_t acc_down_flag = 0;
void Adaptive_Cruise_Control(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t sec_time = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
	if(usr_drowsiness_level == DROWSINESS_LEVEL_ONE)
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <Adaptive_Cruise_Control+0xcc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d155      	bne.n	80010c6 <Adaptive_Cruise_Control+0xbe>
	{
		if(car_clock.sec - sec_time > 0)
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <Adaptive_Cruise_Control+0xd0>)
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	461a      	mov	r2, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd51      	ble.n	80010cc <Adaptive_Cruise_Control+0xc4>
		{
			sec_time = car_clock.sec;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <Adaptive_Cruise_Control+0xd0>)
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	71fb      	strb	r3, [r7, #7]
			if(acc_down_check() == ACC_DOWN)
 800102e:	f000 f85b 	bl	80010e8 <acc_down_check>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d116      	bne.n	8001066 <Adaptive_Cruise_Control+0x5e>
			{
				acc_down_flag ++;
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 8001042:	701a      	strb	r2, [r3, #0]
				if(robot_car_speed <= 70)
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b46      	cmp	r3, #70	; 0x46
 800104a:	d803      	bhi.n	8001054 <Adaptive_Cruise_Control+0x4c>
				{
					robot_car_speed = 0;
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e005      	b.n	8001060 <Adaptive_Cruise_Control+0x58>
				}
				else
				{
					robot_car_speed -= 4;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3b04      	subs	r3, #4
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 800105e:	701a      	strb	r2, [r3, #0]
				}
				robot_car_apply_control();
 8001060:	f7ff ff52 	bl	8000f08 <robot_car_apply_control>
	}
	else
	{
		acc_down_flag = 0;
	}
}
 8001064:	e032      	b.n	80010cc <Adaptive_Cruise_Control+0xc4>
			else if(((acc_up_check() == ACC_UP) && (robot_car_speed <= ACC_LIMIT_SPEED)) || (Distance >= 50))
 8001066:	f000 f883 	bl	8001170 <acc_up_check>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <Adaptive_Cruise_Control+0x70>
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b5a      	cmp	r3, #90	; 0x5a
 8001076:	d904      	bls.n	8001082 <Adaptive_Cruise_Control+0x7a>
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <Adaptive_Cruise_Control+0xdc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b31      	cmp	r3, #49	; 0x31
 8001080:	d924      	bls.n	80010cc <Adaptive_Cruise_Control+0xc4>
				if(acc_down_flag)
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d020      	beq.n	80010cc <Adaptive_Cruise_Control+0xc4>
					acc_down_flag--;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 8001094:	701a      	strb	r2, [r3, #0]
					if(robot_car_speed < 70)
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b45      	cmp	r3, #69	; 0x45
 800109c:	d803      	bhi.n	80010a6 <Adaptive_Cruise_Control+0x9e>
						robot_car_speed = 70;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 80010a0:	2246      	movs	r2, #70	; 0x46
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e005      	b.n	80010b2 <Adaptive_Cruise_Control+0xaa>
						robot_car_speed += 4;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 80010b0:	701a      	strb	r2, [r3, #0]
					if(robot_car_speed >= 99)
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b62      	cmp	r3, #98	; 0x62
 80010b8:	d902      	bls.n	80010c0 <Adaptive_Cruise_Control+0xb8>
						robot_car_speed = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <Adaptive_Cruise_Control+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
					robot_car_apply_control();
 80010c0:	f7ff ff22 	bl	8000f08 <robot_car_apply_control>
}
 80010c4:	e002      	b.n	80010cc <Adaptive_Cruise_Control+0xc4>
		acc_down_flag = 0;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <Adaptive_Cruise_Control+0xd4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000817 	.word	0x20000817
 80010d8:	20000738 	.word	0x20000738
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	20000814 	.word	0x20000814
 80010e4:	20000728 	.word	0x20000728

080010e8 <acc_down_check>:



uint8_t acc_down_check(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	uint8_t ret_val = NOT_READY;
 80010ee:	2302      	movs	r3, #2
 80010f0:	71fb      	strb	r3, [r7, #7]
	static uint8_t first_distance = 0;
	uint8_t second_distance = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
	static uint8_t first_read_flag = 0;
	int8_t distance_dif = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	717b      	strb	r3, [r7, #5]

	if((Distance <= 50))
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <acc_down_check+0x7c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b32      	cmp	r3, #50	; 0x32
 8001102:	d822      	bhi.n	800114a <acc_down_check+0x62>
	{
		if(first_read_flag == 0)
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <acc_down_check+0x80>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d108      	bne.n	800111e <acc_down_check+0x36>
		{
			first_distance = Distance;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <acc_down_check+0x7c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <acc_down_check+0x84>)
 8001114:	701a      	strb	r2, [r3, #0]
			first_read_flag = 1;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <acc_down_check+0x80>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e01a      	b.n	8001154 <acc_down_check+0x6c>
		}
		else
		{
			second_distance = Distance;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <acc_down_check+0x7c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	71bb      	strb	r3, [r7, #6]
			first_read_flag = 0;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <acc_down_check+0x80>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]

			distance_dif = first_distance - second_distance;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <acc_down_check+0x84>)
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	717b      	strb	r3, [r7, #5]

			if(distance_dif >= 3)
 8001136:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800113a:	2b02      	cmp	r3, #2
 800113c:	dd02      	ble.n	8001144 <acc_down_check+0x5c>
			{
				ret_val = ACC_DOWN;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e007      	b.n	8001154 <acc_down_check+0x6c>
			}
			else
			{
				ret_val = NOT_ACC_DOWN;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	e004      	b.n	8001154 <acc_down_check+0x6c>

		}
	}
	else
	{
		first_distance = 0;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <acc_down_check+0x84>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
		ret_val = NOT_ACC_DOWN;
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
	}
	return ret_val;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000728 	.word	0x20000728
 8001168:	200001f9 	.word	0x200001f9
 800116c:	200001fa 	.word	0x200001fa

08001170 <acc_up_check>:

uint8_t acc_up_check(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
	uint8_t ret_val = NOT_READY;
 8001176:	2302      	movs	r3, #2
 8001178:	71fb      	strb	r3, [r7, #7]
	static uint8_t first_distance = 0;
	uint8_t second_distance = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]
	static uint8_t first_read_flag = 0;
	int8_t distance_dif = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	717b      	strb	r3, [r7, #5]

	if(Distance >= 20 )
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <acc_up_check+0x7c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b13      	cmp	r3, #19
 800118a:	d922      	bls.n	80011d2 <acc_up_check+0x62>
	{
		if(first_read_flag == 0)
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <acc_up_check+0x80>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <acc_up_check+0x36>
		{
			first_distance = Distance;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <acc_up_check+0x7c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <acc_up_check+0x84>)
 800119c:	701a      	strb	r2, [r3, #0]
			first_read_flag = 1;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <acc_up_check+0x80>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e01a      	b.n	80011dc <acc_up_check+0x6c>
		}
		else
		{
			second_distance = Distance;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <acc_up_check+0x7c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	71bb      	strb	r3, [r7, #6]
			first_read_flag = 0;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <acc_up_check+0x80>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]

			distance_dif = second_distance - first_distance;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <acc_up_check+0x84>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	717b      	strb	r3, [r7, #5]

			if(distance_dif >= 3)
 80011be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	dd02      	ble.n	80011cc <acc_up_check+0x5c>
			{
				ret_val = ACC_UP;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e007      	b.n	80011dc <acc_up_check+0x6c>
			}
			else
			{
				ret_val = NOT_ACC_UP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e004      	b.n	80011dc <acc_up_check+0x6c>

		}
	}
	else
	{
		first_distance = 0;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <acc_up_check+0x84>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		ret_val = NOT_ACC_UP;
 80011d8:	2301      	movs	r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
	}
	return ret_val;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000728 	.word	0x20000728
 80011f0:	200001fb 	.word	0x200001fb
 80011f4:	200001fc 	.word	0x200001fc

080011f8 <main>:
  * @retval int
  */


int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80011fc:	f000 fa82 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f83a 	bl	8001278 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  MX_USART2_UART_Init();
 8001204:	f004 f8bc 	bl	8005380 <MX_USART2_UART_Init>
  RTE_Layer_Init();
 8001208:	f004 fe66 	bl	8005ed8 <RTE_Layer_Init>
	Wheel_Speed_init();
 800120c:	f005 f84e 	bl	80062ac <Wheel_Speed_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	dc_TIM10_Init();
 8001210:	f004 fa8a 	bl	8005728 <dc_TIM10_Init>
	dc_TIM3_Init();
 8001214:	f004 fb16 	bl	8005844 <dc_TIM3_Init>
	//__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3, 90);
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <main+0x6c>)
 800121c:	f001 ffb4 	bl	8003188 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001220:	2104      	movs	r1, #4
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <main+0x70>)
 8001224:	f001 ffb0 	bl	8003188 <HAL_TIM_PWM_Start>
  //RTE_DMA_Init();

  	clock_init();
 8001228:	f004 fe86 	bl	8005f38 <clock_init>

  	RTE_uart_init();
 800122c:	f004 fe40 	bl	8005eb0 <RTE_uart_init>

  	dc_motor_driver_init();
 8001230:	f004 f9d0 	bl	80055d4 <dc_motor_driver_init>

  	//ultrasonic_sensor_init();
	  Distance = 50;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <main+0x74>)
 8001236:	2232      	movs	r2, #50	; 0x32
 8001238:	701a      	strb	r2, [r3, #0]

  while (1)
  {
		HAL_UART_Receive_DMA(&huart1, uart_car_buf, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <main+0x78>)
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <main+0x7c>)
 8001240:	f002 ff72 	bl	8004128 <HAL_UART_Receive_DMA>
		  //HAL_Delay(100);
		  //Drowsiness_Control();
		  //rte_uart_handler();

  	  }
	  Distance--;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <main+0x74>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <main+0x74>)
 8001250:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8001252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001256:	f000 fac7 	bl	80017e8 <HAL_Delay>
	  //else{
	  car_driving();
 800125a:	f7ff fe2f 	bl	8000ebc <car_driving>
	  Adaptive_Cruise_Control();
 800125e:	f7ff fed3 	bl	8001008 <Adaptive_Cruise_Control>
  {
 8001262:	e7ea      	b.n	800123a <main+0x42>
 8001264:	200002ec 	.word	0x200002ec
 8001268:	200003a0 	.word	0x200003a0
 800126c:	20000728 	.word	0x20000728
 8001270:	2000072c 	.word	0x2000072c
 8001274:	20000740 	.word	0x20000740

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 f842 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a27      	ldr	r2, [pc, #156]	; (8001344 <SystemClock_Config+0xcc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xd0>)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012ec:	2319      	movs	r3, #25
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f0:	23a8      	movs	r3, #168	; 0xa8
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f96b 	bl	80025dc <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800130c:	f000 f81e 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fbcd 	bl	8002acc <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001338:	f000 f808 	bl	800134c <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f9d8 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_int_handler();
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <SysTick_Handler+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4798      	blx	r3
  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000204 	.word	0x20000204

08001408 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	static char flag = 0;
	static int f_time_cap = 0;

	if(TIM4->SR & 0x1)
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <EXTI0_IRQHandler+0x8c>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00c      	beq.n	8001434 <EXTI0_IRQHandler+0x2c>
	{
		TIM4->CNT = 0;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <EXTI0_IRQHandler+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->SR &= 0xFFFE;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <EXTI0_IRQHandler+0x8c>)
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	491b      	ldr	r1, [pc, #108]	; (8001494 <EXTI0_IRQHandler+0x8c>)
 8001426:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800142a:	4013      	ands	r3, r2
 800142c:	610b      	str	r3, [r1, #16]
		flag = 0;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <EXTI0_IRQHandler+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

	}

	if(flag == 0)
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <EXTI0_IRQHandler+0x90>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <EXTI0_IRQHandler+0x48>
	{
		f_time_cap = __HAL_TIM_GetCounter(&ul_tim);
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <EXTI0_IRQHandler+0x94>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	461a      	mov	r2, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <EXTI0_IRQHandler+0x98>)
 8001446:	601a      	str	r2, [r3, #0]
		flag = 1;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <EXTI0_IRQHandler+0x90>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e019      	b.n	8001484 <EXTI0_IRQHandler+0x7c>
	}
	else if(flag == 1)
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <EXTI0_IRQHandler+0x90>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d115      	bne.n	8001484 <EXTI0_IRQHandler+0x7c>
	{
		int s_time_cap = __HAL_TIM_GetCounter(&ul_tim);
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <EXTI0_IRQHandler+0x94>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	607b      	str	r3, [r7, #4]
		if(f_time_cap - s_time_cap)
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <EXTI0_IRQHandler+0x98>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	d00c      	beq.n	8001484 <EXTI0_IRQHandler+0x7c>
		{
			speed = 1000/(s_time_cap - f_time_cap);
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <EXTI0_IRQHandler+0x98>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001476:	fb92 f3f3 	sdiv	r3, r2, r3
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <EXTI0_IRQHandler+0x9c>)
 800147c:	6013      	str	r3, [r2, #0]
			flag = 0;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <EXTI0_IRQHandler+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]




  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001484:	2001      	movs	r0, #1
 8001486:	f001 f885 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40000800 	.word	0x40000800
 8001498:	20000208 	.word	0x20000208
 800149c:	20000674 	.word	0x20000674
 80014a0:	2000020c 	.word	0x2000020c
 80014a4:	20000200 	.word	0x20000200

080014a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80014ae:	f001 ff1b 	bl	80032e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80014b4:	f001 ff18 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000454 	.word	0x20000454
 80014c0:	200005bc 	.word	0x200005bc

080014c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  HAL_TIM_IRQHandler(&ul_tim);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM4_IRQHandler+0x10>)
 80014ca:	f001 ff0d 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM4_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000674 	.word	0x20000674

080014d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <USART1_IRQHandler+0x10>)
 80014de:	f002 fe53 	bl	8004188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000740 	.word	0x20000740

080014ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA2_Stream2_IRQHandler+0x10>)
 80014f2:	f000 fc47 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200007b4 	.word	0x200007b4

08001500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return 1;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_kill>:

int _kill(int pid, int sig)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800151a:	f004 fecf 	bl	80062bc <__errno>
 800151e:	4603      	mov	r3, r0
 8001520:	2216      	movs	r2, #22
 8001522:	601a      	str	r2, [r3, #0]
  return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_exit>:

void _exit (int status)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffe7 	bl	8001510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001542:	e7fe      	b.n	8001542 <_exit+0x12>

08001544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e00a      	b.n	800156c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001556:	f3af 8000 	nop.w
 800155a:	4601      	mov	r1, r0
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	b2ca      	uxtb	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf0      	blt.n	8001556 <_read+0x12>
  }

  return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e009      	b.n	80015a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf1      	blt.n	8001590 <_write+0x12>
  }
  return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_close>:

int _close(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	605a      	str	r2, [r3, #4]
  return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_isatty>:

int _isatty(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f004 fe34 	bl	80062bc <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20010000 	.word	0x20010000
 8001680:	00000400 	.word	0x00000400
 8001684:	20000210 	.word	0x20000210
 8001688:	20000830 	.word	0x20000830

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	; (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f004 fdf3 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff fd89 	bl	80011f8 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016f4:	08009174 	.word	0x08009174
  ldr r2, =_sbss
 80016f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016fc:	2000082c 	.word	0x2000082c

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_Init+0x40>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_Init+0x40>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_Init+0x40>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f94f 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	200f      	movs	r0, #15
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fe0e 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f967 	bl	8001a3a <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f92f 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000214 	.word	0x20000214

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000214 	.word	0x20000214

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff feb6 	bl	80017d0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e099      	b.n	8001ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e00f      	b.n	8001ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff fe9d 	bl	80017d0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d908      	bls.n	8001ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e078      	b.n	8001ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e8      	bne.n	8001a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_DMA_Init+0x158>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4313      	orrs	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d117      	bne.n	8001b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fb01 	bl	8002160 <DMA_CheckFifoParam>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b72:	2301      	movs	r3, #1
 8001b74:	e016      	b.n	8001ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fab8 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	223f      	movs	r2, #63	; 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	f010803f 	.word	0xf010803f

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DMA_Start_IT+0x26>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e040      	b.n	8001c58 <HAL_DMA_Start_IT+0xa8>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12f      	bne.n	8001c4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2202      	movs	r2, #2
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fa4a 	bl	8002098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	223f      	movs	r2, #63	; 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0216 	orr.w	r2, r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0208 	orr.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c6e:	f7ff fdaf 	bl	80017d0 <HAL_GetTick>
 8001c72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e052      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0216 	bic.w	r2, r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_DMA_Abort+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	e013      	b.n	8001d0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce4:	f7ff fd74 	bl	80017d0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d90c      	bls.n	8001d0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e015      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1e4      	bne.n	8001ce4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	223f      	movs	r2, #63	; 0x3f
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d004      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00c      	b.n	8001d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d90:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_DMA_IRQHandler+0x248>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_DMA_IRQHandler+0x24c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2210      	movs	r2, #16
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2210      	movs	r2, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
 8001eb2:	e01f      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2220      	movs	r2, #32
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808f 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8087 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d136      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x1da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	223f      	movs	r2, #63	; 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07e      	beq.n	8002090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
        }
        return;
 8001f9a:	e079      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
 8001fc8:	e02c      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01e      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d307      	bcc.n	800206c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_DMA_IRQHandler+0x2cc>
 800206a:	e000      	b.n	800206e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800206c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e000      	b.n	8002092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002090:	bf00      	nop
    }
  }
}
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <DMA_CalcBaseAndBitshift+0x68>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d909      	bls.n	8002136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	; 0x58
 8002134:	e007      	b.n	8002146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	aaaaaaab 	.word	0xaaaaaaab
 800215c:	08008d80 	.word	0x08008d80

08002160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d856      	bhi.n	800222e <DMA_CheckFifoParam+0xce>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <DMA_CheckFifoParam+0x28>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021ab 	.word	0x080021ab
 8002190:	08002199 	.word	0x08002199
 8002194:	0800222f 	.word	0x0800222f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e043      	b.n	8002232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b2:	d140      	bne.n	8002236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e03d      	b.n	8002236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d121      	bne.n	8002208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d837      	bhi.n	800223a <DMA_CheckFifoParam+0xda>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <DMA_CheckFifoParam+0x70>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e7 	.word	0x080021e7
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e030      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f6:	e022      	b.n	800223e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002206:	e01c      	b.n	8002242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d903      	bls.n	8002216 <DMA_CheckFifoParam+0xb6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002214:	e018      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      break;
 800221a:	e015      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e00b      	b.n	8002246 <DMA_CheckFifoParam+0xe6>
      break;
 800222e:	bf00      	nop
 8002230:	e00a      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e008      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e006      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;   
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
    }
  } 
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e159      	b.n	8002528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8148 	bne.w	8002522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a49      	ldr	r2, [pc, #292]	; (8002548 <HAL_GPIO_Init+0x2f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x202>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_GPIO_Init+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x1fe>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_GPIO_Init+0x2f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x1fa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x1f6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_GPIO_Init+0x300>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x1f2>
 8002446:	2304      	movs	r3, #4
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244a:	2307      	movs	r3, #7
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x204>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_GPIO_Init+0x304>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a2f      	ldr	r2, [pc, #188]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_GPIO_Init+0x304>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_GPIO_Init+0x304>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_GPIO_Init+0x304>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_GPIO_Init+0x304>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f aea2 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f806 	bl	80025c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e267      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b7e      	ldr	r3, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e242      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b70      	ldr	r3, [pc, #448]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6f      	ldr	r2, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6c      	ldr	r2, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b69      	ldr	r3, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a68      	ldr	r2, [pc, #416]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f89c 	bl	80017d0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f898 	bl	80017d0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e207      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5b      	ldr	r3, [pc, #364]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f888 	bl	80017d0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f884 	bl	80017d0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f3      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c7      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <HAL_RCC_OscConfig+0x244>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7ff f83d 	bl	80017d0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff f839 	bl	80017d0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a8      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4925      	ldr	r1, [pc, #148]	; (800281c <HAL_RCC_OscConfig+0x240>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_OscConfig+0x244>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f81c 	bl	80017d0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff f818 	bl	80017d0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e187      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d036      	beq.n	8002834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x248>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fffc 	bl	80017d0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe fff8 	bl	80017d0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e167      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x240>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e01b      	b.n	8002834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_OscConfig+0x248>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe ffe5 	bl	80017d0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00e      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe ffe1 	bl	80017d0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d907      	bls.n	8002828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e150      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	42470000 	.word	0x42470000
 8002824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8097 	beq.w	8002970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a7c      	ldr	r2, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b77      	ldr	r3, [pc, #476]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b74      	ldr	r3, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a73      	ldr	r2, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7fe ffa1 	bl	80017d0 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7fe ff9d 	bl	80017d0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x474>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2ea>
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a63      	ldr	r2, [pc, #396]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x30c>
 80028ce:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a5e      	ldr	r2, [pc, #376]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b55      	ldr	r3, [pc, #340]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe ff62 	bl	80017d0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe ff5e 	bl	80017d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0cb      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x334>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe ff4c 	bl	80017d0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe ff48 	bl	80017d0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0b5      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a1 	beq.w	8002abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297a:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d05c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d141      	bne.n	8002a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe ff1c 	bl	80017d0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe ff18 	bl	80017d0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e087      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	491b      	ldr	r1, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe fef1 	bl	80017d0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe feed 	bl	80017d0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e05c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x416>
 8002a10:	e054      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe feda 	bl	80017d0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fed6 	bl	80017d0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e045      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e038      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d121      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fe08 	bl	80017d0 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fe04 	bl	80017d0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fd68 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08008d68 	.word	0x08008d68
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b090      	sub	sp, #64	; 0x40
 8002c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	f200 80a1 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x34>
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cca:	e09b      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cd0:	e09b      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cd6:	e098      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d028      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d00:	2100      	movs	r1, #0
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d04:	fb03 f201 	mul.w	r2, r3, r1
 8002d08:	2300      	movs	r3, #0
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a43      	ldr	r2, [pc, #268]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d12:	fba0 1202 	umull	r1, r2, r0, r2
 8002d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d18:	460a      	mov	r2, r1
 8002d1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1e:	4413      	add	r3, r2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	2200      	movs	r2, #0
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	61fa      	str	r2, [r7, #28]
 8002d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d32:	f7fd ff41 	bl	8000bb8 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	e053      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	2200      	movs	r2, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	617a      	str	r2, [r7, #20]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d52:	f04f 0b00 	mov.w	fp, #0
 8002d56:	4652      	mov	r2, sl
 8002d58:	465b      	mov	r3, fp
 8002d5a:	f04f 0000 	mov.w	r0, #0
 8002d5e:	f04f 0100 	mov.w	r1, #0
 8002d62:	0159      	lsls	r1, r3, #5
 8002d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d68:	0150      	lsls	r0, r2, #5
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d72:	eb63 090b 	sbc.w	r9, r3, fp
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	00eb      	lsls	r3, r5, #3
 8002d9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da0:	00e2      	lsls	r2, r4, #3
 8002da2:	4614      	mov	r4, r2
 8002da4:	461d      	mov	r5, r3
 8002da6:	eb14 030a 	adds.w	r3, r4, sl
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	eb45 030b 	adc.w	r3, r5, fp
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	60fa      	str	r2, [r7, #12]
 8002dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ddc:	f7fd feec 	bl	8000bb8 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3740      	adds	r7, #64	; 0x40
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	017d7840 	.word	0x017d7840

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08008d78 	.word	0x08008d78

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08008d78 	.word	0x08008d78

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e04c      	b.n	8002f38 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d111      	bne.n	8002ece <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fffa 	bl	8003eac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_TIM_Base_Init+0xb4>)
 8002ec4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f000 fd17 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	08005ccd 	.word	0x08005ccd

08002f44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e03c      	b.n	8002fd6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <HAL_TIM_Base_Start+0xa0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x5c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d013      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x5c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_TIM_Base_Start+0xa4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x5c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_TIM_Base_Start+0xa8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x5c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_TIM_Base_Start+0xac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x5c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_TIM_Base_Start+0xb0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d010      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e007      	b.n	8002fd4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40014000 	.word	0x40014000

08002ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e044      	b.n	800309a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x6c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d013      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x6c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x6c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x6c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x6c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d111      	bne.n	8003088 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d010      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003086:	e007      	b.n	8003098 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40014000 	.word	0x40014000

080030bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e04c      	b.n	8003168 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d111      	bne.n	80030fe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fee2 	bl	8003eac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_TIM_PWM_Init+0xb4>)
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 fbff 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	08003175 	.word	0x08003175

08003174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_TIM_PWM_Start+0x24>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e022      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d109      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x3e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e015      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d109      	bne.n	80031e0 <HAL_TIM_PWM_Start+0x58>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e008      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e068      	b.n	80032cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x82>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	e013      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0x92>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003218:	e00b      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d104      	bne.n	800322a <HAL_TIM_PWM_Start+0xa2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003228:	e003      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fe10 	bl	8003e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <HAL_TIM_PWM_Start+0x14c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_TIM_PWM_Start+0x14c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d013      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <HAL_TIM_PWM_Start+0x150>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_TIM_PWM_Start+0x154>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_TIM_PWM_Start+0x158>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIM_PWM_Start+0x15c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d010      	beq.n	80032ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	e007      	b.n	80032ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40014000 	.word	0x40014000

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d128      	bne.n	8003350 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d121      	bne.n	8003350 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0202 	mvn.w	r2, #2
 8003314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e009      	b.n	800334a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d128      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d121      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e009      	b.n	80033aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d128      	bne.n	8003410 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d121      	bne.n	8003410 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0208 	mvn.w	r2, #8
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e009      	b.n	800340a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d128      	bne.n	8003470 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d121      	bne.n	8003470 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2208      	movs	r2, #8
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e009      	b.n	800346a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d110      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d109      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0201 	mvn.w	r2, #1
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d110      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d110      	bne.n	8003500 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b20      	cmp	r3, #32
 800350c:	d110      	bne.n	8003530 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d109      	bne.n	8003530 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0220 	mvn.w	r2, #32
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003552:	2302      	movs	r3, #2
 8003554:	e0ae      	b.n	80036b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	f200 809f 	bhi.w	80036a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080036a5 	.word	0x080036a5
 8003574:	080036a5 	.word	0x080036a5
 8003578:	080036a5 	.word	0x080036a5
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080036a5 	.word	0x080036a5
 8003584:	080036a5 	.word	0x080036a5
 8003588:	080036a5 	.word	0x080036a5
 800358c:	08003623 	.word	0x08003623
 8003590:	080036a5 	.word	0x080036a5
 8003594:	080036a5 	.word	0x080036a5
 8003598:	080036a5 	.word	0x080036a5
 800359c:	08003663 	.word	0x08003663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fa34 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0208 	orr.w	r2, r2, #8
 80035ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0204 	bic.w	r2, r2, #4
 80035ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	619a      	str	r2, [r3, #24]
      break;
 80035de:	e064      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fa7a 	bl	8003ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      break;
 8003620:	e043      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fac5 	bl	8003bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0208 	orr.w	r2, r2, #8
 800363c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0204 	bic.w	r2, r2, #4
 800364c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69d9      	ldr	r1, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	61da      	str	r2, [r3, #28]
      break;
 8003660:	e023      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fb0f 	bl	8003c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	61da      	str	r2, [r3, #28]
      break;
 80036a2:	e002      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
      break;
 80036a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b4      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x186>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd4>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8086 	beq.w	800382e <HAL_TIM_ConfigClockSource+0x172>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa6>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xfa>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f000 fb55 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04f      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 fb3e 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 fab2 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fb0b 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 fad1 	bl	8003d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fafb 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa92 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 faeb 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003814:	e00c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 fae2 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003826:	e003      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800382e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <TIM_Base_SetConfig+0xf0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d017      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00f      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <TIM_Base_SetConfig+0xf0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <TIM_Base_SetConfig+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <TIM_Base_SetConfig+0xf8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <TIM_Base_SetConfig+0xfc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	615a      	str	r2, [r3, #20]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 0302 	bic.w	r3, r3, #2
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <TIM_OC1_SetConfig+0xc8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10c      	bne.n	8003a8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0308 	bic.w	r3, r3, #8
 8003a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <TIM_OC1_SetConfig+0xc8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40010000 	.word	0x40010000

08003ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f023 0210 	bic.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0320 	bic.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <TIM_OC2_SetConfig+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10d      	bne.n	8003b5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <TIM_OC2_SetConfig+0xd4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <TIM_OC3_SetConfig+0xd0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10d      	bne.n	8003c32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <TIM_OC3_SetConfig+0xd0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d113      	bne.n	8003c62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40010000 	.word	0x40010000

08003c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <TIM_OC4_SetConfig+0x9c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d109      	bne.n	8003d00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000

08003d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 030a 	bic.w	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0210 	bic.w	r2, r3, #16
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f043 0307 	orr.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	021a      	lsls	r2, r3, #8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <TIM_ResetCallback+0x7c>)
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <TIM_ResetCallback+0x80>)
 8003ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <TIM_ResetCallback+0x84>)
 8003ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <TIM_ResetCallback+0x88>)
 8003ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <TIM_ResetCallback+0x8c>)
 8003ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <TIM_ResetCallback+0x90>)
 8003ee0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <TIM_ResetCallback+0x94>)
 8003ee8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <TIM_ResetCallback+0x98>)
 8003ef0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <TIM_ResetCallback+0x9c>)
 8003ef8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <TIM_ResetCallback+0xa0>)
 8003f00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <TIM_ResetCallback+0xa4>)
 8003f08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <TIM_ResetCallback+0xa8>)
 8003f10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <TIM_ResetCallback+0xac>)
 8003f18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	0800384b 	.word	0x0800384b
 8003f2c:	0800385f 	.word	0x0800385f
 8003f30:	080038d7 	.word	0x080038d7
 8003f34:	080038eb 	.word	0x080038eb
 8003f38:	08003887 	.word	0x08003887
 8003f3c:	0800389b 	.word	0x0800389b
 8003f40:	08003873 	.word	0x08003873
 8003f44:	080038af 	.word	0x080038af
 8003f48:	080038c3 	.word	0x080038c3
 8003f4c:	080038ff 	.word	0x080038ff
 8003f50:	08004039 	.word	0x08004039
 8003f54:	0800404d 	.word	0x0800404d
 8003f58:	08004061 	.word	0x08004061

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e050      	b.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d013      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10c      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40014000 	.word	0x40014000

08004038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e04a      	b.n	800411c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d111      	bne.n	80040b6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fb62 	bl	8004764 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_UART_Init+0xb0>)
 80040ac:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	; 0x24
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fee2 	bl	8004e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800604d 	.word	0x0800604d

08004128 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	4613      	mov	r3, r2
 8004134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b20      	cmp	r3, #32
 8004140:	d11d      	bne.n	800417e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_UART_Receive_DMA+0x26>
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e016      	b.n	8004180 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_UART_Receive_DMA+0x38>
 800415c:	2302      	movs	r3, #2
 800415e:	e00f      	b.n	8004180 <HAL_UART_Receive_DMA+0x58>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	461a      	mov	r2, r3
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fc2b 	bl	80049d0 <UART_Start_Receive_DMA>
 800417a:	4603      	mov	r3, r0
 800417c:	e000      	b.n	8004180 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ba      	sub	sp, #232	; 0xe8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fd99 	bl	8004d1e <UART_Receive_IT>
      return;
 80041ec:	e25b      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80e1 	beq.w	80043ba <HAL_UART_IRQHandler+0x232>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80d4 	beq.w	80043ba <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
 800421e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d105      	bne.n	80042a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 81f2 	beq.w	800469c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fd24 	bl	8004d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_UART_IRQHandler+0x17a>
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d051      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fc2a 	bl	8004b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d142      	bne.n	800439c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800432c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800434e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1d9      	bne.n	8004316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	4a7f      	ldr	r2, [pc, #508]	; (800456c <HAL_UART_IRQHandler+0x3e4>)
 8004370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fce2 	bl	8001d40 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e011      	b.n	80043b6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439a:	e00c      	b.n	80043b6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e007      	b.n	80043b6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043b4:	e172      	b.n	800469c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b6:	bf00      	nop
    return;
 80043b8:	e170      	b.n	800469c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 814c 	bne.w	800465c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8145 	beq.w	800465c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 813e 	beq.w	800465c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	f040 80b5 	bne.w	8004570 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004412:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8142 	beq.w	80046a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004420:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004424:	429a      	cmp	r2, r3
 8004426:	f080 813b 	bcs.w	80046a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004430:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	f000 8088 	beq.w	8004550 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800445a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800446c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004478:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1d9      	bne.n	8004440 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800449c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e1      	bne.n	800448c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e3      	bne.n	80044c8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004532:	65ba      	str	r2, [r7, #88]	; 0x58
 8004534:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e3      	bne.n	800450e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fb88 	bl	8001c60 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800455c:	b292      	uxth	r2, r2
 800455e:	1a8a      	subs	r2, r1, r2
 8004560:	b292      	uxth	r2, r2
 8004562:	4611      	mov	r1, r2
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004568:	e09a      	b.n	80046a0 <HAL_UART_IRQHandler+0x518>
 800456a:	bf00      	nop
 800456c:	08004c23 	.word	0x08004c23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 808c 	beq.w	80046a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800458c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8087 	beq.w	80046a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ba:	647a      	str	r2, [r7, #68]	; 0x44
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	623b      	str	r3, [r7, #32]
   return(result);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f2:	633a      	str	r2, [r7, #48]	; 0x30
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	60fb      	str	r3, [r7, #12]
   return(result);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	617b      	str	r3, [r7, #20]
   return(result);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e3      	bne.n	8004614 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004654:	4611      	mov	r1, r2
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800465a:	e023      	b.n	80046a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <HAL_UART_IRQHandler+0x4f4>
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fae9 	bl	8004c4c <UART_Transmit_IT>
    return;
 800467a:	e014      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <HAL_UART_IRQHandler+0x51e>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb29 	bl	8004cec <UART_EndTransmit_IT>
    return;
 800469a:	e004      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80046a4:	bf00      	nop
  }
}
 80046a6:	37e8      	adds	r7, #232	; 0xe8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <UART_InitCallbacksToDefault+0x4c>)
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <UART_InitCallbacksToDefault+0x50>)
 8004776:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <UART_InitCallbacksToDefault+0x54>)
 800477c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <UART_InitCallbacksToDefault+0x58>)
 8004782:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <UART_InitCallbacksToDefault+0x5c>)
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <UART_InitCallbacksToDefault+0x60>)
 800478e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <UART_InitCallbacksToDefault+0x64>)
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <UART_InitCallbacksToDefault+0x68>)
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <UART_InitCallbacksToDefault+0x6c>)
 80047a0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	080046c1 	.word	0x080046c1
 80047b4:	080046ad 	.word	0x080046ad
 80047b8:	080046e9 	.word	0x080046e9
 80047bc:	080046d5 	.word	0x080046d5
 80047c0:	080046fd 	.word	0x080046fd
 80047c4:	08004711 	.word	0x08004711
 80047c8:	08004725 	.word	0x08004725
 80047cc:	08004739 	.word	0x08004739
 80047d0:	0800474d 	.word	0x0800474d

080047d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b09c      	sub	sp, #112	; 0x70
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d172      	bne.n	80048d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f2:	2200      	movs	r2, #0
 80047f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	66bb      	str	r3, [r7, #104]	; 0x68
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004816:	65ba      	str	r2, [r7, #88]	; 0x58
 8004818:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800481c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e5      	bne.n	80047f6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3314      	adds	r3, #20
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	667b      	str	r3, [r7, #100]	; 0x64
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800484a:	647a      	str	r2, [r7, #68]	; 0x44
 800484c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e5      	bne.n	800482a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	623b      	str	r3, [r7, #32]
   return(result);
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	663b      	str	r3, [r7, #96]	; 0x60
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800487e:	633a      	str	r2, [r7, #48]	; 0x30
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d119      	bne.n	80048d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048c2:	61fa      	str	r2, [r7, #28]
 80048c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69b9      	ldr	r1, [r7, #24]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	617b      	str	r3, [r7, #20]
   return(result);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048e4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80048e6:	4611      	mov	r1, r2
 80048e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048ea:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ec:	e003      	b.n	80048f6 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80048ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048f4:	4798      	blx	r3
}
 80048f6:	bf00      	nop
 80048f8:	3770      	adds	r7, #112	; 0x70
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d109      	bne.n	8004928 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800491c:	0852      	lsrs	r2, r2, #1
 800491e:	b292      	uxth	r2, r2
 8004920:	4611      	mov	r1, r2
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004926:	e003      	b.n	8004930 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	4798      	blx	r3
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d108      	bne.n	800497e <UART_DMAError+0x46>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2200      	movs	r2, #0
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f000 f8c7 	bl	8004b0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b22      	cmp	r3, #34	; 0x22
 800499e:	d108      	bne.n	80049b2 <UART_DMAError+0x7a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2200      	movs	r2, #0
 80049aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f000 f8d5 	bl	8004b5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0210 	orr.w	r2, r3, #16
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	68b8      	ldr	r0, [r7, #8]
 80049c4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b098      	sub	sp, #96	; 0x60
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	4a40      	ldr	r2, [pc, #256]	; (8004b00 <UART_Start_Receive_DMA+0x130>)
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	4a3f      	ldr	r2, [pc, #252]	; (8004b04 <UART_Start_Receive_DMA+0x134>)
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	4a3e      	ldr	r2, [pc, #248]	; (8004b08 <UART_Start_Receive_DMA+0x138>)
 8004a0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	f7fd f8be 	bl	8001bb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d019      	beq.n	8004a8e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004aae:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6a39      	ldr	r1, [r7, #32]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3760      	adds	r7, #96	; 0x60
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	080047d5 	.word	0x080047d5
 8004b04:	080048ff 	.word	0x080048ff
 8004b08:	08004939 	.word	0x08004939

08004b0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	61ba      	str	r2, [r7, #24]
 8004b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	613b      	str	r3, [r7, #16]
   return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b50:	bf00      	nop
 8004b52:	3724      	adds	r7, #36	; 0x24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b095      	sub	sp, #84	; 0x54
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b84:	643a      	str	r2, [r7, #64]	; 0x40
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d119      	bne.n	8004c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf4:	61ba      	str	r2, [r7, #24]
 8004bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	613b      	str	r3, [r7, #16]
   return(result);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c16:	bf00      	nop
 8004c18:	3754      	adds	r7, #84	; 0x54
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b21      	cmp	r3, #33	; 0x21
 8004c5e:	d13e      	bne.n	8004cde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c68:	d114      	bne.n	8004c94 <UART_Transmit_IT+0x48>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]
 8004c92:	e008      	b.n	8004ca6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6211      	str	r1, [r2, #32]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b08c      	sub	sp, #48	; 0x30
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b22      	cmp	r3, #34	; 0x22
 8004d30:	f040 80ad 	bne.w	8004e8e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	d117      	bne.n	8004d6e <UART_Receive_IT+0x50>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d113      	bne.n	8004d6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	1c9a      	adds	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d6c:	e026      	b.n	8004dbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d007      	beq.n	8004d92 <UART_Receive_IT+0x74>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <UART_Receive_IT+0x82>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e008      	b.n	8004db2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d15c      	bne.n	8004e8a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0220 	bic.w	r2, r2, #32
 8004dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d136      	bne.n	8004e7e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	613b      	str	r3, [r7, #16]
   return(result);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f023 0310 	bic.w	r3, r3, #16
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	623a      	str	r2, [r7, #32]
 8004e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	69f9      	ldr	r1, [r7, #28]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d10a      	bne.n	8004e6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8004e76:	4611      	mov	r1, r2
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e003      	b.n	8004e86 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e002      	b.n	8004e90 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
  }
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	; 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b0c0      	sub	sp, #256	; 0x100
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	68d9      	ldr	r1, [r3, #12]
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	ea40 0301 	orr.w	r3, r0, r1
 8004ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ef0:	f021 010c 	bic.w	r1, r1, #12
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004efe:	430b      	orrs	r3, r1
 8004f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	6999      	ldr	r1, [r3, #24]
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	ea40 0301 	orr.w	r3, r0, r1
 8004f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8f      	ldr	r3, [pc, #572]	; (8005164 <UART_SetConfig+0x2cc>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d005      	beq.n	8004f38 <UART_SetConfig+0xa0>
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b8d      	ldr	r3, [pc, #564]	; (8005168 <UART_SetConfig+0x2d0>)
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d104      	bne.n	8004f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f38:	f7fd ff94 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f40:	e003      	b.n	8004f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f42:	f7fd ff7b 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8004f46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f54:	f040 810c 	bne.w	8005170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f72:	415b      	adcs	r3, r3
 8004f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	eb12 0801 	adds.w	r8, r2, r1
 8004f80:	4629      	mov	r1, r5
 8004f82:	eb43 0901 	adc.w	r9, r3, r1
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9a:	4690      	mov	r8, r2
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	eb18 0303 	adds.w	r3, r8, r3
 8004fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fa8:	462b      	mov	r3, r5
 8004faa:	eb49 0303 	adc.w	r3, r9, r3
 8004fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	18db      	adds	r3, r3, r3
 8004fca:	653b      	str	r3, [r7, #80]	; 0x50
 8004fcc:	4613      	mov	r3, r2
 8004fce:	eb42 0303 	adc.w	r3, r2, r3
 8004fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fdc:	f7fb fdec 	bl	8000bb8 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4b61      	ldr	r3, [pc, #388]	; (800516c <UART_SetConfig+0x2d4>)
 8004fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	011c      	lsls	r4, r3, #4
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	64b9      	str	r1, [r7, #72]	; 0x48
 8005008:	415b      	adcs	r3, r3
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005010:	4641      	mov	r1, r8
 8005012:	eb12 0a01 	adds.w	sl, r2, r1
 8005016:	4649      	mov	r1, r9
 8005018:	eb43 0b01 	adc.w	fp, r3, r1
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800502c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005030:	4692      	mov	sl, r2
 8005032:	469b      	mov	fp, r3
 8005034:	4643      	mov	r3, r8
 8005036:	eb1a 0303 	adds.w	r3, sl, r3
 800503a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800503e:	464b      	mov	r3, r9
 8005040:	eb4b 0303 	adc.w	r3, fp, r3
 8005044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005054:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800505c:	460b      	mov	r3, r1
 800505e:	18db      	adds	r3, r3, r3
 8005060:	643b      	str	r3, [r7, #64]	; 0x40
 8005062:	4613      	mov	r3, r2
 8005064:	eb42 0303 	adc.w	r3, r2, r3
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
 800506a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800506e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005072:	f7fb fda1 	bl	8000bb8 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4611      	mov	r1, r2
 800507c:	4b3b      	ldr	r3, [pc, #236]	; (800516c <UART_SetConfig+0x2d4>)
 800507e:	fba3 2301 	umull	r2, r3, r3, r1
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2264      	movs	r2, #100	; 0x64
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	1acb      	subs	r3, r1, r3
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005092:	4b36      	ldr	r3, [pc, #216]	; (800516c <UART_SetConfig+0x2d4>)
 8005094:	fba3 2302 	umull	r2, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050a0:	441c      	add	r4, r3
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	1891      	adds	r1, r2, r2
 80050ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80050bc:	415b      	adcs	r3, r3
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050c4:	4641      	mov	r1, r8
 80050c6:	1851      	adds	r1, r2, r1
 80050c8:	6339      	str	r1, [r7, #48]	; 0x30
 80050ca:	4649      	mov	r1, r9
 80050cc:	414b      	adcs	r3, r1
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050dc:	4659      	mov	r1, fp
 80050de:	00cb      	lsls	r3, r1, #3
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e6:	4651      	mov	r1, sl
 80050e8:	00ca      	lsls	r2, r1, #3
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	4642      	mov	r2, r8
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050f8:	464b      	mov	r3, r9
 80050fa:	460a      	mov	r2, r1
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005110:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005118:	460b      	mov	r3, r1
 800511a:	18db      	adds	r3, r3, r3
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
 800511e:	4613      	mov	r3, r2
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800512a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800512e:	f7fb fd43 	bl	8000bb8 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4b0d      	ldr	r3, [pc, #52]	; (800516c <UART_SetConfig+0x2d4>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <UART_SetConfig+0x2d4>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4422      	add	r2, r4
 800515e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005160:	e105      	b.n	800536e <UART_SetConfig+0x4d6>
 8005162:	bf00      	nop
 8005164:	40011000 	.word	0x40011000
 8005168:	40011400 	.word	0x40011400
 800516c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800517a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800517e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005182:	4642      	mov	r2, r8
 8005184:	464b      	mov	r3, r9
 8005186:	1891      	adds	r1, r2, r2
 8005188:	6239      	str	r1, [r7, #32]
 800518a:	415b      	adcs	r3, r3
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005192:	4641      	mov	r1, r8
 8005194:	1854      	adds	r4, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb43 0501 	adc.w	r5, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	00eb      	lsls	r3, r5, #3
 80051a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051aa:	00e2      	lsls	r2, r4, #3
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	18e3      	adds	r3, r4, r3
 80051b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051b8:	464b      	mov	r3, r9
 80051ba:	eb45 0303 	adc.w	r3, r5, r3
 80051be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051de:	4629      	mov	r1, r5
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	4621      	mov	r1, r4
 80051e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e8:	4621      	mov	r1, r4
 80051ea:	008a      	lsls	r2, r1, #2
 80051ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051f0:	f7fb fce2 	bl	8000bb8 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4b60      	ldr	r3, [pc, #384]	; (800537c <UART_SetConfig+0x4e4>)
 80051fa:	fba3 2302 	umull	r2, r3, r3, r2
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	011c      	lsls	r4, r3, #4
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800520c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	61b9      	str	r1, [r7, #24]
 800521c:	415b      	adcs	r3, r3
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6139      	str	r1, [r7, #16]
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	67bb      	str	r3, [r7, #120]	; 0x78
 800526e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800527c:	4649      	mov	r1, r9
 800527e:	008b      	lsls	r3, r1, #2
 8005280:	4641      	mov	r1, r8
 8005282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005286:	4641      	mov	r1, r8
 8005288:	008a      	lsls	r2, r1, #2
 800528a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800528e:	f7fb fc93 	bl	8000bb8 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <UART_SetConfig+0x4e4>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	3332      	adds	r3, #50	; 0x32
 80052aa:	4a34      	ldr	r2, [pc, #208]	; (800537c <UART_SetConfig+0x4e4>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b6:	441c      	add	r4, r3
 80052b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052bc:	2200      	movs	r2, #0
 80052be:	673b      	str	r3, [r7, #112]	; 0x70
 80052c0:	677a      	str	r2, [r7, #116]	; 0x74
 80052c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052c6:	4642      	mov	r2, r8
 80052c8:	464b      	mov	r3, r9
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	415b      	adcs	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052d6:	4641      	mov	r1, r8
 80052d8:	1851      	adds	r1, r2, r1
 80052da:	6039      	str	r1, [r7, #0]
 80052dc:	4649      	mov	r1, r9
 80052de:	414b      	adcs	r3, r1
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052ee:	4659      	mov	r1, fp
 80052f0:	00cb      	lsls	r3, r1, #3
 80052f2:	4651      	mov	r1, sl
 80052f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f8:	4651      	mov	r1, sl
 80052fa:	00ca      	lsls	r2, r1, #3
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	4603      	mov	r3, r0
 8005302:	4642      	mov	r2, r8
 8005304:	189b      	adds	r3, r3, r2
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
 8005308:	464b      	mov	r3, r9
 800530a:	460a      	mov	r2, r1
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	663b      	str	r3, [r7, #96]	; 0x60
 800531c:	667a      	str	r2, [r7, #100]	; 0x64
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800532a:	4649      	mov	r1, r9
 800532c:	008b      	lsls	r3, r1, #2
 800532e:	4641      	mov	r1, r8
 8005330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005334:	4641      	mov	r1, r8
 8005336:	008a      	lsls	r2, r1, #2
 8005338:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800533c:	f7fb fc3c 	bl	8000bb8 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <UART_SetConfig+0x4e4>)
 8005346:	fba3 1302 	umull	r1, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2164      	movs	r1, #100	; 0x64
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	; 0x32
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <UART_SetConfig+0x4e4>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4422      	add	r2, r4
 800536c:	609a      	str	r2, [r3, #8]
}
 800536e:	bf00      	nop
 8005370:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005374:	46bd      	mov	sp, r7
 8005376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537a:	bf00      	nop
 800537c:	51eb851f 	.word	0x51eb851f

08005380 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005384:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <MX_USART2_UART_Init+0x54>)
 8005388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800538a:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 800538c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005398:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 800539a:	2200      	movs	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053a6:	220c      	movs	r2, #12
 80053a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053b6:	4806      	ldr	r0, [pc, #24]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053b8:	f7fe fe5c 	bl	8004074 <HAL_UART_Init>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80053c2:	f7fb ffc3 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  _HAL_UART_MspInit(&huart2);
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <MX_USART2_UART_Init+0x50>)
 80053c8:	f000 f806 	bl	80053d8 <_HAL_UART_MspInit>
  /* USER CODE END USART2_Init 2 */

}
 80053cc:	bf00      	nop
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000218 	.word	0x20000218
 80053d4:	40004400 	.word	0x40004400

080053d8 <_HAL_UART_MspInit>:

void _HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a34      	ldr	r2, [pc, #208]	; (80054c8 <_HAL_UART_MspInit+0xf0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d162      	bne.n	80054c0 <_HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	4b33      	ldr	r3, [pc, #204]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a32      	ldr	r2, [pc, #200]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 8005404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b30      	ldr	r3, [pc, #192]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a2b      	ldr	r2, [pc, #172]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <_HAL_UART_MspInit+0xf4>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005432:	230c      	movs	r3, #12
 8005434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005436:	2302      	movs	r3, #2
 8005438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543e:	2303      	movs	r3, #3
 8005440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005442:	2307      	movs	r3, #7
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4619      	mov	r1, r3
 800544c:	4820      	ldr	r0, [pc, #128]	; (80054d0 <_HAL_UART_MspInit+0xf8>)
 800544e:	f7fc ff03 	bl	8002258 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <_HAL_UART_MspInit+0x100>)
 8005456:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 800545a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800545e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005460:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005466:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005468:	2200      	movs	r2, #0
 800546a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 800546e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005472:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005476:	2200      	movs	r2, #0
 8005478:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 800547c:	2200      	movs	r2, #0
 800547e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005486:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 800548a:	2200      	movs	r2, #0
 800548c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005490:	2200      	movs	r2, #0
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005494:	480f      	ldr	r0, [pc, #60]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 8005496:	f7fc fadd 	bl	8001a54 <HAL_DMA_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <_HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80054a0:	f7fb ff54 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <_HAL_UART_MspInit+0xfc>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	2026      	movs	r0, #38	; 0x26
 80054b6:	f7fc fa96 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054ba:	2026      	movs	r0, #38	; 0x26
 80054bc:	f7fc faaf 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054c0:	bf00      	nop
 80054c2:	3728      	adds	r7, #40	; 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40004400 	.word	0x40004400
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40020000 	.word	0x40020000
 80054d4:	2000028c 	.word	0x2000028c
 80054d8:	400260a0 	.word	0x400260a0

080054dc <DC_Driver_GPIO_In_Pin_init>:
 */
#include "../../ECU_Layer/dc_motor_driver/dc_gpio.h"


void DC_Driver_GPIO_In_Pin_init(GPIO_TypeDef * DC_DRIVER_IN_x_PORT , uint16_t DC_DRIVER_IN_x_PIN)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e8:	f107 031c 	add.w	r3, r7, #28
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	if(DC_DRIVER_IN_x_PORT == GPIOA)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <DC_Driver_GPIO_In_Pin_init+0xe4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10e      	bne.n	800551e <DC_Driver_GPIO_In_Pin_init+0x42>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	4a2e      	ldr	r2, [pc, #184]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6313      	str	r3, [r2, #48]	; 0x30
 8005510:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	e037      	b.n	800558e <DC_Driver_GPIO_In_Pin_init+0xb2>
	}
	else if(DC_DRIVER_IN_x_PORT == GPIOB)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <DC_Driver_GPIO_In_Pin_init+0xec>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10e      	bne.n	8005544 <DC_Driver_GPIO_In_Pin_init+0x68>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	e024      	b.n	800558e <DC_Driver_GPIO_In_Pin_init+0xb2>
	}
	else if(DC_DRIVER_IN_x_PORT == GPIOC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a21      	ldr	r2, [pc, #132]	; (80055cc <DC_Driver_GPIO_In_Pin_init+0xf0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10e      	bne.n	800556a <DC_Driver_GPIO_In_Pin_init+0x8e>
	{
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	6313      	str	r3, [r2, #48]	; 0x30
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	e011      	b.n	800558e <DC_Driver_GPIO_In_Pin_init+0xb2>
	}
	else if(DC_DRIVER_IN_x_PORT == GPIOH)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <DC_Driver_GPIO_In_Pin_init+0xf4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10d      	bne.n	800558e <DC_Driver_GPIO_In_Pin_init+0xb2>
	{
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	6313      	str	r3, [r2, #48]	; 0x30
 8005582:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <DC_Driver_GPIO_In_Pin_init+0xe8>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
	{

	}

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DC_DRIVER_IN_x_PORT, DC_DRIVER_IN_x_PIN, GPIO_PIN_RESET);
 800558e:	887b      	ldrh	r3, [r7, #2]
 8005590:	2200      	movs	r2, #0
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fc ffe3 	bl	8002560 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA3 PA4 */
	GPIO_InitStruct.Pin = DC_DRIVER_IN_x_PIN;
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800559e:	2301      	movs	r3, #1
 80055a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(DC_DRIVER_IN_x_PORT, &GPIO_InitStruct);
 80055aa:	f107 031c 	add.w	r3, r7, #28
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fc fe51 	bl	8002258 <HAL_GPIO_Init>
}
 80055b6:	bf00      	nop
 80055b8:	3730      	adds	r7, #48	; 0x30
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40020000 	.word	0x40020000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40020400 	.word	0x40020400
 80055cc:	40020800 	.word	0x40020800
 80055d0:	40021c00 	.word	0x40021c00

080055d4 <dc_motor_driver_init>:
 */
#include "../../ECU_Layer/dc_motor_driver/dc_motor.h"


void dc_motor_driver_init(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
/* Four DIO driver pins initialization */
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_1)
	DC_Driver_GPIO_In_Pin_init(DC_DRIVER_IN_1_PORT, DC_DRIVER_IN_1_PIN);
 80055d8:	2102      	movs	r1, #2
 80055da:	480e      	ldr	r0, [pc, #56]	; (8005614 <dc_motor_driver_init+0x40>)
 80055dc:	f7ff ff7e 	bl	80054dc <DC_Driver_GPIO_In_Pin_init>
	DC_Driver_GPIO_In_Pin_init(DC_DRIVER_IN_2_PORT, DC_DRIVER_IN_2_PIN);
 80055e0:	2104      	movs	r1, #4
 80055e2:	480c      	ldr	r0, [pc, #48]	; (8005614 <dc_motor_driver_init+0x40>)
 80055e4:	f7ff ff7a 	bl	80054dc <DC_Driver_GPIO_In_Pin_init>
#endif
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_2)
	DC_Driver_GPIO_In_Pin_init(DC_DRIVER_IN_3_PORT, DC_DRIVER_IN_3_PIN);
 80055e8:	2120      	movs	r1, #32
 80055ea:	480b      	ldr	r0, [pc, #44]	; (8005618 <dc_motor_driver_init+0x44>)
 80055ec:	f7ff ff76 	bl	80054dc <DC_Driver_GPIO_In_Pin_init>
	DC_Driver_GPIO_In_Pin_init(DC_DRIVER_IN_4_PORT, DC_DRIVER_IN_4_PIN);
 80055f0:	2140      	movs	r1, #64	; 0x40
 80055f2:	4809      	ldr	r0, [pc, #36]	; (8005618 <dc_motor_driver_init+0x44>)
 80055f4:	f7ff ff72 	bl	80054dc <DC_Driver_GPIO_In_Pin_init>
#endif
/* End Pins initialization */

/* Two PWM Pins (EN_A, EN_B) initialization */
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_1)
	dc_TIM3_Init();
 80055f8:	f000 f924 	bl	8005844 <dc_TIM3_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80055fc:	2104      	movs	r1, #4
 80055fe:	4807      	ldr	r0, [pc, #28]	; (800561c <dc_motor_driver_init+0x48>)
 8005600:	f7fd fdc2 	bl	8003188 <HAL_TIM_PWM_Start>
#endif
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_2)
	dc_TIM10_Init();
 8005604:	f000 f890 	bl	8005728 <dc_TIM10_Init>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8005608:	2100      	movs	r1, #0
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <dc_motor_driver_init+0x4c>)
 800560c:	f7fd fdbc 	bl	8003188 <HAL_TIM_PWM_Start>
#endif
/* End PWM initialization */
}
 8005610:	bf00      	nop
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40020400 	.word	0x40020400
 8005618:	40020000 	.word	0x40020000
 800561c:	200003a0 	.word	0x200003a0
 8005620:	200002ec 	.word	0x200002ec

08005624 <dc_motor_driver_move>:
/*
 * speed
 * direction: the
 */
void dc_motor_driver_move(uint8_t motor_x, uint16_t motor_speed, int8_t motor_direction)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
 800562e:	460b      	mov	r3, r1
 8005630:	80bb      	strh	r3, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	71bb      	strb	r3, [r7, #6]
	if(MOTOR_ROT_REVERSE == motor_direction)
 8005636:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d123      	bne.n	8005686 <dc_motor_driver_move+0x62>
	{
		if(MOTOR_DRIVER_CH_1 == motor_x)
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10e      	bne.n	8005662 <dc_motor_driver_move+0x3e>
		{
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_1)
		HAL_GPIO_WritePin(DC_DRIVER_IN_1_PORT, DC_DRIVER_IN_1_PIN, GPIO_PIN_SET);
 8005644:	2201      	movs	r2, #1
 8005646:	2102      	movs	r1, #2
 8005648:	4824      	ldr	r0, [pc, #144]	; (80056dc <dc_motor_driver_move+0xb8>)
 800564a:	f7fc ff89 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_DRIVER_IN_2_PORT, DC_DRIVER_IN_2_PIN, GPIO_PIN_RESET);
 800564e:	2200      	movs	r2, #0
 8005650:	2104      	movs	r1, #4
 8005652:	4822      	ldr	r0, [pc, #136]	; (80056dc <dc_motor_driver_move+0xb8>)
 8005654:	f7fc ff84 	bl	8002560 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, motor_speed);
 8005658:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <dc_motor_driver_move+0xbc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	88ba      	ldrh	r2, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
#endif
		}
		else{  }
	}
	else{  }
}
 8005660:	e038      	b.n	80056d4 <dc_motor_driver_move+0xb0>
		else if(MOTOR_DRIVER_CH_2 == motor_x)
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d135      	bne.n	80056d4 <dc_motor_driver_move+0xb0>
		HAL_GPIO_WritePin(DC_DRIVER_IN_3_PORT, DC_DRIVER_IN_3_PIN, GPIO_PIN_SET);
 8005668:	2201      	movs	r2, #1
 800566a:	2120      	movs	r1, #32
 800566c:	481d      	ldr	r0, [pc, #116]	; (80056e4 <dc_motor_driver_move+0xc0>)
 800566e:	f7fc ff77 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_DRIVER_IN_4_PORT, DC_DRIVER_IN_4_PIN, GPIO_PIN_RESET);
 8005672:	2200      	movs	r2, #0
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	481b      	ldr	r0, [pc, #108]	; (80056e4 <dc_motor_driver_move+0xc0>)
 8005678:	f7fc ff72 	bl	8002560 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10,TIM_CHANNEL_1, motor_speed);
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <dc_motor_driver_move+0xc4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	88ba      	ldrh	r2, [r7, #4]
 8005682:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005684:	e026      	b.n	80056d4 <dc_motor_driver_move+0xb0>
	else if(MOTOR_ROT_FORWARD == motor_direction)
 8005686:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d122      	bne.n	80056d4 <dc_motor_driver_move+0xb0>
		if(MOTOR_DRIVER_CH_1 == motor_x)
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10e      	bne.n	80056b2 <dc_motor_driver_move+0x8e>
		HAL_GPIO_WritePin(DC_DRIVER_IN_1_PORT, DC_DRIVER_IN_1_PIN, GPIO_PIN_RESET);
 8005694:	2200      	movs	r2, #0
 8005696:	2102      	movs	r1, #2
 8005698:	4810      	ldr	r0, [pc, #64]	; (80056dc <dc_motor_driver_move+0xb8>)
 800569a:	f7fc ff61 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_DRIVER_IN_2_PORT, DC_DRIVER_IN_2_PIN, GPIO_PIN_SET);
 800569e:	2201      	movs	r2, #1
 80056a0:	2104      	movs	r1, #4
 80056a2:	480e      	ldr	r0, [pc, #56]	; (80056dc <dc_motor_driver_move+0xb8>)
 80056a4:	f7fc ff5c 	bl	8002560 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, motor_speed);
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <dc_motor_driver_move+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	88ba      	ldrh	r2, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80056b0:	e010      	b.n	80056d4 <dc_motor_driver_move+0xb0>
		else if(MOTOR_DRIVER_CH_2 == motor_x)
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d10d      	bne.n	80056d4 <dc_motor_driver_move+0xb0>
		HAL_GPIO_WritePin(DC_DRIVER_IN_3_PORT, DC_DRIVER_IN_3_PIN, GPIO_PIN_RESET);
 80056b8:	2200      	movs	r2, #0
 80056ba:	2120      	movs	r1, #32
 80056bc:	4809      	ldr	r0, [pc, #36]	; (80056e4 <dc_motor_driver_move+0xc0>)
 80056be:	f7fc ff4f 	bl	8002560 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_DRIVER_IN_4_PORT, DC_DRIVER_IN_4_PIN, GPIO_PIN_SET);
 80056c2:	2201      	movs	r2, #1
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	4807      	ldr	r0, [pc, #28]	; (80056e4 <dc_motor_driver_move+0xc0>)
 80056c8:	f7fc ff4a 	bl	8002560 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10,TIM_CHANNEL_1, motor_speed);
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <dc_motor_driver_move+0xc4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	88ba      	ldrh	r2, [r7, #4]
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40020400 	.word	0x40020400
 80056e0:	200003a0 	.word	0x200003a0
 80056e4:	40020000 	.word	0x40020000
 80056e8:	200002ec 	.word	0x200002ec

080056ec <dc_motor_driver_stop>:

void dc_motor_driver_stop(uint8_t motor_x)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
	if(MOTOR_DRIVER_CH_1 == motor_x)
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d104      	bne.n	8005706 <dc_motor_driver_stop+0x1a>
	{
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_1)
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <dc_motor_driver_stop+0x34>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
#if (DUAL_CHANNEL == ENABLE || SELECTED_CHANNEL == MOTOR_DRIVER_CH_2)
		__HAL_TIM_SET_COMPARE(&htim10,TIM_CHANNEL_1, 0);
#endif
	}
	else{   }
}
 8005704:	e006      	b.n	8005714 <dc_motor_driver_stop+0x28>
	else if(MOTOR_DRIVER_CH_2 == motor_x)
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d103      	bne.n	8005714 <dc_motor_driver_stop+0x28>
		__HAL_TIM_SET_COMPARE(&htim10,TIM_CHANNEL_1, 0);
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <dc_motor_driver_stop+0x38>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	200003a0 	.word	0x200003a0
 8005724:	200002ec 	.word	0x200002ec

08005728 <dc_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void dc_TIM10_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800572e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800573c:	f107 0320 	add.w	r3, r7, #32
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM10_Init 1 */
    htim10.Instance = TIM10;
 8005758:	4b37      	ldr	r3, [pc, #220]	; (8005838 <dc_TIM10_Init+0x110>)
 800575a:	4a38      	ldr	r2, [pc, #224]	; (800583c <dc_TIM10_Init+0x114>)
 800575c:	601a      	str	r2, [r3, #0]
    htim10.Init.Prescaler = 83;
 800575e:	4b36      	ldr	r3, [pc, #216]	; (8005838 <dc_TIM10_Init+0x110>)
 8005760:	2253      	movs	r2, #83	; 0x53
 8005762:	605a      	str	r2, [r3, #4]
    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <dc_TIM10_Init+0x110>)
 8005766:	2200      	movs	r2, #0
 8005768:	609a      	str	r2, [r3, #8]
    htim10.Init.Period = 100-1;
 800576a:	4b33      	ldr	r3, [pc, #204]	; (8005838 <dc_TIM10_Init+0x110>)
 800576c:	2263      	movs	r2, #99	; 0x63
 800576e:	60da      	str	r2, [r3, #12]
    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <dc_TIM10_Init+0x110>)
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
    htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005776:	4b30      	ldr	r3, [pc, #192]	; (8005838 <dc_TIM10_Init+0x110>)
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800577c:	482e      	ldr	r0, [pc, #184]	; (8005838 <dc_TIM10_Init+0x110>)
 800577e:	f7fd fb85 	bl	8002e8c <HAL_TIM_Base_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <dc_TIM10_Init+0x64>
    {
      Error_Handler();
 8005788:	f7fb fde0 	bl	800134c <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800578c:	482a      	ldr	r0, [pc, #168]	; (8005838 <dc_TIM10_Init+0x110>)
 800578e:	f7fd fc95 	bl	80030bc <HAL_TIM_PWM_Init>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <dc_TIM10_Init+0x74>
    {
      Error_Handler();
 8005798:	f7fb fdd8 	bl	800134c <Error_Handler>
    }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800579c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80057a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057a6:	4619      	mov	r1, r3
 80057a8:	4823      	ldr	r0, [pc, #140]	; (8005838 <dc_TIM10_Init+0x110>)
 80057aa:	f7fd ff87 	bl	80036bc <HAL_TIM_ConfigClockSource>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <dc_TIM10_Init+0x90>
  {
    Error_Handler();
 80057b4:	f7fb fdca 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80057b8:	481f      	ldr	r0, [pc, #124]	; (8005838 <dc_TIM10_Init+0x110>)
 80057ba:	f7fd fc7f 	bl	80030bc <HAL_TIM_PWM_Init>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <dc_TIM10_Init+0xa0>
  {
    Error_Handler();
 80057c4:	f7fb fdc2 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057c8:	2300      	movs	r3, #0
 80057ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 80057d0:	f107 0320 	add.w	r3, r7, #32
 80057d4:	4619      	mov	r1, r3
 80057d6:	4818      	ldr	r0, [pc, #96]	; (8005838 <dc_TIM10_Init+0x110>)
 80057d8:	f7fe fbc0 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <dc_TIM10_Init+0xbe>
  {
    Error_Handler();
 80057e2:	f7fb fdb3 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057e6:	2360      	movs	r3, #96	; 0x60
 80057e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80057f2:	2304      	movs	r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	2200      	movs	r2, #0
 80057fa:	4619      	mov	r1, r3
 80057fc:	480e      	ldr	r0, [pc, #56]	; (8005838 <dc_TIM10_Init+0x110>)
 80057fe:	f7fd fe9b 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <dc_TIM10_Init+0xe4>
  {
    Error_Handler();
 8005808:	f7fb fda0 	bl	800134c <Error_Handler>
  }

  /* USER CODE BEGIN TIM5_Init 2 */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800580c:	2300      	movs	r3, #0
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <dc_TIM10_Init+0x118>)
 8005812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005814:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <dc_TIM10_Init+0x118>)
 8005816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581a:	6453      	str	r3, [r2, #68]	; 0x44
 800581c:	4b08      	ldr	r3, [pc, #32]	; (8005840 <dc_TIM10_Init+0x118>)
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM5_Init 2 */
  dc_TIM_MspPostInit(&htim10);
 8005828:	4803      	ldr	r0, [pc, #12]	; (8005838 <dc_TIM10_Init+0x110>)
 800582a:	f000 f8a5 	bl	8005978 <dc_TIM_MspPostInit>

}
 800582e:	bf00      	nop
 8005830:	3738      	adds	r7, #56	; 0x38
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200002ec 	.word	0x200002ec
 800583c:	40014400 	.word	0x40014400
 8005840:	40023800 	.word	0x40023800

08005844 <dc_TIM3_Init>:
/* TIM3 init function */


void dc_TIM3_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08e      	sub	sp, #56	; 0x38
 8005848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800584a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	609a      	str	r2, [r3, #8]
 8005856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005858:	f107 0320 	add.w	r3, r7, #32
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	611a      	str	r2, [r3, #16]
 8005870:	615a      	str	r2, [r3, #20]
 8005872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005874:	4b2d      	ldr	r3, [pc, #180]	; (800592c <dc_TIM3_Init+0xe8>)
 8005876:	4a2e      	ldr	r2, [pc, #184]	; (8005930 <dc_TIM3_Init+0xec>)
 8005878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800587a:	4b2c      	ldr	r3, [pc, #176]	; (800592c <dc_TIM3_Init+0xe8>)
 800587c:	2253      	movs	r2, #83	; 0x53
 800587e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005880:	4b2a      	ldr	r3, [pc, #168]	; (800592c <dc_TIM3_Init+0xe8>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <dc_TIM3_Init+0xe8>)
 8005888:	2263      	movs	r2, #99	; 0x63
 800588a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800588c:	4b27      	ldr	r3, [pc, #156]	; (800592c <dc_TIM3_Init+0xe8>)
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005892:	4b26      	ldr	r3, [pc, #152]	; (800592c <dc_TIM3_Init+0xe8>)
 8005894:	2200      	movs	r2, #0
 8005896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005898:	4824      	ldr	r0, [pc, #144]	; (800592c <dc_TIM3_Init+0xe8>)
 800589a:	f7fd faf7 	bl	8002e8c <HAL_TIM_Base_Init>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <dc_TIM3_Init+0x64>
  {
    Error_Handler();
 80058a4:	f7fb fd52 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80058ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b2:	4619      	mov	r1, r3
 80058b4:	481d      	ldr	r0, [pc, #116]	; (800592c <dc_TIM3_Init+0xe8>)
 80058b6:	f7fd ff01 	bl	80036bc <HAL_TIM_ConfigClockSource>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <dc_TIM3_Init+0x80>
  {
    Error_Handler();
 80058c0:	f7fb fd44 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80058c4:	4819      	ldr	r0, [pc, #100]	; (800592c <dc_TIM3_Init+0xe8>)
 80058c6:	f7fd fbf9 	bl	80030bc <HAL_TIM_PWM_Init>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <dc_TIM3_Init+0x90>
  {
    Error_Handler();
 80058d0:	f7fb fd3c 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d4:	2300      	movs	r3, #0
 80058d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058d8:	2300      	movs	r3, #0
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80058dc:	f107 0320 	add.w	r3, r7, #32
 80058e0:	4619      	mov	r1, r3
 80058e2:	4812      	ldr	r0, [pc, #72]	; (800592c <dc_TIM3_Init+0xe8>)
 80058e4:	f7fe fb3a 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <dc_TIM3_Init+0xae>
  {
    Error_Handler();
 80058ee:	f7fb fd2d 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058f2:	2360      	movs	r3, #96	; 0x60
 80058f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80058fe:	2304      	movs	r3, #4
 8005900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005902:	1d3b      	adds	r3, r7, #4
 8005904:	2204      	movs	r2, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4808      	ldr	r0, [pc, #32]	; (800592c <dc_TIM3_Init+0xe8>)
 800590a:	f7fd fe15 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <dc_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005914:	f7fb fd1a 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  dc_TIM_Base_MspInit(&htim3);
 8005918:	4804      	ldr	r0, [pc, #16]	; (800592c <dc_TIM3_Init+0xe8>)
 800591a:	f000 f80b 	bl	8005934 <dc_TIM_Base_MspInit>
  /* USER CODE END TIM3_Init 2 */
  dc_TIM_MspPostInit(&htim3);
 800591e:	4803      	ldr	r0, [pc, #12]	; (800592c <dc_TIM3_Init+0xe8>)
 8005920:	f000 f82a 	bl	8005978 <dc_TIM_MspPostInit>

}
 8005924:	bf00      	nop
 8005926:	3738      	adds	r7, #56	; 0x38
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200003a0 	.word	0x200003a0
 8005930:	40000400 	.word	0x40000400

08005934 <dc_TIM_Base_MspInit>:

void dc_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

  //GPIO_InitTypeDef GPIO_InitStruct = {0};

  if(tim_baseHandle->Instance==TIM3)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <dc_TIM_Base_MspInit+0x3c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10d      	bne.n	8005962 <dc_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <dc_TIM_Base_MspInit+0x40>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <dc_TIM_Base_MspInit+0x40>)
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	6413      	str	r3, [r2, #64]	; 0x40
 8005956:	4b07      	ldr	r3, [pc, #28]	; (8005974 <dc_TIM_Base_MspInit+0x40>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40000400 	.word	0x40000400
 8005974:	40023800 	.word	0x40023800

08005978 <dc_TIM_MspPostInit>:

void dc_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a24      	ldr	r2, [pc, #144]	; (8005a28 <dc_TIM_MspPostInit+0xb0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d11e      	bne.n	80059d8 <dc_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	6313      	str	r3, [r2, #48]	; 0x30
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWMT3_CH2_MOTOR_2_Pin;
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ba:	2302      	movs	r3, #2
 80059bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c2:	2300      	movs	r3, #0
 80059c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80059c6:	2302      	movs	r3, #2
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMT3_CH2_MOTOR_2_GPIO_Port, &GPIO_InitStruct);
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4619      	mov	r1, r3
 80059d0:	4817      	ldr	r0, [pc, #92]	; (8005a30 <dc_TIM_MspPostInit+0xb8>)
 80059d2:	f7fc fc41 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80059d6:	e023      	b.n	8005a20 <dc_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM10)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <dc_TIM_MspPostInit+0xbc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d11e      	bne.n	8005a20 <dc_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	6313      	str	r3, [r2, #48]	; 0x30
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <dc_TIM_MspPostInit+0xb4>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a04:	2302      	movs	r3, #2
 8005a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005a10:	2303      	movs	r3, #3
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4807      	ldr	r0, [pc, #28]	; (8005a38 <dc_TIM_MspPostInit+0xc0>)
 8005a1c:	f7fc fc1c 	bl	8002258 <HAL_GPIO_Init>
}
 8005a20:	bf00      	nop
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40020000 	.word	0x40020000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40020400 	.word	0x40020400

08005a3c <Optical_Encoder_Init>:
uint16_t opt_enc_motor_1_speed;
uint16_t opt_enc_motor_2_speed;
/* TIM1 init function */

void Optical_Encoder_Init(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
	Encoder_Motor1_TIM_Init();
 8005a40:	f000 f854 	bl	8005aec <Encoder_Motor1_TIM_Init>
	Encoder_Motor2_TIM_Init();
 8005a44:	f000 f8ac 	bl	8005ba0 <Encoder_Motor2_TIM_Init>
	Encoder_TIM_IT_Init();
 8005a48:	f000 f902 	bl	8005c50 <Encoder_TIM_IT_Init>
	htim9.PeriodElapsedCallback = Optical_Encoder_Read_data_Handler;
 8005a4c:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <Optical_Encoder_Init+0x1c>)
 8005a4e:	4a03      	ldr	r2, [pc, #12]	; (8005a5c <Optical_Encoder_Init+0x20>)
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005a54:	bf00      	nop
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	200005bc 	.word	0x200005bc
 8005a5c:	08005aa5 	.word	0x08005aa5

08005a60 <Optical_Encoder_Read_data_IT>:

void Optical_Encoder_Read_data_IT(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
    TIM1->CNT = 0;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <Optical_Encoder_Read_data_IT+0x30>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CNT = 0;
 8005a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a6e:	2200      	movs	r2, #0
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24
    TIM9->CNT = 0;
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <Optical_Encoder_Read_data_IT+0x34>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim1);
 8005a78:	4807      	ldr	r0, [pc, #28]	; (8005a98 <Optical_Encoder_Read_data_IT+0x38>)
 8005a7a:	f7fd fa63 	bl	8002f44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8005a7e:	4807      	ldr	r0, [pc, #28]	; (8005a9c <Optical_Encoder_Read_data_IT+0x3c>)
 8005a80:	f7fd fa60 	bl	8002f44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim9);
 8005a84:	4806      	ldr	r0, [pc, #24]	; (8005aa0 <Optical_Encoder_Read_data_IT+0x40>)
 8005a86:	f7fd fab7 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40014000 	.word	0x40014000
 8005a98:	20000454 	.word	0x20000454
 8005a9c:	20000508 	.word	0x20000508
 8005aa0:	200005bc 	.word	0x200005bc

08005aa4 <Optical_Encoder_Read_data_Handler>:

void Optical_Encoder_Read_data_Handler()
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
	opt_enc_motor_1_speed = TIM1->CNT;
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <Optical_Encoder_Read_data_Handler+0x38>)
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <Optical_Encoder_Read_data_Handler+0x3c>)
 8005ab0:	801a      	strh	r2, [r3, #0]
	opt_enc_motor_2_speed = TIM2->CNT;
 8005ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <Optical_Encoder_Read_data_Handler+0x40>)
 8005abc:	801a      	strh	r2, [r3, #0]
	TIM1->CNT = 0;
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <Optical_Encoder_Read_data_Handler+0x38>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8005ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ac8:	2200      	movs	r2, #0
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM9->CNT = 0;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <Optical_Encoder_Read_data_Handler+0x44>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ad2:	bf00      	nop
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	20000670 	.word	0x20000670
 8005ae4:	20000672 	.word	0x20000672
 8005ae8:	40014000 	.word	0x40014000

08005aec <Encoder_Motor1_TIM_Init>:

void Encoder_Motor1_TIM_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b00:	463b      	mov	r3, r7
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <Encoder_Motor1_TIM_Init+0xb0>)
 8005b0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005b28:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005b34:	4818      	ldr	r0, [pc, #96]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b36:	f7fd f9a9 	bl	8002e8c <HAL_TIM_Base_Init>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <Encoder_Motor1_TIM_Init+0x58>
  {
    Error_Handler();
 8005b40:	f7fb fc04 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8005b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b48:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_INVERTED;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 8005b54:	230f      	movs	r3, #15
 8005b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005b58:	f107 0308 	add.w	r3, r7, #8
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	480e      	ldr	r0, [pc, #56]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b60:	f7fd fdac 	bl	80036bc <HAL_TIM_ConfigClockSource>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <Encoder_Motor1_TIM_Init+0x82>
  {
    Error_Handler();
 8005b6a:	f7fb fbef 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005b76:	463b      	mov	r3, r7
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4807      	ldr	r0, [pc, #28]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b7c:	f7fe f9ee 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <Encoder_Motor1_TIM_Init+0x9e>
  {
    Error_Handler();
 8005b86:	f7fb fbe1 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8005b8a:	4803      	ldr	r0, [pc, #12]	; (8005b98 <Encoder_Motor1_TIM_Init+0xac>)
 8005b8c:	f000 f89e 	bl	8005ccc <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8005b90:	bf00      	nop
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000454 	.word	0x20000454
 8005b9c:	40010000 	.word	0x40010000

08005ba0 <Encoder_Motor2_TIM_Init>:
/* TIM2 init function */
void Encoder_Motor2_TIM_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
 8005bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8005bc4:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005bc6:	2253      	movs	r2, #83	; 0x53
 8005bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bca:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005be4:	4818      	ldr	r0, [pc, #96]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005be6:	f7fd f951 	bl	8002e8c <HAL_TIM_Base_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <Encoder_Motor2_TIM_Init+0x54>
  {
    Error_Handler();
 8005bf0:	f7fb fbac 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8005bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf8:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_INVERTED;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 8005c04:	230f      	movs	r3, #15
 8005c06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c08:	f107 0308 	add.w	r3, r7, #8
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	480e      	ldr	r0, [pc, #56]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005c10:	f7fd fd54 	bl	80036bc <HAL_TIM_ConfigClockSource>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <Encoder_Motor2_TIM_Init+0x7e>
  {
    Error_Handler();
 8005c1a:	f7fb fb97 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c26:	463b      	mov	r3, r7
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4807      	ldr	r0, [pc, #28]	; (8005c48 <Encoder_Motor2_TIM_Init+0xa8>)
 8005c2c:	f7fe f996 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <Encoder_Motor2_TIM_Init+0x9a>
  {
    Error_Handler();
 8005c36:	f7fb fb89 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8005c3a:	4804      	ldr	r0, [pc, #16]	; (8005c4c <Encoder_Motor2_TIM_Init+0xac>)
 8005c3c:	f000 f846 	bl	8005ccc <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM2_Init 2 */

}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000508 	.word	0x20000508
 8005c4c:	20000454 	.word	0x20000454

08005c50 <Encoder_TIM_IT_Init>:

void Encoder_TIM_IT_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c56:	463b      	mov	r3, r7
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005c62:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <Encoder_TIM_IT_Init+0x78>)
 8005c66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400-1;
 8005c68:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c6a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005c6e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c78:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c7c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005c8a:	480e      	ldr	r0, [pc, #56]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005c8c:	f7fd f8fe 	bl	8002e8c <HAL_TIM_Base_Init>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <Encoder_TIM_IT_Init+0x4a>
  {
    Error_Handler();
 8005c96:	f7fb fb59 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005ca6:	f7fd fd09 	bl	80036bc <HAL_TIM_ConfigClockSource>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <Encoder_TIM_IT_Init+0x64>
  {
    Error_Handler();
 8005cb0:	f7fb fb4c 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_Base_MspInit(&htim9);
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <Encoder_TIM_IT_Init+0x74>)
 8005cb6:	f000 f809 	bl	8005ccc <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM9_Init 2 */

}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200005bc 	.word	0x200005bc
 8005cc8:	40014000 	.word	0x40014000

08005ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	; 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd4:	f107 031c 	add.w	r3, r7, #28
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a45      	ldr	r2, [pc, #276]	; (8005e00 <HAL_TIM_Base_MspInit+0x134>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d135      	bne.n	8005d5a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	4b44      	ldr	r3, [pc, #272]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	4a43      	ldr	r2, [pc, #268]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005cfe:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	4b3d      	ldr	r3, [pc, #244]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1a:	4b3a      	ldr	r3, [pc, #232]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = ENCODER_MOTOR_2_Pin;
 8005d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_MOTOR_2_GPIO_Port, &GPIO_InitStruct);
 8005d3c:	f107 031c 	add.w	r3, r7, #28
 8005d40:	4619      	mov	r1, r3
 8005d42:	4831      	ldr	r0, [pc, #196]	; (8005e08 <HAL_TIM_Base_MspInit+0x13c>)
 8005d44:	f7fc fa88 	bl	8002258 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2018      	movs	r0, #24
 8005d4e:	f7fb fe4a 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005d52:	2018      	movs	r0, #24
 8005d54:	f7fb fe63 	bl	8001a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8005d58:	e04d      	b.n	8005df6 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d12d      	bne.n	8005dc0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	4a25      	ldr	r2, [pc, #148]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	6413      	str	r3, [r2, #64]	; 0x40
 8005d74:	4b23      	ldr	r3, [pc, #140]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d90:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_MOTOR_1_Pin;
 8005d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da2:	2302      	movs	r3, #2
 8005da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005daa:	2300      	movs	r3, #0
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005dae:	2301      	movs	r3, #1
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_MOTOR_1_GPIO_Port, &GPIO_InitStruct);
 8005db2:	f107 031c 	add.w	r3, r7, #28
 8005db6:	4619      	mov	r1, r3
 8005db8:	4813      	ldr	r0, [pc, #76]	; (8005e08 <HAL_TIM_Base_MspInit+0x13c>)
 8005dba:	f7fc fa4d 	bl	8002258 <HAL_GPIO_Init>
}
 8005dbe:	e01a      	b.n	8005df6 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM9)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a11      	ldr	r2, [pc, #68]	; (8005e0c <HAL_TIM_Base_MspInit+0x140>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d115      	bne.n	8005df6 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_TIM_Base_MspInit+0x138>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005de6:	2200      	movs	r2, #0
 8005de8:	2100      	movs	r1, #0
 8005dea:	2018      	movs	r0, #24
 8005dec:	f7fb fdfb 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005df0:	2018      	movs	r0, #24
 8005df2:	f7fb fe14 	bl	8001a1e <HAL_NVIC_EnableIRQ>
}
 8005df6:	bf00      	nop
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40023800 	.word	0x40023800
 8005e08:	40020000 	.word	0x40020000
 8005e0c:	40014000 	.word	0x40014000

08005e10 <ultra_handler>:
{
	ultrasonic_sensor_start_distance_measurment();
}

void ultra_handler (void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
	if(uart_car_buf[0] == 'D' && uart_car_buf[1] == 'U')
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <ultra_handler+0x58>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b44      	cmp	r3, #68	; 0x44
 8005e1a:	d120      	bne.n	8005e5e <ultra_handler+0x4e>
 8005e1c:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <ultra_handler+0x58>)
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b55      	cmp	r3, #85	; 0x55
 8005e22:	d11c      	bne.n	8005e5e <ultra_handler+0x4e>
	{
		Distance = (uart_car_buf[2]-48)*100 + (uart_car_buf[3]-48)*10 + (uart_car_buf[3]-48);
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <ultra_handler+0x58>)
 8005e26:	789b      	ldrb	r3, [r3, #2]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	0092      	lsls	r2, r2, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	461a      	mov	r2, r3
 8005e30:	0091      	lsls	r1, r2, #2
 8005e32:	461a      	mov	r2, r3
 8005e34:	460b      	mov	r3, r1
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <ultra_handler+0x58>)
 8005e3e:	78db      	ldrb	r3, [r3, #3]
 8005e40:	4619      	mov	r1, r3
 8005e42:	0089      	lsls	r1, r1, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <ultra_handler+0x58>)
 8005e50:	78db      	ldrb	r3, [r3, #3]
 8005e52:	4413      	add	r3, r2
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	3330      	adds	r3, #48	; 0x30
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <ultra_handler+0x5c>)
 8005e5c:	701a      	strb	r2, [r3, #0]
	}
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	2000072c 	.word	0x2000072c
 8005e6c:	20000728 	.word	0x20000728

08005e70 <RTE_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void RTE_DMA_Init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <RTE_DMA_Init+0x3c>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <RTE_DMA_Init+0x3c>)
 8005e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <RTE_DMA_Init+0x3c>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8e:	607b      	str	r3, [r7, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005e92:	2200      	movs	r2, #0
 8005e94:	2100      	movs	r1, #0
 8005e96:	203a      	movs	r0, #58	; 0x3a
 8005e98:	f7fb fda5 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005e9c:	203a      	movs	r0, #58	; 0x3a
 8005e9e:	f7fb fdbe 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800

08005eb0 <RTE_uart_init>:

uint8_t uart_car_buf[10];


void RTE_uart_init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8005eb4:	f000 f896 	bl	8005fe4 <MX_USART1_UART_Init>
	HAL_UART_Receive_DMA(&huart1, uart_car_buf, 10);
 8005eb8:	220a      	movs	r2, #10
 8005eba:	4904      	ldr	r1, [pc, #16]	; (8005ecc <RTE_uart_init+0x1c>)
 8005ebc:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <RTE_uart_init+0x20>)
 8005ebe:	f7fe f933 	bl	8004128 <HAL_UART_Receive_DMA>
	huart1.RxCpltCallback = rte_uart_handler;
 8005ec2:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <RTE_uart_init+0x20>)
 8005ec4:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <RTE_uart_init+0x24>)
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	2000072c 	.word	0x2000072c
 8005ed0:	20000740 	.word	0x20000740
 8005ed4:	08005ef5 	.word	0x08005ef5

08005ed8 <RTE_Layer_Init>:

//extern DMA_HandleTypeDef hdma;
void RTE_Layer_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	RTE_DMA_Init();
 8005edc:	f7ff ffc8 	bl	8005e70 <RTE_DMA_Init>

	clock_init();
 8005ee0:	f000 f82a 	bl	8005f38 <clock_init>

	RTE_uart_init();
 8005ee4:	f7ff ffe4 	bl	8005eb0 <RTE_uart_init>

	dc_motor_driver_init();
 8005ee8:	f7ff fb74 	bl	80055d4 <dc_motor_driver_init>

	//ultrasonic_sensor_init();

	Wheel_Speed_init();
 8005eec:	f000 f9de 	bl	80062ac <Wheel_Speed_init>
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <rte_uart_handler>:

void rte_uart_handler()
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
	RTE_StatusTypeDef cheack_ret;

	if(uart_car_buf[0] != '\0')
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <rte_uart_handler+0x3c>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <rte_uart_handler+0x2a>
 	{
		cheack_ret = usr_car_com(&huart1);
 8005f02:	480c      	ldr	r0, [pc, #48]	; (8005f34 <rte_uart_handler+0x40>)
 8005f04:	f000 f926 	bl	8006154 <usr_car_com>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	71fb      	strb	r3, [r7, #7]

		if(cheack_ret != RTE_OK)
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <rte_uart_handler+0x2a>
		{
			cheack_ret = usr_drossiness_com();
 8005f12:	f000 f97f 	bl	8006214 <usr_drossiness_com>
 8005f16:	4603      	mov	r3, r0
 8005f18:	71fb      	strb	r3, [r7, #7]
			ultra_handler();
 8005f1a:	f7ff ff79 	bl	8005e10 <ultra_handler>
		if(cheack_ret != RTE_OK)
		{
			//ultra_handler();
		}
	}
	memset(uart_car_buf, '\0', 10);
 8005f1e:	220a      	movs	r2, #10
 8005f20:	2100      	movs	r1, #0
 8005f22:	4803      	ldr	r0, [pc, #12]	; (8005f30 <rte_uart_handler+0x3c>)
 8005f24:	f000 f9f4 	bl	8006310 <memset>
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	2000072c 	.word	0x2000072c
 8005f34:	20000740 	.word	0x20000740

08005f38 <clock_init>:

clock_po_t car_clock;
extern void (* SysTick_int_handler)(void);

void clock_init(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupted every 1 micro-sec  */

	SysTick->LOAD = 84000 - 1;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <clock_init+0x20>)
 8005f3e:	4a07      	ldr	r2, [pc, #28]	; (8005f5c <clock_init+0x24>)
 8005f40:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <clock_init+0x20>)
 8005f44:	2207      	movs	r2, #7
 8005f46:	601a      	str	r2, [r3, #0]
	SysTick_int_handler = clock_micro_sec_handler;
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <clock_init+0x28>)
 8005f4a:	4a06      	ldr	r2, [pc, #24]	; (8005f64 <clock_init+0x2c>)
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000e010 	.word	0xe000e010
 8005f5c:	0001481f 	.word	0x0001481f
 8005f60:	20000204 	.word	0x20000204
 8005f64:	08005f69 	.word	0x08005f69

08005f68 <clock_micro_sec_handler>:
void clock_micro_sec_handler(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
	car_clock.milli_sec++;
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f76:	801a      	strh	r2, [r3, #0]
	if(car_clock.milli_sec == 1000)
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f80:	d129      	bne.n	8005fd6 <clock_micro_sec_handler+0x6e>
	{
		car_clock.milli_sec = 0;
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	801a      	strh	r2, [r3, #0]
		car_clock.sec++;
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f8a:	789b      	ldrb	r3, [r3, #2]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f92:	709a      	strb	r2, [r3, #2]
		if(car_clock.sec == 60)
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f96:	789b      	ldrb	r3, [r3, #2]
 8005f98:	2b3c      	cmp	r3, #60	; 0x3c
 8005f9a:	d11c      	bne.n	8005fd6 <clock_micro_sec_handler+0x6e>
		{
			car_clock.sec = 0;
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	709a      	strb	r2, [r3, #2]
			car_clock.min++;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fa4:	78db      	ldrb	r3, [r3, #3]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fac:	70da      	strb	r2, [r3, #3]
			if(car_clock.min == 60)
 8005fae:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fb0:	78db      	ldrb	r3, [r3, #3]
 8005fb2:	2b3c      	cmp	r3, #60	; 0x3c
 8005fb4:	d10f      	bne.n	8005fd6 <clock_micro_sec_handler+0x6e>
			{
				car_clock.min = 0;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	70da      	strb	r2, [r3, #3]
				car_clock.hour++;
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fbe:	791b      	ldrb	r3, [r3, #4]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fc6:	711a      	strb	r2, [r3, #4]
				if(car_clock.hour == 24)
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2b18      	cmp	r3, #24
 8005fce:	d102      	bne.n	8005fd6 <clock_micro_sec_handler+0x6e>
				{
					car_clock.hour = 0;
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <clock_micro_sec_handler+0x78>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	711a      	strb	r2, [r3, #4]
				}
			}
		}
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000738 	.word	0x20000738

08005fe4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005fe8:	4b16      	ldr	r3, [pc, #88]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <MX_USART1_UART_Init+0x64>)
 8005fec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8005ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ff4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8006004:	2200      	movs	r2, #0
 8006006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <MX_USART1_UART_Init+0x60>)
 800600a:	220c      	movs	r2, #12
 800600c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8006010:	2200      	movs	r2, #0
 8006012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8006016:	2200      	movs	r2, #0
 8006018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800601a:	480a      	ldr	r0, [pc, #40]	; (8006044 <MX_USART1_UART_Init+0x60>)
 800601c:	f7fe f82a 	bl	8004074 <HAL_UART_Init>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006026:	f7fb f991 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_MspInit(&huart1);
 800602a:	4806      	ldr	r0, [pc, #24]	; (8006044 <MX_USART1_UART_Init+0x60>)
 800602c:	f000 f80e 	bl	800604c <HAL_UART_MspInit>
  huart1.Instance->CR1 |= (1<<5);
 8006030:	4b04      	ldr	r3, [pc, #16]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <MX_USART1_UART_Init+0x60>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0220 	orr.w	r2, r2, #32
 800603e:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8006040:	bf00      	nop
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000740 	.word	0x20000740
 8006048:	40011000 	.word	0x40011000

0800604c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a35      	ldr	r2, [pc, #212]	; (8006140 <HAL_UART_MspInit+0xf4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d164      	bne.n	8006138 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_UART_MspInit+0xf8>)
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	4a33      	ldr	r2, [pc, #204]	; (8006144 <HAL_UART_MspInit+0xf8>)
 8006078:	f043 0310 	orr.w	r3, r3, #16
 800607c:	6453      	str	r3, [r2, #68]	; 0x44
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_UART_MspInit+0xf8>)
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <HAL_UART_MspInit+0xf8>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <HAL_UART_MspInit+0xf8>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6313      	str	r3, [r2, #48]	; 0x30
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_UART_MspInit+0xf8>)
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_NODEMCU_Pin|RX1_NODEMCU_Pin;
 80060a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ac:	2302      	movs	r3, #2
 80060ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b4:	2303      	movs	r3, #3
 80060b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060b8:	2307      	movs	r3, #7
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	4619      	mov	r1, r3
 80060c2:	4821      	ldr	r0, [pc, #132]	; (8006148 <HAL_UART_MspInit+0xfc>)
 80060c4:	f7fc f8c8 	bl	8002258 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <HAL_UART_MspInit+0x100>)
 80060ca:	4a21      	ldr	r2, [pc, #132]	; (8006150 <HAL_UART_MspInit+0x104>)
 80060cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80060ce:	4b1f      	ldr	r3, [pc, #124]	; (800614c <HAL_UART_MspInit+0x100>)
 80060d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <HAL_UART_MspInit+0x100>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <HAL_UART_MspInit+0x100>)
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060e2:	4b1a      	ldr	r3, [pc, #104]	; (800614c <HAL_UART_MspInit+0x100>)
 80060e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060ea:	4b18      	ldr	r3, [pc, #96]	; (800614c <HAL_UART_MspInit+0x100>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060f0:	4b16      	ldr	r3, [pc, #88]	; (800614c <HAL_UART_MspInit+0x100>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_UART_MspInit+0x100>)
 80060f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <HAL_UART_MspInit+0x100>)
 8006100:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006104:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <HAL_UART_MspInit+0x100>)
 8006108:	2200      	movs	r2, #0
 800610a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800610c:	480f      	ldr	r0, [pc, #60]	; (800614c <HAL_UART_MspInit+0x100>)
 800610e:	f7fb fca1 	bl	8001a54 <HAL_DMA_Init>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006118:	f7fb f918 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0b      	ldr	r2, [pc, #44]	; (800614c <HAL_UART_MspInit+0x100>)
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_UART_MspInit+0x100>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006128:	2200      	movs	r2, #0
 800612a:	2101      	movs	r1, #1
 800612c:	2025      	movs	r0, #37	; 0x25
 800612e:	f7fb fc5a 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006132:	2025      	movs	r0, #37	; 0x25
 8006134:	f7fb fc73 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006138:	bf00      	nop
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40011000 	.word	0x40011000
 8006144:	40023800 	.word	0x40023800
 8006148:	40020000 	.word	0x40020000
 800614c:	200007b4 	.word	0x200007b4
 8006150:	40026440 	.word	0x40026440

08006154 <usr_car_com>:
uint8_t usr_drow_update_flag = USR_UPDATE_DATA_RESET;



RTE_StatusTypeDef usr_car_com(UART_HandleTypeDef * huart1)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	RTE_StatusTypeDef ret_val = RTE_NOT_OK;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]

	if(uart_car_buf[0] == 'K' && uart_car_buf[1] == 'S' && uart_car_buf[4] == ' ' && uart_car_buf[8] == ' ')
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <usr_car_com+0xac>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b4b      	cmp	r3, #75	; 0x4b
 8006166:	d144      	bne.n	80061f2 <usr_car_com+0x9e>
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <usr_car_com+0xac>)
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b53      	cmp	r3, #83	; 0x53
 800616e:	d140      	bne.n	80061f2 <usr_car_com+0x9e>
 8006170:	4b23      	ldr	r3, [pc, #140]	; (8006200 <usr_car_com+0xac>)
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b20      	cmp	r3, #32
 8006176:	d13c      	bne.n	80061f2 <usr_car_com+0x9e>
 8006178:	4b21      	ldr	r3, [pc, #132]	; (8006200 <usr_car_com+0xac>)
 800617a:	7a1b      	ldrb	r3, [r3, #8]
 800617c:	2b20      	cmp	r3, #32
 800617e:	d138      	bne.n	80061f2 <usr_car_com+0x9e>
	{
		robot_car_speed = ((uart_car_buf[2]-48)*10) + (uart_car_buf[3]-48);
 8006180:	4b1f      	ldr	r3, [pc, #124]	; (8006200 <usr_car_com+0xac>)
 8006182:	789b      	ldrb	r3, [r3, #2]
 8006184:	461a      	mov	r2, r3
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	4413      	add	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	b2da      	uxtb	r2, r3
 800618e:	4b1c      	ldr	r3, [pc, #112]	; (8006200 <usr_car_com+0xac>)
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	4413      	add	r3, r2
 8006194:	b2db      	uxtb	r3, r3
 8006196:	3b10      	subs	r3, #16
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <usr_car_com+0xb0>)
 800619c:	701a      	strb	r2, [r3, #0]

		robot_car_steering = ((uart_car_buf[6]-48)*10) + (uart_car_buf[7]-48);
 800619e:	4b18      	ldr	r3, [pc, #96]	; (8006200 <usr_car_com+0xac>)
 80061a0:	799b      	ldrb	r3, [r3, #6]
 80061a2:	3b30      	subs	r3, #48	; 0x30
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <usr_car_com+0xac>)
 80061b2:	79db      	ldrb	r3, [r3, #7]
 80061b4:	4413      	add	r3, r2
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3b30      	subs	r3, #48	; 0x30
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	b25a      	sxtb	r2, r3
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <usr_car_com+0xb4>)
 80061c0:	701a      	strb	r2, [r3, #0]
		if(uart_car_buf[5] == '-')
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <usr_car_com+0xac>)
 80061c4:	795b      	ldrb	r3, [r3, #5]
 80061c6:	2b2d      	cmp	r3, #45	; 0x2d
 80061c8:	d108      	bne.n	80061dc <usr_car_com+0x88>
		{
			robot_car_steering *= -1;
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <usr_car_com+0xb4>)
 80061cc:	f993 3000 	ldrsb.w	r3, [r3]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	425b      	negs	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	b25a      	sxtb	r2, r3
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <usr_car_com+0xb4>)
 80061da:	701a      	strb	r2, [r3, #0]
		else
		{

		}

		robot_car_wheels_dir = (uart_car_buf[9]-48);
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <usr_car_com+0xac>)
 80061de:	7a5b      	ldrb	r3, [r3, #9]
 80061e0:	3b30      	subs	r3, #48	; 0x30
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <usr_car_com+0xb8>)
 80061e6:	701a      	strb	r2, [r3, #0]
		usr_con_update_flag = USR_UPDATE_DATA_SET;
 80061e8:	4b09      	ldr	r3, [pc, #36]	; (8006210 <usr_car_com+0xbc>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
		ret_val = RTE_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	2000072c 	.word	0x2000072c
 8006204:	20000814 	.word	0x20000814
 8006208:	20000815 	.word	0x20000815
 800620c:	20000816 	.word	0x20000816
 8006210:	20000818 	.word	0x20000818

08006214 <usr_drossiness_com>:


//KDRO LEV 0
RTE_StatusTypeDef usr_drossiness_com(void)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
	RTE_StatusTypeDef ret_val = RTE_NOT_OK;
 800621a:	2301      	movs	r3, #1
 800621c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Drowsniess_Counter = 0;

	if(uart_car_buf[0] == 'K' && uart_car_buf[1] == 'D' && uart_car_buf[2] == 'R' && uart_car_buf[3] == 'O')
 800621e:	4b1f      	ldr	r3, [pc, #124]	; (800629c <usr_drossiness_com+0x88>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b4b      	cmp	r3, #75	; 0x4b
 8006224:	d133      	bne.n	800628e <usr_drossiness_com+0x7a>
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <usr_drossiness_com+0x88>)
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b44      	cmp	r3, #68	; 0x44
 800622c:	d12f      	bne.n	800628e <usr_drossiness_com+0x7a>
 800622e:	4b1b      	ldr	r3, [pc, #108]	; (800629c <usr_drossiness_com+0x88>)
 8006230:	789b      	ldrb	r3, [r3, #2]
 8006232:	2b52      	cmp	r3, #82	; 0x52
 8006234:	d12b      	bne.n	800628e <usr_drossiness_com+0x7a>
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <usr_drossiness_com+0x88>)
 8006238:	78db      	ldrb	r3, [r3, #3]
 800623a:	2b4f      	cmp	r3, #79	; 0x4f
 800623c:	d127      	bne.n	800628e <usr_drossiness_com+0x7a>
	{
		if(uart_car_buf[9] >= '0' && uart_car_buf[9] <= '2')
 800623e:	4b17      	ldr	r3, [pc, #92]	; (800629c <usr_drossiness_com+0x88>)
 8006240:	7a5b      	ldrb	r3, [r3, #9]
 8006242:	2b2f      	cmp	r3, #47	; 0x2f
 8006244:	d91e      	bls.n	8006284 <usr_drossiness_com+0x70>
 8006246:	4b15      	ldr	r3, [pc, #84]	; (800629c <usr_drossiness_com+0x88>)
 8006248:	7a5b      	ldrb	r3, [r3, #9]
 800624a:	2b32      	cmp	r3, #50	; 0x32
 800624c:	d81a      	bhi.n	8006284 <usr_drossiness_com+0x70>
		{
			usr_drowsiness_level = uart_car_buf[9] - 48;
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <usr_drossiness_com+0x88>)
 8006250:	7a5b      	ldrb	r3, [r3, #9]
 8006252:	3b30      	subs	r3, #48	; 0x30
 8006254:	b2da      	uxtb	r2, r3
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <usr_drossiness_com+0x8c>)
 8006258:	701a      	strb	r2, [r3, #0]
			if(usr_drowsiness_level == 1)
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <usr_drossiness_com+0x8c>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d106      	bne.n	8006270 <usr_drossiness_com+0x5c>
			{
				Drowsniess_Counter++;
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <usr_drossiness_com+0x90>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <usr_drossiness_com+0x90>)
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <usr_drossiness_com+0x62>
			}
			else
			{
				Drowsniess_Counter = 0;
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <usr_drossiness_com+0x90>)
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
			}
			if(Drowsniess_Counter == 5)
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <usr_drossiness_com+0x90>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b05      	cmp	r3, #5
 800627c:	d102      	bne.n	8006284 <usr_drossiness_com+0x70>
			{
				usr_drowsiness_level = 2;
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <usr_drossiness_com+0x8c>)
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
			}
		}
		usr_drow_update_flag = USR_UPDATE_DATA_SET;
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <usr_drossiness_com+0x94>)
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
		ret_val = RTE_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	71fb      	strb	r3, [r7, #7]
	}
	return ret_val;
 800628e:	79fb      	ldrb	r3, [r7, #7]
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	2000072c 	.word	0x2000072c
 80062a0:	20000817 	.word	0x20000817
 80062a4:	2000081a 	.word	0x2000081a
 80062a8:	20000819 	.word	0x20000819

080062ac <Wheel_Speed_init>:
 *      Author: DABOUR
 */
#include "../Inc/wheel_speed.h"

void Wheel_Speed_init(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
	Optical_Encoder_Init();
 80062b0:	f7ff fbc4 	bl	8005a3c <Optical_Encoder_Init>
	Optical_Encoder_Read_data_IT();
 80062b4:	f7ff fbd4 	bl	8005a60 <Optical_Encoder_Read_data_IT>
}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}

080062bc <__errno>:
 80062bc:	4b01      	ldr	r3, [pc, #4]	; (80062c4 <__errno+0x8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	2000000c 	.word	0x2000000c

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4d0d      	ldr	r5, [pc, #52]	; (8006300 <__libc_init_array+0x38>)
 80062cc:	4c0d      	ldr	r4, [pc, #52]	; (8006304 <__libc_init_array+0x3c>)
 80062ce:	1b64      	subs	r4, r4, r5
 80062d0:	10a4      	asrs	r4, r4, #2
 80062d2:	2600      	movs	r6, #0
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	4d0b      	ldr	r5, [pc, #44]	; (8006308 <__libc_init_array+0x40>)
 80062da:	4c0c      	ldr	r4, [pc, #48]	; (800630c <__libc_init_array+0x44>)
 80062dc:	f002 fd38 	bl	8008d50 <_init>
 80062e0:	1b64      	subs	r4, r4, r5
 80062e2:	10a4      	asrs	r4, r4, #2
 80062e4:	2600      	movs	r6, #0
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f0:	4798      	blx	r3
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fa:	4798      	blx	r3
 80062fc:	3601      	adds	r6, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	0800916c 	.word	0x0800916c
 8006304:	0800916c 	.word	0x0800916c
 8006308:	0800916c 	.word	0x0800916c
 800630c:	08009170 	.word	0x08009170

08006310 <memset>:
 8006310:	4402      	add	r2, r0
 8006312:	4603      	mov	r3, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <__cvt>:
 8006320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	ec55 4b10 	vmov	r4, r5, d0
 8006328:	2d00      	cmp	r5, #0
 800632a:	460e      	mov	r6, r1
 800632c:	4619      	mov	r1, r3
 800632e:	462b      	mov	r3, r5
 8006330:	bfbb      	ittet	lt
 8006332:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006336:	461d      	movlt	r5, r3
 8006338:	2300      	movge	r3, #0
 800633a:	232d      	movlt	r3, #45	; 0x2d
 800633c:	700b      	strb	r3, [r1, #0]
 800633e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006340:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006344:	4691      	mov	r9, r2
 8006346:	f023 0820 	bic.w	r8, r3, #32
 800634a:	bfbc      	itt	lt
 800634c:	4622      	movlt	r2, r4
 800634e:	4614      	movlt	r4, r2
 8006350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006354:	d005      	beq.n	8006362 <__cvt+0x42>
 8006356:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800635a:	d100      	bne.n	800635e <__cvt+0x3e>
 800635c:	3601      	adds	r6, #1
 800635e:	2102      	movs	r1, #2
 8006360:	e000      	b.n	8006364 <__cvt+0x44>
 8006362:	2103      	movs	r1, #3
 8006364:	ab03      	add	r3, sp, #12
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	ab02      	add	r3, sp, #8
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	ec45 4b10 	vmov	d0, r4, r5
 8006370:	4653      	mov	r3, sl
 8006372:	4632      	mov	r2, r6
 8006374:	f000 fccc 	bl	8006d10 <_dtoa_r>
 8006378:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800637c:	4607      	mov	r7, r0
 800637e:	d102      	bne.n	8006386 <__cvt+0x66>
 8006380:	f019 0f01 	tst.w	r9, #1
 8006384:	d022      	beq.n	80063cc <__cvt+0xac>
 8006386:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800638a:	eb07 0906 	add.w	r9, r7, r6
 800638e:	d110      	bne.n	80063b2 <__cvt+0x92>
 8006390:	783b      	ldrb	r3, [r7, #0]
 8006392:	2b30      	cmp	r3, #48	; 0x30
 8006394:	d10a      	bne.n	80063ac <__cvt+0x8c>
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7fa fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80063a2:	b918      	cbnz	r0, 80063ac <__cvt+0x8c>
 80063a4:	f1c6 0601 	rsb	r6, r6, #1
 80063a8:	f8ca 6000 	str.w	r6, [sl]
 80063ac:	f8da 3000 	ldr.w	r3, [sl]
 80063b0:	4499      	add	r9, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	2300      	movs	r3, #0
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7fa fb8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80063be:	b108      	cbz	r0, 80063c4 <__cvt+0xa4>
 80063c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063c4:	2230      	movs	r2, #48	; 0x30
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	454b      	cmp	r3, r9
 80063ca:	d307      	bcc.n	80063dc <__cvt+0xbc>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063d0:	1bdb      	subs	r3, r3, r7
 80063d2:	4638      	mov	r0, r7
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	b004      	add	sp, #16
 80063d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	9103      	str	r1, [sp, #12]
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e7f0      	b.n	80063c6 <__cvt+0xa6>

080063e4 <__exponent>:
 80063e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e6:	4603      	mov	r3, r0
 80063e8:	2900      	cmp	r1, #0
 80063ea:	bfb8      	it	lt
 80063ec:	4249      	neglt	r1, r1
 80063ee:	f803 2b02 	strb.w	r2, [r3], #2
 80063f2:	bfb4      	ite	lt
 80063f4:	222d      	movlt	r2, #45	; 0x2d
 80063f6:	222b      	movge	r2, #43	; 0x2b
 80063f8:	2909      	cmp	r1, #9
 80063fa:	7042      	strb	r2, [r0, #1]
 80063fc:	dd2a      	ble.n	8006454 <__exponent+0x70>
 80063fe:	f10d 0407 	add.w	r4, sp, #7
 8006402:	46a4      	mov	ip, r4
 8006404:	270a      	movs	r7, #10
 8006406:	46a6      	mov	lr, r4
 8006408:	460a      	mov	r2, r1
 800640a:	fb91 f6f7 	sdiv	r6, r1, r7
 800640e:	fb07 1516 	mls	r5, r7, r6, r1
 8006412:	3530      	adds	r5, #48	; 0x30
 8006414:	2a63      	cmp	r2, #99	; 0x63
 8006416:	f104 34ff 	add.w	r4, r4, #4294967295
 800641a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800641e:	4631      	mov	r1, r6
 8006420:	dcf1      	bgt.n	8006406 <__exponent+0x22>
 8006422:	3130      	adds	r1, #48	; 0x30
 8006424:	f1ae 0502 	sub.w	r5, lr, #2
 8006428:	f804 1c01 	strb.w	r1, [r4, #-1]
 800642c:	1c44      	adds	r4, r0, #1
 800642e:	4629      	mov	r1, r5
 8006430:	4561      	cmp	r1, ip
 8006432:	d30a      	bcc.n	800644a <__exponent+0x66>
 8006434:	f10d 0209 	add.w	r2, sp, #9
 8006438:	eba2 020e 	sub.w	r2, r2, lr
 800643c:	4565      	cmp	r5, ip
 800643e:	bf88      	it	hi
 8006440:	2200      	movhi	r2, #0
 8006442:	4413      	add	r3, r2
 8006444:	1a18      	subs	r0, r3, r0
 8006446:	b003      	add	sp, #12
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800644e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006452:	e7ed      	b.n	8006430 <__exponent+0x4c>
 8006454:	2330      	movs	r3, #48	; 0x30
 8006456:	3130      	adds	r1, #48	; 0x30
 8006458:	7083      	strb	r3, [r0, #2]
 800645a:	70c1      	strb	r1, [r0, #3]
 800645c:	1d03      	adds	r3, r0, #4
 800645e:	e7f1      	b.n	8006444 <__exponent+0x60>

08006460 <_printf_float>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ed2d 8b02 	vpush	{d8}
 8006468:	b08d      	sub	sp, #52	; 0x34
 800646a:	460c      	mov	r4, r1
 800646c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006470:	4616      	mov	r6, r2
 8006472:	461f      	mov	r7, r3
 8006474:	4605      	mov	r5, r0
 8006476:	f001 fa39 	bl	80078ec <_localeconv_r>
 800647a:	f8d0 a000 	ldr.w	sl, [r0]
 800647e:	4650      	mov	r0, sl
 8006480:	f7f9 feae 	bl	80001e0 <strlen>
 8006484:	2300      	movs	r3, #0
 8006486:	930a      	str	r3, [sp, #40]	; 0x28
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	9305      	str	r3, [sp, #20]
 800648c:	f8d8 3000 	ldr.w	r3, [r8]
 8006490:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006494:	3307      	adds	r3, #7
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	f103 0208 	add.w	r2, r3, #8
 800649e:	f8c8 2000 	str.w	r2, [r8]
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064b8:	ee08 0a10 	vmov	s16, r0
 80064bc:	4b9f      	ldr	r3, [pc, #636]	; (800673c <_printf_float+0x2dc>)
 80064be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	f7fa fb39 	bl	8000b3c <__aeabi_dcmpun>
 80064ca:	bb88      	cbnz	r0, 8006530 <_printf_float+0xd0>
 80064cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064d0:	4b9a      	ldr	r3, [pc, #616]	; (800673c <_printf_float+0x2dc>)
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	f7fa fb13 	bl	8000b00 <__aeabi_dcmple>
 80064da:	bb48      	cbnz	r0, 8006530 <_printf_float+0xd0>
 80064dc:	2200      	movs	r2, #0
 80064de:	2300      	movs	r3, #0
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fb02 	bl	8000aec <__aeabi_dcmplt>
 80064e8:	b110      	cbz	r0, 80064f0 <_printf_float+0x90>
 80064ea:	232d      	movs	r3, #45	; 0x2d
 80064ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f0:	4b93      	ldr	r3, [pc, #588]	; (8006740 <_printf_float+0x2e0>)
 80064f2:	4894      	ldr	r0, [pc, #592]	; (8006744 <_printf_float+0x2e4>)
 80064f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064f8:	bf94      	ite	ls
 80064fa:	4698      	movls	r8, r3
 80064fc:	4680      	movhi	r8, r0
 80064fe:	2303      	movs	r3, #3
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	f023 0204 	bic.w	r2, r3, #4
 8006508:	6022      	str	r2, [r4, #0]
 800650a:	f04f 0900 	mov.w	r9, #0
 800650e:	9700      	str	r7, [sp, #0]
 8006510:	4633      	mov	r3, r6
 8006512:	aa0b      	add	r2, sp, #44	; 0x2c
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f9d8 	bl	80068cc <_printf_common>
 800651c:	3001      	adds	r0, #1
 800651e:	f040 8090 	bne.w	8006642 <_printf_float+0x1e2>
 8006522:	f04f 30ff 	mov.w	r0, #4294967295
 8006526:	b00d      	add	sp, #52	; 0x34
 8006528:	ecbd 8b02 	vpop	{d8}
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	4640      	mov	r0, r8
 8006536:	4649      	mov	r1, r9
 8006538:	f7fa fb00 	bl	8000b3c <__aeabi_dcmpun>
 800653c:	b140      	cbz	r0, 8006550 <_printf_float+0xf0>
 800653e:	464b      	mov	r3, r9
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfbc      	itt	lt
 8006544:	232d      	movlt	r3, #45	; 0x2d
 8006546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800654a:	487f      	ldr	r0, [pc, #508]	; (8006748 <_printf_float+0x2e8>)
 800654c:	4b7f      	ldr	r3, [pc, #508]	; (800674c <_printf_float+0x2ec>)
 800654e:	e7d1      	b.n	80064f4 <_printf_float+0x94>
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006556:	9206      	str	r2, [sp, #24]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	d13f      	bne.n	80065dc <_printf_float+0x17c>
 800655c:	2306      	movs	r3, #6
 800655e:	6063      	str	r3, [r4, #4]
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	6861      	ldr	r1, [r4, #4]
 8006564:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006568:	2300      	movs	r3, #0
 800656a:	9303      	str	r3, [sp, #12]
 800656c:	ab0a      	add	r3, sp, #40	; 0x28
 800656e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006572:	ab09      	add	r3, sp, #36	; 0x24
 8006574:	ec49 8b10 	vmov	d0, r8, r9
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006580:	4628      	mov	r0, r5
 8006582:	f7ff fecd 	bl	8006320 <__cvt>
 8006586:	9b06      	ldr	r3, [sp, #24]
 8006588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800658a:	2b47      	cmp	r3, #71	; 0x47
 800658c:	4680      	mov	r8, r0
 800658e:	d108      	bne.n	80065a2 <_printf_float+0x142>
 8006590:	1cc8      	adds	r0, r1, #3
 8006592:	db02      	blt.n	800659a <_printf_float+0x13a>
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	4299      	cmp	r1, r3
 8006598:	dd41      	ble.n	800661e <_printf_float+0x1be>
 800659a:	f1ab 0b02 	sub.w	fp, fp, #2
 800659e:	fa5f fb8b 	uxtb.w	fp, fp
 80065a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065a6:	d820      	bhi.n	80065ea <_printf_float+0x18a>
 80065a8:	3901      	subs	r1, #1
 80065aa:	465a      	mov	r2, fp
 80065ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065b0:	9109      	str	r1, [sp, #36]	; 0x24
 80065b2:	f7ff ff17 	bl	80063e4 <__exponent>
 80065b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b8:	1813      	adds	r3, r2, r0
 80065ba:	2a01      	cmp	r2, #1
 80065bc:	4681      	mov	r9, r0
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	dc02      	bgt.n	80065c8 <_printf_float+0x168>
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	07d2      	lsls	r2, r2, #31
 80065c6:	d501      	bpl.n	80065cc <_printf_float+0x16c>
 80065c8:	3301      	adds	r3, #1
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d09c      	beq.n	800650e <_printf_float+0xae>
 80065d4:	232d      	movs	r3, #45	; 0x2d
 80065d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065da:	e798      	b.n	800650e <_printf_float+0xae>
 80065dc:	9a06      	ldr	r2, [sp, #24]
 80065de:	2a47      	cmp	r2, #71	; 0x47
 80065e0:	d1be      	bne.n	8006560 <_printf_float+0x100>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1bc      	bne.n	8006560 <_printf_float+0x100>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7b9      	b.n	800655e <_printf_float+0xfe>
 80065ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065ee:	d118      	bne.n	8006622 <_printf_float+0x1c2>
 80065f0:	2900      	cmp	r1, #0
 80065f2:	6863      	ldr	r3, [r4, #4]
 80065f4:	dd0b      	ble.n	800660e <_printf_float+0x1ae>
 80065f6:	6121      	str	r1, [r4, #16]
 80065f8:	b913      	cbnz	r3, 8006600 <_printf_float+0x1a0>
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	07d0      	lsls	r0, r2, #31
 80065fe:	d502      	bpl.n	8006606 <_printf_float+0x1a6>
 8006600:	3301      	adds	r3, #1
 8006602:	440b      	add	r3, r1
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	65a1      	str	r1, [r4, #88]	; 0x58
 8006608:	f04f 0900 	mov.w	r9, #0
 800660c:	e7de      	b.n	80065cc <_printf_float+0x16c>
 800660e:	b913      	cbnz	r3, 8006616 <_printf_float+0x1b6>
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	07d2      	lsls	r2, r2, #31
 8006614:	d501      	bpl.n	800661a <_printf_float+0x1ba>
 8006616:	3302      	adds	r3, #2
 8006618:	e7f4      	b.n	8006604 <_printf_float+0x1a4>
 800661a:	2301      	movs	r3, #1
 800661c:	e7f2      	b.n	8006604 <_printf_float+0x1a4>
 800661e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006624:	4299      	cmp	r1, r3
 8006626:	db05      	blt.n	8006634 <_printf_float+0x1d4>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	6121      	str	r1, [r4, #16]
 800662c:	07d8      	lsls	r0, r3, #31
 800662e:	d5ea      	bpl.n	8006606 <_printf_float+0x1a6>
 8006630:	1c4b      	adds	r3, r1, #1
 8006632:	e7e7      	b.n	8006604 <_printf_float+0x1a4>
 8006634:	2900      	cmp	r1, #0
 8006636:	bfd4      	ite	le
 8006638:	f1c1 0202 	rsble	r2, r1, #2
 800663c:	2201      	movgt	r2, #1
 800663e:	4413      	add	r3, r2
 8006640:	e7e0      	b.n	8006604 <_printf_float+0x1a4>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	055a      	lsls	r2, r3, #21
 8006646:	d407      	bmi.n	8006658 <_printf_float+0x1f8>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	4642      	mov	r2, r8
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	d12c      	bne.n	80066b0 <_printf_float+0x250>
 8006656:	e764      	b.n	8006522 <_printf_float+0xc2>
 8006658:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800665c:	f240 80e0 	bls.w	8006820 <_printf_float+0x3c0>
 8006660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	f7fa fa36 	bl	8000ad8 <__aeabi_dcmpeq>
 800666c:	2800      	cmp	r0, #0
 800666e:	d034      	beq.n	80066da <_printf_float+0x27a>
 8006670:	4a37      	ldr	r2, [pc, #220]	; (8006750 <_printf_float+0x2f0>)
 8006672:	2301      	movs	r3, #1
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af51 	beq.w	8006522 <_printf_float+0xc2>
 8006680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006684:	429a      	cmp	r2, r3
 8006686:	db02      	blt.n	800668e <_printf_float+0x22e>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07d8      	lsls	r0, r3, #31
 800668c:	d510      	bpl.n	80066b0 <_printf_float+0x250>
 800668e:	ee18 3a10 	vmov	r3, s16
 8006692:	4652      	mov	r2, sl
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af41 	beq.w	8006522 <_printf_float+0xc2>
 80066a0:	f04f 0800 	mov.w	r8, #0
 80066a4:	f104 091a 	add.w	r9, r4, #26
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	4543      	cmp	r3, r8
 80066ae:	dc09      	bgt.n	80066c4 <_printf_float+0x264>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	079b      	lsls	r3, r3, #30
 80066b4:	f100 8105 	bmi.w	80068c2 <_printf_float+0x462>
 80066b8:	68e0      	ldr	r0, [r4, #12]
 80066ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066bc:	4298      	cmp	r0, r3
 80066be:	bfb8      	it	lt
 80066c0:	4618      	movlt	r0, r3
 80066c2:	e730      	b.n	8006526 <_printf_float+0xc6>
 80066c4:	2301      	movs	r3, #1
 80066c6:	464a      	mov	r2, r9
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f af27 	beq.w	8006522 <_printf_float+0xc2>
 80066d4:	f108 0801 	add.w	r8, r8, #1
 80066d8:	e7e6      	b.n	80066a8 <_printf_float+0x248>
 80066da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dc39      	bgt.n	8006754 <_printf_float+0x2f4>
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <_printf_float+0x2f0>)
 80066e2:	2301      	movs	r3, #1
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f af19 	beq.w	8006522 <_printf_float+0xc2>
 80066f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d102      	bne.n	80066fe <_printf_float+0x29e>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	07d9      	lsls	r1, r3, #31
 80066fc:	d5d8      	bpl.n	80066b0 <_printf_float+0x250>
 80066fe:	ee18 3a10 	vmov	r3, s16
 8006702:	4652      	mov	r2, sl
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f af09 	beq.w	8006522 <_printf_float+0xc2>
 8006710:	f04f 0900 	mov.w	r9, #0
 8006714:	f104 0a1a 	add.w	sl, r4, #26
 8006718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671a:	425b      	negs	r3, r3
 800671c:	454b      	cmp	r3, r9
 800671e:	dc01      	bgt.n	8006724 <_printf_float+0x2c4>
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	e792      	b.n	800664a <_printf_float+0x1ea>
 8006724:	2301      	movs	r3, #1
 8006726:	4652      	mov	r2, sl
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f aef7 	beq.w	8006522 <_printf_float+0xc2>
 8006734:	f109 0901 	add.w	r9, r9, #1
 8006738:	e7ee      	b.n	8006718 <_printf_float+0x2b8>
 800673a:	bf00      	nop
 800673c:	7fefffff 	.word	0x7fefffff
 8006740:	08008d8c 	.word	0x08008d8c
 8006744:	08008d90 	.word	0x08008d90
 8006748:	08008d98 	.word	0x08008d98
 800674c:	08008d94 	.word	0x08008d94
 8006750:	08008d9c 	.word	0x08008d9c
 8006754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006758:	429a      	cmp	r2, r3
 800675a:	bfa8      	it	ge
 800675c:	461a      	movge	r2, r3
 800675e:	2a00      	cmp	r2, #0
 8006760:	4691      	mov	r9, r2
 8006762:	dc37      	bgt.n	80067d4 <_printf_float+0x374>
 8006764:	f04f 0b00 	mov.w	fp, #0
 8006768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800676c:	f104 021a 	add.w	r2, r4, #26
 8006770:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	eba3 0309 	sub.w	r3, r3, r9
 8006778:	455b      	cmp	r3, fp
 800677a:	dc33      	bgt.n	80067e4 <_printf_float+0x384>
 800677c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006780:	429a      	cmp	r2, r3
 8006782:	db3b      	blt.n	80067fc <_printf_float+0x39c>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	07da      	lsls	r2, r3, #31
 8006788:	d438      	bmi.n	80067fc <_printf_float+0x39c>
 800678a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678c:	9a05      	ldr	r2, [sp, #20]
 800678e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006790:	1a9a      	subs	r2, r3, r2
 8006792:	eba3 0901 	sub.w	r9, r3, r1
 8006796:	4591      	cmp	r9, r2
 8006798:	bfa8      	it	ge
 800679a:	4691      	movge	r9, r2
 800679c:	f1b9 0f00 	cmp.w	r9, #0
 80067a0:	dc35      	bgt.n	800680e <_printf_float+0x3ae>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067aa:	f104 0a1a 	add.w	sl, r4, #26
 80067ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	eba3 0309 	sub.w	r3, r3, r9
 80067b8:	4543      	cmp	r3, r8
 80067ba:	f77f af79 	ble.w	80066b0 <_printf_float+0x250>
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f aeaa 	beq.w	8006522 <_printf_float+0xc2>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	e7ec      	b.n	80067ae <_printf_float+0x34e>
 80067d4:	4613      	mov	r3, r2
 80067d6:	4631      	mov	r1, r6
 80067d8:	4642      	mov	r2, r8
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	d1c0      	bne.n	8006764 <_printf_float+0x304>
 80067e2:	e69e      	b.n	8006522 <_printf_float+0xc2>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4631      	mov	r1, r6
 80067e8:	4628      	mov	r0, r5
 80067ea:	9205      	str	r2, [sp, #20]
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f ae97 	beq.w	8006522 <_printf_float+0xc2>
 80067f4:	9a05      	ldr	r2, [sp, #20]
 80067f6:	f10b 0b01 	add.w	fp, fp, #1
 80067fa:	e7b9      	b.n	8006770 <_printf_float+0x310>
 80067fc:	ee18 3a10 	vmov	r3, s16
 8006800:	4652      	mov	r2, sl
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	d1be      	bne.n	800678a <_printf_float+0x32a>
 800680c:	e689      	b.n	8006522 <_printf_float+0xc2>
 800680e:	9a05      	ldr	r2, [sp, #20]
 8006810:	464b      	mov	r3, r9
 8006812:	4442      	add	r2, r8
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	d1c1      	bne.n	80067a2 <_printf_float+0x342>
 800681e:	e680      	b.n	8006522 <_printf_float+0xc2>
 8006820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006822:	2a01      	cmp	r2, #1
 8006824:	dc01      	bgt.n	800682a <_printf_float+0x3ca>
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d538      	bpl.n	800689c <_printf_float+0x43c>
 800682a:	2301      	movs	r3, #1
 800682c:	4642      	mov	r2, r8
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f ae74 	beq.w	8006522 <_printf_float+0xc2>
 800683a:	ee18 3a10 	vmov	r3, s16
 800683e:	4652      	mov	r2, sl
 8006840:	4631      	mov	r1, r6
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae6b 	beq.w	8006522 <_printf_float+0xc2>
 800684c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	f7fa f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8006858:	b9d8      	cbnz	r0, 8006892 <_printf_float+0x432>
 800685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685c:	f108 0201 	add.w	r2, r8, #1
 8006860:	3b01      	subs	r3, #1
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	d10e      	bne.n	800688a <_printf_float+0x42a>
 800686c:	e659      	b.n	8006522 <_printf_float+0xc2>
 800686e:	2301      	movs	r3, #1
 8006870:	4652      	mov	r2, sl
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae52 	beq.w	8006522 <_printf_float+0xc2>
 800687e:	f108 0801 	add.w	r8, r8, #1
 8006882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	4543      	cmp	r3, r8
 8006888:	dcf1      	bgt.n	800686e <_printf_float+0x40e>
 800688a:	464b      	mov	r3, r9
 800688c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006890:	e6dc      	b.n	800664c <_printf_float+0x1ec>
 8006892:	f04f 0800 	mov.w	r8, #0
 8006896:	f104 0a1a 	add.w	sl, r4, #26
 800689a:	e7f2      	b.n	8006882 <_printf_float+0x422>
 800689c:	2301      	movs	r3, #1
 800689e:	4642      	mov	r2, r8
 80068a0:	e7df      	b.n	8006862 <_printf_float+0x402>
 80068a2:	2301      	movs	r3, #1
 80068a4:	464a      	mov	r2, r9
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f ae38 	beq.w	8006522 <_printf_float+0xc2>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068ba:	1a5b      	subs	r3, r3, r1
 80068bc:	4543      	cmp	r3, r8
 80068be:	dcf0      	bgt.n	80068a2 <_printf_float+0x442>
 80068c0:	e6fa      	b.n	80066b8 <_printf_float+0x258>
 80068c2:	f04f 0800 	mov.w	r8, #0
 80068c6:	f104 0919 	add.w	r9, r4, #25
 80068ca:	e7f4      	b.n	80068b6 <_printf_float+0x456>

080068cc <_printf_common>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	4616      	mov	r6, r2
 80068d2:	4699      	mov	r9, r3
 80068d4:	688a      	ldr	r2, [r1, #8]
 80068d6:	690b      	ldr	r3, [r1, #16]
 80068d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bfb8      	it	lt
 80068e0:	4613      	movlt	r3, r2
 80068e2:	6033      	str	r3, [r6, #0]
 80068e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e8:	4607      	mov	r7, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	b10a      	cbz	r2, 80068f2 <_printf_common+0x26>
 80068ee:	3301      	adds	r3, #1
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	0699      	lsls	r1, r3, #26
 80068f6:	bf42      	ittt	mi
 80068f8:	6833      	ldrmi	r3, [r6, #0]
 80068fa:	3302      	addmi	r3, #2
 80068fc:	6033      	strmi	r3, [r6, #0]
 80068fe:	6825      	ldr	r5, [r4, #0]
 8006900:	f015 0506 	ands.w	r5, r5, #6
 8006904:	d106      	bne.n	8006914 <_printf_common+0x48>
 8006906:	f104 0a19 	add.w	sl, r4, #25
 800690a:	68e3      	ldr	r3, [r4, #12]
 800690c:	6832      	ldr	r2, [r6, #0]
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	42ab      	cmp	r3, r5
 8006912:	dc26      	bgt.n	8006962 <_printf_common+0x96>
 8006914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006918:	1e13      	subs	r3, r2, #0
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	bf18      	it	ne
 800691e:	2301      	movne	r3, #1
 8006920:	0692      	lsls	r2, r2, #26
 8006922:	d42b      	bmi.n	800697c <_printf_common+0xb0>
 8006924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006928:	4649      	mov	r1, r9
 800692a:	4638      	mov	r0, r7
 800692c:	47c0      	blx	r8
 800692e:	3001      	adds	r0, #1
 8006930:	d01e      	beq.n	8006970 <_printf_common+0xa4>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	68e5      	ldr	r5, [r4, #12]
 8006936:	6832      	ldr	r2, [r6, #0]
 8006938:	f003 0306 	and.w	r3, r3, #6
 800693c:	2b04      	cmp	r3, #4
 800693e:	bf08      	it	eq
 8006940:	1aad      	subeq	r5, r5, r2
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	6922      	ldr	r2, [r4, #16]
 8006946:	bf0c      	ite	eq
 8006948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800694c:	2500      	movne	r5, #0
 800694e:	4293      	cmp	r3, r2
 8006950:	bfc4      	itt	gt
 8006952:	1a9b      	subgt	r3, r3, r2
 8006954:	18ed      	addgt	r5, r5, r3
 8006956:	2600      	movs	r6, #0
 8006958:	341a      	adds	r4, #26
 800695a:	42b5      	cmp	r5, r6
 800695c:	d11a      	bne.n	8006994 <_printf_common+0xc8>
 800695e:	2000      	movs	r0, #0
 8006960:	e008      	b.n	8006974 <_printf_common+0xa8>
 8006962:	2301      	movs	r3, #1
 8006964:	4652      	mov	r2, sl
 8006966:	4649      	mov	r1, r9
 8006968:	4638      	mov	r0, r7
 800696a:	47c0      	blx	r8
 800696c:	3001      	adds	r0, #1
 800696e:	d103      	bne.n	8006978 <_printf_common+0xac>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006978:	3501      	adds	r5, #1
 800697a:	e7c6      	b.n	800690a <_printf_common+0x3e>
 800697c:	18e1      	adds	r1, r4, r3
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	2030      	movs	r0, #48	; 0x30
 8006982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006986:	4422      	add	r2, r4
 8006988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800698c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006990:	3302      	adds	r3, #2
 8006992:	e7c7      	b.n	8006924 <_printf_common+0x58>
 8006994:	2301      	movs	r3, #1
 8006996:	4622      	mov	r2, r4
 8006998:	4649      	mov	r1, r9
 800699a:	4638      	mov	r0, r7
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d0e6      	beq.n	8006970 <_printf_common+0xa4>
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7d9      	b.n	800695a <_printf_common+0x8e>
	...

080069a8 <_printf_i>:
 80069a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	7e0f      	ldrb	r7, [r1, #24]
 80069ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069b0:	2f78      	cmp	r7, #120	; 0x78
 80069b2:	4691      	mov	r9, r2
 80069b4:	4680      	mov	r8, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	469a      	mov	sl, r3
 80069ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069be:	d807      	bhi.n	80069d0 <_printf_i+0x28>
 80069c0:	2f62      	cmp	r7, #98	; 0x62
 80069c2:	d80a      	bhi.n	80069da <_printf_i+0x32>
 80069c4:	2f00      	cmp	r7, #0
 80069c6:	f000 80d8 	beq.w	8006b7a <_printf_i+0x1d2>
 80069ca:	2f58      	cmp	r7, #88	; 0x58
 80069cc:	f000 80a3 	beq.w	8006b16 <_printf_i+0x16e>
 80069d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d8:	e03a      	b.n	8006a50 <_printf_i+0xa8>
 80069da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069de:	2b15      	cmp	r3, #21
 80069e0:	d8f6      	bhi.n	80069d0 <_printf_i+0x28>
 80069e2:	a101      	add	r1, pc, #4	; (adr r1, 80069e8 <_printf_i+0x40>)
 80069e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	080069d1 	.word	0x080069d1
 80069f4:	080069d1 	.word	0x080069d1
 80069f8:	080069d1 	.word	0x080069d1
 80069fc:	080069d1 	.word	0x080069d1
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	080069d1 	.word	0x080069d1
 8006a08:	080069d1 	.word	0x080069d1
 8006a0c:	080069d1 	.word	0x080069d1
 8006a10:	080069d1 	.word	0x080069d1
 8006a14:	08006b61 	.word	0x08006b61
 8006a18:	08006a85 	.word	0x08006a85
 8006a1c:	08006b43 	.word	0x08006b43
 8006a20:	080069d1 	.word	0x080069d1
 8006a24:	080069d1 	.word	0x080069d1
 8006a28:	08006b83 	.word	0x08006b83
 8006a2c:	080069d1 	.word	0x080069d1
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	080069d1 	.word	0x080069d1
 8006a38:	080069d1 	.word	0x080069d1
 8006a3c:	08006b4b 	.word	0x08006b4b
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	1d1a      	adds	r2, r3, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	602a      	str	r2, [r5, #0]
 8006a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0a3      	b.n	8006b9c <_printf_i+0x1f4>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	6829      	ldr	r1, [r5, #0]
 8006a58:	0606      	lsls	r6, r0, #24
 8006a5a:	f101 0304 	add.w	r3, r1, #4
 8006a5e:	d50a      	bpl.n	8006a76 <_printf_i+0xce>
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	da03      	bge.n	8006a70 <_printf_i+0xc8>
 8006a68:	232d      	movs	r3, #45	; 0x2d
 8006a6a:	4276      	negs	r6, r6
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a70:	485e      	ldr	r0, [pc, #376]	; (8006bec <_printf_i+0x244>)
 8006a72:	230a      	movs	r3, #10
 8006a74:	e019      	b.n	8006aaa <_printf_i+0x102>
 8006a76:	680e      	ldr	r6, [r1, #0]
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a7e:	bf18      	it	ne
 8006a80:	b236      	sxthne	r6, r6
 8006a82:	e7ef      	b.n	8006a64 <_printf_i+0xbc>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	6820      	ldr	r0, [r4, #0]
 8006a88:	1d19      	adds	r1, r3, #4
 8006a8a:	6029      	str	r1, [r5, #0]
 8006a8c:	0601      	lsls	r1, r0, #24
 8006a8e:	d501      	bpl.n	8006a94 <_printf_i+0xec>
 8006a90:	681e      	ldr	r6, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <_printf_i+0xf2>
 8006a94:	0646      	lsls	r6, r0, #25
 8006a96:	d5fb      	bpl.n	8006a90 <_printf_i+0xe8>
 8006a98:	881e      	ldrh	r6, [r3, #0]
 8006a9a:	4854      	ldr	r0, [pc, #336]	; (8006bec <_printf_i+0x244>)
 8006a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2308      	moveq	r3, #8
 8006aa2:	230a      	movne	r3, #10
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aaa:	6865      	ldr	r5, [r4, #4]
 8006aac:	60a5      	str	r5, [r4, #8]
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	bfa2      	ittt	ge
 8006ab2:	6821      	ldrge	r1, [r4, #0]
 8006ab4:	f021 0104 	bicge.w	r1, r1, #4
 8006ab8:	6021      	strge	r1, [r4, #0]
 8006aba:	b90e      	cbnz	r6, 8006ac0 <_printf_i+0x118>
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	d04d      	beq.n	8006b5c <_printf_i+0x1b4>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aca:	5dc7      	ldrb	r7, [r0, r7]
 8006acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ad0:	4637      	mov	r7, r6
 8006ad2:	42bb      	cmp	r3, r7
 8006ad4:	460e      	mov	r6, r1
 8006ad6:	d9f4      	bls.n	8006ac2 <_printf_i+0x11a>
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d10b      	bne.n	8006af4 <_printf_i+0x14c>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	07de      	lsls	r6, r3, #31
 8006ae0:	d508      	bpl.n	8006af4 <_printf_i+0x14c>
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	bfde      	ittt	le
 8006aea:	2330      	movle	r3, #48	; 0x30
 8006aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006af4:	1b52      	subs	r2, r2, r5
 8006af6:	6122      	str	r2, [r4, #16]
 8006af8:	f8cd a000 	str.w	sl, [sp]
 8006afc:	464b      	mov	r3, r9
 8006afe:	aa03      	add	r2, sp, #12
 8006b00:	4621      	mov	r1, r4
 8006b02:	4640      	mov	r0, r8
 8006b04:	f7ff fee2 	bl	80068cc <_printf_common>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d14c      	bne.n	8006ba6 <_printf_i+0x1fe>
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	b004      	add	sp, #16
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	4835      	ldr	r0, [pc, #212]	; (8006bec <_printf_i+0x244>)
 8006b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b1c:	6829      	ldr	r1, [r5, #0]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b24:	6029      	str	r1, [r5, #0]
 8006b26:	061d      	lsls	r5, r3, #24
 8006b28:	d514      	bpl.n	8006b54 <_printf_i+0x1ac>
 8006b2a:	07df      	lsls	r7, r3, #31
 8006b2c:	bf44      	itt	mi
 8006b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b32:	6023      	strmi	r3, [r4, #0]
 8006b34:	b91e      	cbnz	r6, 8006b3e <_printf_i+0x196>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f023 0320 	bic.w	r3, r3, #32
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	2310      	movs	r3, #16
 8006b40:	e7b0      	b.n	8006aa4 <_printf_i+0xfc>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	f043 0320 	orr.w	r3, r3, #32
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	2378      	movs	r3, #120	; 0x78
 8006b4c:	4828      	ldr	r0, [pc, #160]	; (8006bf0 <_printf_i+0x248>)
 8006b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b52:	e7e3      	b.n	8006b1c <_printf_i+0x174>
 8006b54:	0659      	lsls	r1, r3, #25
 8006b56:	bf48      	it	mi
 8006b58:	b2b6      	uxthmi	r6, r6
 8006b5a:	e7e6      	b.n	8006b2a <_printf_i+0x182>
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	e7bb      	b.n	8006ad8 <_printf_i+0x130>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	6826      	ldr	r6, [r4, #0]
 8006b64:	6961      	ldr	r1, [r4, #20]
 8006b66:	1d18      	adds	r0, r3, #4
 8006b68:	6028      	str	r0, [r5, #0]
 8006b6a:	0635      	lsls	r5, r6, #24
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	d501      	bpl.n	8006b74 <_printf_i+0x1cc>
 8006b70:	6019      	str	r1, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <_printf_i+0x1d2>
 8006b74:	0670      	lsls	r0, r6, #25
 8006b76:	d5fb      	bpl.n	8006b70 <_printf_i+0x1c8>
 8006b78:	8019      	strh	r1, [r3, #0]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	4615      	mov	r5, r2
 8006b80:	e7ba      	b.n	8006af8 <_printf_i+0x150>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	1d1a      	adds	r2, r3, #4
 8006b86:	602a      	str	r2, [r5, #0]
 8006b88:	681d      	ldr	r5, [r3, #0]
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7f9 fb2e 	bl	80001f0 <memchr>
 8006b94:	b108      	cbz	r0, 8006b9a <_printf_i+0x1f2>
 8006b96:	1b40      	subs	r0, r0, r5
 8006b98:	6060      	str	r0, [r4, #4]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba4:	e7a8      	b.n	8006af8 <_printf_i+0x150>
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4649      	mov	r1, r9
 8006bac:	4640      	mov	r0, r8
 8006bae:	47d0      	blx	sl
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d0ab      	beq.n	8006b0c <_printf_i+0x164>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	079b      	lsls	r3, r3, #30
 8006bb8:	d413      	bmi.n	8006be2 <_printf_i+0x23a>
 8006bba:	68e0      	ldr	r0, [r4, #12]
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	bfb8      	it	lt
 8006bc2:	4618      	movlt	r0, r3
 8006bc4:	e7a4      	b.n	8006b10 <_printf_i+0x168>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	47d0      	blx	sl
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d09b      	beq.n	8006b0c <_printf_i+0x164>
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	68e3      	ldr	r3, [r4, #12]
 8006bd8:	9903      	ldr	r1, [sp, #12]
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	dcf2      	bgt.n	8006bc6 <_printf_i+0x21e>
 8006be0:	e7eb      	b.n	8006bba <_printf_i+0x212>
 8006be2:	2500      	movs	r5, #0
 8006be4:	f104 0619 	add.w	r6, r4, #25
 8006be8:	e7f5      	b.n	8006bd6 <_printf_i+0x22e>
 8006bea:	bf00      	nop
 8006bec:	08008d9e 	.word	0x08008d9e
 8006bf0:	08008daf 	.word	0x08008daf

08006bf4 <quorem>:
 8006bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	6903      	ldr	r3, [r0, #16]
 8006bfa:	690c      	ldr	r4, [r1, #16]
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f2c0 8081 	blt.w	8006d06 <quorem+0x112>
 8006c04:	3c01      	subs	r4, #1
 8006c06:	f101 0814 	add.w	r8, r1, #20
 8006c0a:	f100 0514 	add.w	r5, r0, #20
 8006c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c2c:	d331      	bcc.n	8006c92 <quorem+0x9e>
 8006c2e:	f04f 0e00 	mov.w	lr, #0
 8006c32:	4640      	mov	r0, r8
 8006c34:	46ac      	mov	ip, r5
 8006c36:	46f2      	mov	sl, lr
 8006c38:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c3c:	b293      	uxth	r3, r2
 8006c3e:	fb06 e303 	mla	r3, r6, r3, lr
 8006c42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ebaa 0303 	sub.w	r3, sl, r3
 8006c4c:	f8dc a000 	ldr.w	sl, [ip]
 8006c50:	0c12      	lsrs	r2, r2, #16
 8006c52:	fa13 f38a 	uxtah	r3, r3, sl
 8006c56:	fb06 e202 	mla	r2, r6, r2, lr
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	9b00      	ldr	r3, [sp, #0]
 8006c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c62:	b292      	uxth	r2, r2
 8006c64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c70:	4581      	cmp	r9, r0
 8006c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c76:	f84c 3b04 	str.w	r3, [ip], #4
 8006c7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c7e:	d2db      	bcs.n	8006c38 <quorem+0x44>
 8006c80:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c84:	b92b      	cbnz	r3, 8006c92 <quorem+0x9e>
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	429d      	cmp	r5, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	d32e      	bcc.n	8006cee <quorem+0xfa>
 8006c90:	613c      	str	r4, [r7, #16]
 8006c92:	4638      	mov	r0, r7
 8006c94:	f001 f8c6 	bl	8007e24 <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	db24      	blt.n	8006ce6 <quorem+0xf2>
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f04f 0c00 	mov.w	ip, #0
 8006ca4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ca8:	f8d0 e000 	ldr.w	lr, [r0]
 8006cac:	b293      	uxth	r3, r2
 8006cae:	ebac 0303 	sub.w	r3, ip, r3
 8006cb2:	0c12      	lsrs	r2, r2, #16
 8006cb4:	fa13 f38e 	uxtah	r3, r3, lr
 8006cb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cc6:	45c1      	cmp	r9, r8
 8006cc8:	f840 3b04 	str.w	r3, [r0], #4
 8006ccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cd0:	d2e8      	bcs.n	8006ca4 <quorem+0xb0>
 8006cd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cda:	b922      	cbnz	r2, 8006ce6 <quorem+0xf2>
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	d30a      	bcc.n	8006cfa <quorem+0x106>
 8006ce4:	613c      	str	r4, [r7, #16]
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	b003      	add	sp, #12
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	d1cc      	bne.n	8006c90 <quorem+0x9c>
 8006cf6:	3c01      	subs	r4, #1
 8006cf8:	e7c7      	b.n	8006c8a <quorem+0x96>
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d1f0      	bne.n	8006ce4 <quorem+0xf0>
 8006d02:	3c01      	subs	r4, #1
 8006d04:	e7eb      	b.n	8006cde <quorem+0xea>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e7ee      	b.n	8006ce8 <quorem+0xf4>
 8006d0a:	0000      	movs	r0, r0
 8006d0c:	0000      	movs	r0, r0
	...

08006d10 <_dtoa_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	ed2d 8b04 	vpush	{d8-d9}
 8006d18:	ec57 6b10 	vmov	r6, r7, d0
 8006d1c:	b093      	sub	sp, #76	; 0x4c
 8006d1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d24:	9106      	str	r1, [sp, #24]
 8006d26:	ee10 aa10 	vmov	sl, s0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d30:	46bb      	mov	fp, r7
 8006d32:	b975      	cbnz	r5, 8006d52 <_dtoa_r+0x42>
 8006d34:	2010      	movs	r0, #16
 8006d36:	f000 fddd 	bl	80078f4 <malloc>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	6260      	str	r0, [r4, #36]	; 0x24
 8006d3e:	b920      	cbnz	r0, 8006d4a <_dtoa_r+0x3a>
 8006d40:	4ba7      	ldr	r3, [pc, #668]	; (8006fe0 <_dtoa_r+0x2d0>)
 8006d42:	21ea      	movs	r1, #234	; 0xea
 8006d44:	48a7      	ldr	r0, [pc, #668]	; (8006fe4 <_dtoa_r+0x2d4>)
 8006d46:	f001 fa75 	bl	8008234 <__assert_func>
 8006d4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d4e:	6005      	str	r5, [r0, #0]
 8006d50:	60c5      	str	r5, [r0, #12]
 8006d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	b151      	cbz	r1, 8006d6e <_dtoa_r+0x5e>
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	604a      	str	r2, [r1, #4]
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4093      	lsls	r3, r2
 8006d60:	608b      	str	r3, [r1, #8]
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fe1c 	bl	80079a0 <_Bfree>
 8006d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	1e3b      	subs	r3, r7, #0
 8006d70:	bfaa      	itet	ge
 8006d72:	2300      	movge	r3, #0
 8006d74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d78:	f8c8 3000 	strge.w	r3, [r8]
 8006d7c:	4b9a      	ldr	r3, [pc, #616]	; (8006fe8 <_dtoa_r+0x2d8>)
 8006d7e:	bfbc      	itt	lt
 8006d80:	2201      	movlt	r2, #1
 8006d82:	f8c8 2000 	strlt.w	r2, [r8]
 8006d86:	ea33 030b 	bics.w	r3, r3, fp
 8006d8a:	d11b      	bne.n	8006dc4 <_dtoa_r+0xb4>
 8006d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d98:	4333      	orrs	r3, r6
 8006d9a:	f000 8592 	beq.w	80078c2 <_dtoa_r+0xbb2>
 8006d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da0:	b963      	cbnz	r3, 8006dbc <_dtoa_r+0xac>
 8006da2:	4b92      	ldr	r3, [pc, #584]	; (8006fec <_dtoa_r+0x2dc>)
 8006da4:	e022      	b.n	8006dec <_dtoa_r+0xdc>
 8006da6:	4b92      	ldr	r3, [pc, #584]	; (8006ff0 <_dtoa_r+0x2e0>)
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	3308      	adds	r3, #8
 8006dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	9801      	ldr	r0, [sp, #4]
 8006db2:	b013      	add	sp, #76	; 0x4c
 8006db4:	ecbd 8b04 	vpop	{d8-d9}
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	4b8b      	ldr	r3, [pc, #556]	; (8006fec <_dtoa_r+0x2dc>)
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	3303      	adds	r3, #3
 8006dc2:	e7f3      	b.n	8006dac <_dtoa_r+0x9c>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7f9 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd0:	ec4b ab19 	vmov	d9, sl, fp
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	b158      	cbz	r0, 8006df0 <_dtoa_r+0xe0>
 8006dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dda:	2301      	movs	r3, #1
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 856b 	beq.w	80078bc <_dtoa_r+0xbac>
 8006de6:	4883      	ldr	r0, [pc, #524]	; (8006ff4 <_dtoa_r+0x2e4>)
 8006de8:	6018      	str	r0, [r3, #0]
 8006dea:	1e43      	subs	r3, r0, #1
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	e7df      	b.n	8006db0 <_dtoa_r+0xa0>
 8006df0:	ec4b ab10 	vmov	d0, sl, fp
 8006df4:	aa10      	add	r2, sp, #64	; 0x40
 8006df6:	a911      	add	r1, sp, #68	; 0x44
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f001 f8b9 	bl	8007f70 <__d2b>
 8006dfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e02:	ee08 0a10 	vmov	s16, r0
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	f000 8084 	beq.w	8006f14 <_dtoa_r+0x204>
 8006e0c:	ee19 3a90 	vmov	r3, s19
 8006e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e18:	4656      	mov	r6, sl
 8006e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006e26:	4b74      	ldr	r3, [pc, #464]	; (8006ff8 <_dtoa_r+0x2e8>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	f7f9 fa33 	bl	8000298 <__aeabi_dsub>
 8006e32:	a365      	add	r3, pc, #404	; (adr r3, 8006fc8 <_dtoa_r+0x2b8>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fbe6 	bl	8000608 <__aeabi_dmul>
 8006e3c:	a364      	add	r3, pc, #400	; (adr r3, 8006fd0 <_dtoa_r+0x2c0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fa2b 	bl	800029c <__adddf3>
 8006e46:	4606      	mov	r6, r0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	f7f9 fb72 	bl	8000534 <__aeabi_i2d>
 8006e50:	a361      	add	r3, pc, #388	; (adr r3, 8006fd8 <_dtoa_r+0x2c8>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fbd7 	bl	8000608 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	f7f9 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	9000      	str	r0, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 fe38 	bl	8000aec <__aeabi_dcmplt>
 8006e7c:	b150      	cbz	r0, 8006e94 <_dtoa_r+0x184>
 8006e7e:	9800      	ldr	r0, [sp, #0]
 8006e80:	f7f9 fb58 	bl	8000534 <__aeabi_i2d>
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	f7f9 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8c:	b910      	cbnz	r0, 8006e94 <_dtoa_r+0x184>
 8006e8e:	9b00      	ldr	r3, [sp, #0]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	9b00      	ldr	r3, [sp, #0]
 8006e96:	2b16      	cmp	r3, #22
 8006e98:	d85a      	bhi.n	8006f50 <_dtoa_r+0x240>
 8006e9a:	9a00      	ldr	r2, [sp, #0]
 8006e9c:	4b57      	ldr	r3, [pc, #348]	; (8006ffc <_dtoa_r+0x2ec>)
 8006e9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	ec51 0b19 	vmov	r0, r1, d9
 8006eaa:	f7f9 fe1f 	bl	8000aec <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d050      	beq.n	8006f54 <_dtoa_r+0x244>
 8006eb2:	9b00      	ldr	r3, [sp, #0]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ebe:	1b5d      	subs	r5, r3, r5
 8006ec0:	1e6b      	subs	r3, r5, #1
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	bf45      	ittet	mi
 8006ec6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006eca:	9304      	strmi	r3, [sp, #16]
 8006ecc:	2300      	movpl	r3, #0
 8006ece:	2300      	movmi	r3, #0
 8006ed0:	bf4c      	ite	mi
 8006ed2:	9305      	strmi	r3, [sp, #20]
 8006ed4:	9304      	strpl	r3, [sp, #16]
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db3d      	blt.n	8006f58 <_dtoa_r+0x248>
 8006edc:	9b05      	ldr	r3, [sp, #20]
 8006ede:	9a00      	ldr	r2, [sp, #0]
 8006ee0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ee2:	4413      	add	r3, r2
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9307      	str	r3, [sp, #28]
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	2b09      	cmp	r3, #9
 8006eee:	f200 8089 	bhi.w	8007004 <_dtoa_r+0x2f4>
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	bfc4      	itt	gt
 8006ef6:	3b04      	subgt	r3, #4
 8006ef8:	9306      	strgt	r3, [sp, #24]
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	f1a3 0302 	sub.w	r3, r3, #2
 8006f00:	bfcc      	ite	gt
 8006f02:	2500      	movgt	r5, #0
 8006f04:	2501      	movle	r5, #1
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	f200 8087 	bhi.w	800701a <_dtoa_r+0x30a>
 8006f0c:	e8df f003 	tbb	[pc, r3]
 8006f10:	59383a2d 	.word	0x59383a2d
 8006f14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f18:	441d      	add	r5, r3
 8006f1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	bfc1      	itttt	gt
 8006f22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006f2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f32:	bfda      	itte	le
 8006f34:	f1c3 0320 	rsble	r3, r3, #32
 8006f38:	fa06 f003 	lslle.w	r0, r6, r3
 8006f3c:	4318      	orrgt	r0, r3
 8006f3e:	f7f9 fae9 	bl	8000514 <__aeabi_ui2d>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4606      	mov	r6, r0
 8006f46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f4a:	3d01      	subs	r5, #1
 8006f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f4e:	e76a      	b.n	8006e26 <_dtoa_r+0x116>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7b2      	b.n	8006eba <_dtoa_r+0x1aa>
 8006f54:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f56:	e7b1      	b.n	8006ebc <_dtoa_r+0x1ac>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	9a00      	ldr	r2, [sp, #0]
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	4253      	negs	r3, r2
 8006f62:	9307      	str	r3, [sp, #28]
 8006f64:	2300      	movs	r3, #0
 8006f66:	930a      	str	r3, [sp, #40]	; 0x28
 8006f68:	e7bf      	b.n	8006eea <_dtoa_r+0x1da>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9308      	str	r3, [sp, #32]
 8006f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dc55      	bgt.n	8007020 <_dtoa_r+0x310>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f7e:	e00c      	b.n	8006f9a <_dtoa_r+0x28a>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e7f3      	b.n	8006f6c <_dtoa_r+0x25c>
 8006f84:	2300      	movs	r3, #0
 8006f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f88:	9308      	str	r3, [sp, #32]
 8006f8a:	9b00      	ldr	r3, [sp, #0]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	9302      	str	r3, [sp, #8]
 8006f90:	3301      	adds	r3, #1
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	bfb8      	it	lt
 8006f98:	2301      	movlt	r3, #1
 8006f9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	6042      	str	r2, [r0, #4]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	f102 0614 	add.w	r6, r2, #20
 8006fa6:	429e      	cmp	r6, r3
 8006fa8:	6841      	ldr	r1, [r0, #4]
 8006faa:	d93d      	bls.n	8007028 <_dtoa_r+0x318>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fcb7 	bl	8007920 <_Balloc>
 8006fb2:	9001      	str	r0, [sp, #4]
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d13b      	bne.n	8007030 <_dtoa_r+0x320>
 8006fb8:	4b11      	ldr	r3, [pc, #68]	; (8007000 <_dtoa_r+0x2f0>)
 8006fba:	4602      	mov	r2, r0
 8006fbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fc0:	e6c0      	b.n	8006d44 <_dtoa_r+0x34>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e7df      	b.n	8006f86 <_dtoa_r+0x276>
 8006fc6:	bf00      	nop
 8006fc8:	636f4361 	.word	0x636f4361
 8006fcc:	3fd287a7 	.word	0x3fd287a7
 8006fd0:	8b60c8b3 	.word	0x8b60c8b3
 8006fd4:	3fc68a28 	.word	0x3fc68a28
 8006fd8:	509f79fb 	.word	0x509f79fb
 8006fdc:	3fd34413 	.word	0x3fd34413
 8006fe0:	08008dcd 	.word	0x08008dcd
 8006fe4:	08008de4 	.word	0x08008de4
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	08008dc9 	.word	0x08008dc9
 8006ff0:	08008dc0 	.word	0x08008dc0
 8006ff4:	08008d9d 	.word	0x08008d9d
 8006ff8:	3ff80000 	.word	0x3ff80000
 8006ffc:	08008ed8 	.word	0x08008ed8
 8007000:	08008e3f 	.word	0x08008e3f
 8007004:	2501      	movs	r5, #1
 8007006:	2300      	movs	r3, #0
 8007008:	9306      	str	r3, [sp, #24]
 800700a:	9508      	str	r5, [sp, #32]
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	2312      	movs	r3, #18
 8007018:	e7b0      	b.n	8006f7c <_dtoa_r+0x26c>
 800701a:	2301      	movs	r3, #1
 800701c:	9308      	str	r3, [sp, #32]
 800701e:	e7f5      	b.n	800700c <_dtoa_r+0x2fc>
 8007020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007022:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007026:	e7b8      	b.n	8006f9a <_dtoa_r+0x28a>
 8007028:	3101      	adds	r1, #1
 800702a:	6041      	str	r1, [r0, #4]
 800702c:	0052      	lsls	r2, r2, #1
 800702e:	e7b8      	b.n	8006fa2 <_dtoa_r+0x292>
 8007030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	2b0e      	cmp	r3, #14
 800703a:	f200 809d 	bhi.w	8007178 <_dtoa_r+0x468>
 800703e:	2d00      	cmp	r5, #0
 8007040:	f000 809a 	beq.w	8007178 <_dtoa_r+0x468>
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd32      	ble.n	80070b0 <_dtoa_r+0x3a0>
 800704a:	4ab7      	ldr	r2, [pc, #732]	; (8007328 <_dtoa_r+0x618>)
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	05d8      	lsls	r0, r3, #23
 800705c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007060:	d516      	bpl.n	8007090 <_dtoa_r+0x380>
 8007062:	4bb2      	ldr	r3, [pc, #712]	; (800732c <_dtoa_r+0x61c>)
 8007064:	ec51 0b19 	vmov	r0, r1, d9
 8007068:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800706c:	f7f9 fbf6 	bl	800085c <__aeabi_ddiv>
 8007070:	f007 070f 	and.w	r7, r7, #15
 8007074:	4682      	mov	sl, r0
 8007076:	468b      	mov	fp, r1
 8007078:	2503      	movs	r5, #3
 800707a:	4eac      	ldr	r6, [pc, #688]	; (800732c <_dtoa_r+0x61c>)
 800707c:	b957      	cbnz	r7, 8007094 <_dtoa_r+0x384>
 800707e:	4642      	mov	r2, r8
 8007080:	464b      	mov	r3, r9
 8007082:	4650      	mov	r0, sl
 8007084:	4659      	mov	r1, fp
 8007086:	f7f9 fbe9 	bl	800085c <__aeabi_ddiv>
 800708a:	4682      	mov	sl, r0
 800708c:	468b      	mov	fp, r1
 800708e:	e028      	b.n	80070e2 <_dtoa_r+0x3d2>
 8007090:	2502      	movs	r5, #2
 8007092:	e7f2      	b.n	800707a <_dtoa_r+0x36a>
 8007094:	07f9      	lsls	r1, r7, #31
 8007096:	d508      	bpl.n	80070aa <_dtoa_r+0x39a>
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070a0:	f7f9 fab2 	bl	8000608 <__aeabi_dmul>
 80070a4:	3501      	adds	r5, #1
 80070a6:	4680      	mov	r8, r0
 80070a8:	4689      	mov	r9, r1
 80070aa:	107f      	asrs	r7, r7, #1
 80070ac:	3608      	adds	r6, #8
 80070ae:	e7e5      	b.n	800707c <_dtoa_r+0x36c>
 80070b0:	f000 809b 	beq.w	80071ea <_dtoa_r+0x4da>
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	4f9d      	ldr	r7, [pc, #628]	; (800732c <_dtoa_r+0x61c>)
 80070b8:	425e      	negs	r6, r3
 80070ba:	4b9b      	ldr	r3, [pc, #620]	; (8007328 <_dtoa_r+0x618>)
 80070bc:	f006 020f 	and.w	r2, r6, #15
 80070c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	ec51 0b19 	vmov	r0, r1, d9
 80070cc:	f7f9 fa9c 	bl	8000608 <__aeabi_dmul>
 80070d0:	1136      	asrs	r6, r6, #4
 80070d2:	4682      	mov	sl, r0
 80070d4:	468b      	mov	fp, r1
 80070d6:	2300      	movs	r3, #0
 80070d8:	2502      	movs	r5, #2
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d17a      	bne.n	80071d4 <_dtoa_r+0x4c4>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1d3      	bne.n	800708a <_dtoa_r+0x37a>
 80070e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8082 	beq.w	80071ee <_dtoa_r+0x4de>
 80070ea:	4b91      	ldr	r3, [pc, #580]	; (8007330 <_dtoa_r+0x620>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	4650      	mov	r0, sl
 80070f0:	4659      	mov	r1, fp
 80070f2:	f7f9 fcfb 	bl	8000aec <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d079      	beq.n	80071ee <_dtoa_r+0x4de>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d076      	beq.n	80071ee <_dtoa_r+0x4de>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	dd36      	ble.n	8007174 <_dtoa_r+0x464>
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	4650      	mov	r0, sl
 800710a:	4659      	mov	r1, fp
 800710c:	1e5f      	subs	r7, r3, #1
 800710e:	2200      	movs	r2, #0
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <_dtoa_r+0x624>)
 8007112:	f7f9 fa79 	bl	8000608 <__aeabi_dmul>
 8007116:	9e02      	ldr	r6, [sp, #8]
 8007118:	4682      	mov	sl, r0
 800711a:	468b      	mov	fp, r1
 800711c:	3501      	adds	r5, #1
 800711e:	4628      	mov	r0, r5
 8007120:	f7f9 fa08 	bl	8000534 <__aeabi_i2d>
 8007124:	4652      	mov	r2, sl
 8007126:	465b      	mov	r3, fp
 8007128:	f7f9 fa6e 	bl	8000608 <__aeabi_dmul>
 800712c:	4b82      	ldr	r3, [pc, #520]	; (8007338 <_dtoa_r+0x628>)
 800712e:	2200      	movs	r2, #0
 8007130:	f7f9 f8b4 	bl	800029c <__adddf3>
 8007134:	46d0      	mov	r8, sl
 8007136:	46d9      	mov	r9, fp
 8007138:	4682      	mov	sl, r0
 800713a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800713e:	2e00      	cmp	r6, #0
 8007140:	d158      	bne.n	80071f4 <_dtoa_r+0x4e4>
 8007142:	4b7e      	ldr	r3, [pc, #504]	; (800733c <_dtoa_r+0x62c>)
 8007144:	2200      	movs	r2, #0
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 f8a5 	bl	8000298 <__aeabi_dsub>
 800714e:	4652      	mov	r2, sl
 8007150:	465b      	mov	r3, fp
 8007152:	4680      	mov	r8, r0
 8007154:	4689      	mov	r9, r1
 8007156:	f7f9 fce7 	bl	8000b28 <__aeabi_dcmpgt>
 800715a:	2800      	cmp	r0, #0
 800715c:	f040 8295 	bne.w	800768a <_dtoa_r+0x97a>
 8007160:	4652      	mov	r2, sl
 8007162:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007166:	4640      	mov	r0, r8
 8007168:	4649      	mov	r1, r9
 800716a:	f7f9 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	f040 8289 	bne.w	8007686 <_dtoa_r+0x976>
 8007174:	ec5b ab19 	vmov	sl, fp, d9
 8007178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800717a:	2b00      	cmp	r3, #0
 800717c:	f2c0 8148 	blt.w	8007410 <_dtoa_r+0x700>
 8007180:	9a00      	ldr	r2, [sp, #0]
 8007182:	2a0e      	cmp	r2, #14
 8007184:	f300 8144 	bgt.w	8007410 <_dtoa_r+0x700>
 8007188:	4b67      	ldr	r3, [pc, #412]	; (8007328 <_dtoa_r+0x618>)
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	f280 80d5 	bge.w	8007344 <_dtoa_r+0x634>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f300 80d1 	bgt.w	8007344 <_dtoa_r+0x634>
 80071a2:	f040 826f 	bne.w	8007684 <_dtoa_r+0x974>
 80071a6:	4b65      	ldr	r3, [pc, #404]	; (800733c <_dtoa_r+0x62c>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fa2b 	bl	8000608 <__aeabi_dmul>
 80071b2:	4652      	mov	r2, sl
 80071b4:	465b      	mov	r3, fp
 80071b6:	f7f9 fcad 	bl	8000b14 <__aeabi_dcmpge>
 80071ba:	9e03      	ldr	r6, [sp, #12]
 80071bc:	4637      	mov	r7, r6
 80071be:	2800      	cmp	r0, #0
 80071c0:	f040 8245 	bne.w	800764e <_dtoa_r+0x93e>
 80071c4:	9d01      	ldr	r5, [sp, #4]
 80071c6:	2331      	movs	r3, #49	; 0x31
 80071c8:	f805 3b01 	strb.w	r3, [r5], #1
 80071cc:	9b00      	ldr	r3, [sp, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	e240      	b.n	8007656 <_dtoa_r+0x946>
 80071d4:	07f2      	lsls	r2, r6, #31
 80071d6:	d505      	bpl.n	80071e4 <_dtoa_r+0x4d4>
 80071d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071dc:	f7f9 fa14 	bl	8000608 <__aeabi_dmul>
 80071e0:	3501      	adds	r5, #1
 80071e2:	2301      	movs	r3, #1
 80071e4:	1076      	asrs	r6, r6, #1
 80071e6:	3708      	adds	r7, #8
 80071e8:	e777      	b.n	80070da <_dtoa_r+0x3ca>
 80071ea:	2502      	movs	r5, #2
 80071ec:	e779      	b.n	80070e2 <_dtoa_r+0x3d2>
 80071ee:	9f00      	ldr	r7, [sp, #0]
 80071f0:	9e03      	ldr	r6, [sp, #12]
 80071f2:	e794      	b.n	800711e <_dtoa_r+0x40e>
 80071f4:	9901      	ldr	r1, [sp, #4]
 80071f6:	4b4c      	ldr	r3, [pc, #304]	; (8007328 <_dtoa_r+0x618>)
 80071f8:	4431      	add	r1, r6
 80071fa:	910d      	str	r1, [sp, #52]	; 0x34
 80071fc:	9908      	ldr	r1, [sp, #32]
 80071fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007202:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007206:	2900      	cmp	r1, #0
 8007208:	d043      	beq.n	8007292 <_dtoa_r+0x582>
 800720a:	494d      	ldr	r1, [pc, #308]	; (8007340 <_dtoa_r+0x630>)
 800720c:	2000      	movs	r0, #0
 800720e:	f7f9 fb25 	bl	800085c <__aeabi_ddiv>
 8007212:	4652      	mov	r2, sl
 8007214:	465b      	mov	r3, fp
 8007216:	f7f9 f83f 	bl	8000298 <__aeabi_dsub>
 800721a:	9d01      	ldr	r5, [sp, #4]
 800721c:	4682      	mov	sl, r0
 800721e:	468b      	mov	fp, r1
 8007220:	4649      	mov	r1, r9
 8007222:	4640      	mov	r0, r8
 8007224:	f7f9 fca0 	bl	8000b68 <__aeabi_d2iz>
 8007228:	4606      	mov	r6, r0
 800722a:	f7f9 f983 	bl	8000534 <__aeabi_i2d>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	3630      	adds	r6, #48	; 0x30
 800723c:	f805 6b01 	strb.w	r6, [r5], #1
 8007240:	4652      	mov	r2, sl
 8007242:	465b      	mov	r3, fp
 8007244:	4680      	mov	r8, r0
 8007246:	4689      	mov	r9, r1
 8007248:	f7f9 fc50 	bl	8000aec <__aeabi_dcmplt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d163      	bne.n	8007318 <_dtoa_r+0x608>
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	4936      	ldr	r1, [pc, #216]	; (8007330 <_dtoa_r+0x620>)
 8007256:	2000      	movs	r0, #0
 8007258:	f7f9 f81e 	bl	8000298 <__aeabi_dsub>
 800725c:	4652      	mov	r2, sl
 800725e:	465b      	mov	r3, fp
 8007260:	f7f9 fc44 	bl	8000aec <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	f040 80b5 	bne.w	80073d4 <_dtoa_r+0x6c4>
 800726a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800726c:	429d      	cmp	r5, r3
 800726e:	d081      	beq.n	8007174 <_dtoa_r+0x464>
 8007270:	4b30      	ldr	r3, [pc, #192]	; (8007334 <_dtoa_r+0x624>)
 8007272:	2200      	movs	r2, #0
 8007274:	4650      	mov	r0, sl
 8007276:	4659      	mov	r1, fp
 8007278:	f7f9 f9c6 	bl	8000608 <__aeabi_dmul>
 800727c:	4b2d      	ldr	r3, [pc, #180]	; (8007334 <_dtoa_r+0x624>)
 800727e:	4682      	mov	sl, r0
 8007280:	468b      	mov	fp, r1
 8007282:	4640      	mov	r0, r8
 8007284:	4649      	mov	r1, r9
 8007286:	2200      	movs	r2, #0
 8007288:	f7f9 f9be 	bl	8000608 <__aeabi_dmul>
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	e7c6      	b.n	8007220 <_dtoa_r+0x510>
 8007292:	4650      	mov	r0, sl
 8007294:	4659      	mov	r1, fp
 8007296:	f7f9 f9b7 	bl	8000608 <__aeabi_dmul>
 800729a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800729c:	9d01      	ldr	r5, [sp, #4]
 800729e:	930f      	str	r3, [sp, #60]	; 0x3c
 80072a0:	4682      	mov	sl, r0
 80072a2:	468b      	mov	fp, r1
 80072a4:	4649      	mov	r1, r9
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7f9 fc5e 	bl	8000b68 <__aeabi_d2iz>
 80072ac:	4606      	mov	r6, r0
 80072ae:	f7f9 f941 	bl	8000534 <__aeabi_i2d>
 80072b2:	3630      	adds	r6, #48	; 0x30
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f8 ffec 	bl	8000298 <__aeabi_dsub>
 80072c0:	f805 6b01 	strb.w	r6, [r5], #1
 80072c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c6:	429d      	cmp	r5, r3
 80072c8:	4680      	mov	r8, r0
 80072ca:	4689      	mov	r9, r1
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	d124      	bne.n	800731c <_dtoa_r+0x60c>
 80072d2:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <_dtoa_r+0x630>)
 80072d4:	4650      	mov	r0, sl
 80072d6:	4659      	mov	r1, fp
 80072d8:	f7f8 ffe0 	bl	800029c <__adddf3>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 fc20 	bl	8000b28 <__aeabi_dcmpgt>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d173      	bne.n	80073d4 <_dtoa_r+0x6c4>
 80072ec:	4652      	mov	r2, sl
 80072ee:	465b      	mov	r3, fp
 80072f0:	4913      	ldr	r1, [pc, #76]	; (8007340 <_dtoa_r+0x630>)
 80072f2:	2000      	movs	r0, #0
 80072f4:	f7f8 ffd0 	bl	8000298 <__aeabi_dsub>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f9 fbf4 	bl	8000aec <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	f43f af35 	beq.w	8007174 <_dtoa_r+0x464>
 800730a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800730c:	1e6b      	subs	r3, r5, #1
 800730e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007310:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007314:	2b30      	cmp	r3, #48	; 0x30
 8007316:	d0f8      	beq.n	800730a <_dtoa_r+0x5fa>
 8007318:	9700      	str	r7, [sp, #0]
 800731a:	e049      	b.n	80073b0 <_dtoa_r+0x6a0>
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_dtoa_r+0x624>)
 800731e:	f7f9 f973 	bl	8000608 <__aeabi_dmul>
 8007322:	4680      	mov	r8, r0
 8007324:	4689      	mov	r9, r1
 8007326:	e7bd      	b.n	80072a4 <_dtoa_r+0x594>
 8007328:	08008ed8 	.word	0x08008ed8
 800732c:	08008eb0 	.word	0x08008eb0
 8007330:	3ff00000 	.word	0x3ff00000
 8007334:	40240000 	.word	0x40240000
 8007338:	401c0000 	.word	0x401c0000
 800733c:	40140000 	.word	0x40140000
 8007340:	3fe00000 	.word	0x3fe00000
 8007344:	9d01      	ldr	r5, [sp, #4]
 8007346:	4656      	mov	r6, sl
 8007348:	465f      	mov	r7, fp
 800734a:	4642      	mov	r2, r8
 800734c:	464b      	mov	r3, r9
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f9 fa83 	bl	800085c <__aeabi_ddiv>
 8007356:	f7f9 fc07 	bl	8000b68 <__aeabi_d2iz>
 800735a:	4682      	mov	sl, r0
 800735c:	f7f9 f8ea 	bl	8000534 <__aeabi_i2d>
 8007360:	4642      	mov	r2, r8
 8007362:	464b      	mov	r3, r9
 8007364:	f7f9 f950 	bl	8000608 <__aeabi_dmul>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007374:	f7f8 ff90 	bl	8000298 <__aeabi_dsub>
 8007378:	f805 6b01 	strb.w	r6, [r5], #1
 800737c:	9e01      	ldr	r6, [sp, #4]
 800737e:	9f03      	ldr	r7, [sp, #12]
 8007380:	1bae      	subs	r6, r5, r6
 8007382:	42b7      	cmp	r7, r6
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	d135      	bne.n	80073f6 <_dtoa_r+0x6e6>
 800738a:	f7f8 ff87 	bl	800029c <__adddf3>
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	f7f9 fbc7 	bl	8000b28 <__aeabi_dcmpgt>
 800739a:	b9d0      	cbnz	r0, 80073d2 <_dtoa_r+0x6c2>
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	4630      	mov	r0, r6
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7f9 fb98 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a8:	b110      	cbz	r0, 80073b0 <_dtoa_r+0x6a0>
 80073aa:	f01a 0f01 	tst.w	sl, #1
 80073ae:	d110      	bne.n	80073d2 <_dtoa_r+0x6c2>
 80073b0:	4620      	mov	r0, r4
 80073b2:	ee18 1a10 	vmov	r1, s16
 80073b6:	f000 faf3 	bl	80079a0 <_Bfree>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9800      	ldr	r0, [sp, #0]
 80073be:	702b      	strb	r3, [r5, #0]
 80073c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073c2:	3001      	adds	r0, #1
 80073c4:	6018      	str	r0, [r3, #0]
 80073c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f43f acf1 	beq.w	8006db0 <_dtoa_r+0xa0>
 80073ce:	601d      	str	r5, [r3, #0]
 80073d0:	e4ee      	b.n	8006db0 <_dtoa_r+0xa0>
 80073d2:	9f00      	ldr	r7, [sp, #0]
 80073d4:	462b      	mov	r3, r5
 80073d6:	461d      	mov	r5, r3
 80073d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073dc:	2a39      	cmp	r2, #57	; 0x39
 80073de:	d106      	bne.n	80073ee <_dtoa_r+0x6de>
 80073e0:	9a01      	ldr	r2, [sp, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d1f7      	bne.n	80073d6 <_dtoa_r+0x6c6>
 80073e6:	9901      	ldr	r1, [sp, #4]
 80073e8:	2230      	movs	r2, #48	; 0x30
 80073ea:	3701      	adds	r7, #1
 80073ec:	700a      	strb	r2, [r1, #0]
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	3201      	adds	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e790      	b.n	8007318 <_dtoa_r+0x608>
 80073f6:	4ba6      	ldr	r3, [pc, #664]	; (8007690 <_dtoa_r+0x980>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7f9 f905 	bl	8000608 <__aeabi_dmul>
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4606      	mov	r6, r0
 8007404:	460f      	mov	r7, r1
 8007406:	f7f9 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800740a:	2800      	cmp	r0, #0
 800740c:	d09d      	beq.n	800734a <_dtoa_r+0x63a>
 800740e:	e7cf      	b.n	80073b0 <_dtoa_r+0x6a0>
 8007410:	9a08      	ldr	r2, [sp, #32]
 8007412:	2a00      	cmp	r2, #0
 8007414:	f000 80d7 	beq.w	80075c6 <_dtoa_r+0x8b6>
 8007418:	9a06      	ldr	r2, [sp, #24]
 800741a:	2a01      	cmp	r2, #1
 800741c:	f300 80ba 	bgt.w	8007594 <_dtoa_r+0x884>
 8007420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007422:	2a00      	cmp	r2, #0
 8007424:	f000 80b2 	beq.w	800758c <_dtoa_r+0x87c>
 8007428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800742c:	9e07      	ldr	r6, [sp, #28]
 800742e:	9d04      	ldr	r5, [sp, #16]
 8007430:	9a04      	ldr	r2, [sp, #16]
 8007432:	441a      	add	r2, r3
 8007434:	9204      	str	r2, [sp, #16]
 8007436:	9a05      	ldr	r2, [sp, #20]
 8007438:	2101      	movs	r1, #1
 800743a:	441a      	add	r2, r3
 800743c:	4620      	mov	r0, r4
 800743e:	9205      	str	r2, [sp, #20]
 8007440:	f000 fb66 	bl	8007b10 <__i2b>
 8007444:	4607      	mov	r7, r0
 8007446:	2d00      	cmp	r5, #0
 8007448:	dd0c      	ble.n	8007464 <_dtoa_r+0x754>
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd09      	ble.n	8007464 <_dtoa_r+0x754>
 8007450:	42ab      	cmp	r3, r5
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	bfa8      	it	ge
 8007456:	462b      	movge	r3, r5
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	9204      	str	r2, [sp, #16]
 800745c:	9a05      	ldr	r2, [sp, #20]
 800745e:	1aed      	subs	r5, r5, r3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	b31b      	cbz	r3, 80074b0 <_dtoa_r+0x7a0>
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80af 	beq.w	80075ce <_dtoa_r+0x8be>
 8007470:	2e00      	cmp	r6, #0
 8007472:	dd13      	ble.n	800749c <_dtoa_r+0x78c>
 8007474:	4639      	mov	r1, r7
 8007476:	4632      	mov	r2, r6
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fc09 	bl	8007c90 <__pow5mult>
 800747e:	ee18 2a10 	vmov	r2, s16
 8007482:	4601      	mov	r1, r0
 8007484:	4607      	mov	r7, r0
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fb58 	bl	8007b3c <__multiply>
 800748c:	ee18 1a10 	vmov	r1, s16
 8007490:	4680      	mov	r8, r0
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fa84 	bl	80079a0 <_Bfree>
 8007498:	ee08 8a10 	vmov	s16, r8
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	1b9a      	subs	r2, r3, r6
 80074a0:	d006      	beq.n	80074b0 <_dtoa_r+0x7a0>
 80074a2:	ee18 1a10 	vmov	r1, s16
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fbf2 	bl	8007c90 <__pow5mult>
 80074ac:	ee08 0a10 	vmov	s16, r0
 80074b0:	2101      	movs	r1, #1
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fb2c 	bl	8007b10 <__i2b>
 80074b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	4606      	mov	r6, r0
 80074be:	f340 8088 	ble.w	80075d2 <_dtoa_r+0x8c2>
 80074c2:	461a      	mov	r2, r3
 80074c4:	4601      	mov	r1, r0
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 fbe2 	bl	8007c90 <__pow5mult>
 80074cc:	9b06      	ldr	r3, [sp, #24]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	4606      	mov	r6, r0
 80074d2:	f340 8081 	ble.w	80075d8 <_dtoa_r+0x8c8>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	6933      	ldr	r3, [r6, #16]
 80074dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074e0:	6918      	ldr	r0, [r3, #16]
 80074e2:	f000 fac5 	bl	8007a70 <__hi0bits>
 80074e6:	f1c0 0020 	rsb	r0, r0, #32
 80074ea:	9b05      	ldr	r3, [sp, #20]
 80074ec:	4418      	add	r0, r3
 80074ee:	f010 001f 	ands.w	r0, r0, #31
 80074f2:	f000 8092 	beq.w	800761a <_dtoa_r+0x90a>
 80074f6:	f1c0 0320 	rsb	r3, r0, #32
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	f340 808a 	ble.w	8007614 <_dtoa_r+0x904>
 8007500:	f1c0 001c 	rsb	r0, r0, #28
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	4403      	add	r3, r0
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	4403      	add	r3, r0
 800750e:	4405      	add	r5, r0
 8007510:	9305      	str	r3, [sp, #20]
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd07      	ble.n	8007528 <_dtoa_r+0x818>
 8007518:	ee18 1a10 	vmov	r1, s16
 800751c:	461a      	mov	r2, r3
 800751e:	4620      	mov	r0, r4
 8007520:	f000 fc10 	bl	8007d44 <__lshift>
 8007524:	ee08 0a10 	vmov	s16, r0
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	dd05      	ble.n	800753a <_dtoa_r+0x82a>
 800752e:	4631      	mov	r1, r6
 8007530:	461a      	mov	r2, r3
 8007532:	4620      	mov	r0, r4
 8007534:	f000 fc06 	bl	8007d44 <__lshift>
 8007538:	4606      	mov	r6, r0
 800753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d06e      	beq.n	800761e <_dtoa_r+0x90e>
 8007540:	ee18 0a10 	vmov	r0, s16
 8007544:	4631      	mov	r1, r6
 8007546:	f000 fc6d 	bl	8007e24 <__mcmp>
 800754a:	2800      	cmp	r0, #0
 800754c:	da67      	bge.n	800761e <_dtoa_r+0x90e>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	3b01      	subs	r3, #1
 8007552:	ee18 1a10 	vmov	r1, s16
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	220a      	movs	r2, #10
 800755a:	2300      	movs	r3, #0
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fa41 	bl	80079e4 <__multadd>
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	ee08 0a10 	vmov	s16, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 81b1 	beq.w	80078d0 <_dtoa_r+0xbc0>
 800756e:	2300      	movs	r3, #0
 8007570:	4639      	mov	r1, r7
 8007572:	220a      	movs	r2, #10
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fa35 	bl	80079e4 <__multadd>
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	4607      	mov	r7, r0
 8007580:	f300 808e 	bgt.w	80076a0 <_dtoa_r+0x990>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	2b02      	cmp	r3, #2
 8007588:	dc51      	bgt.n	800762e <_dtoa_r+0x91e>
 800758a:	e089      	b.n	80076a0 <_dtoa_r+0x990>
 800758c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800758e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007592:	e74b      	b.n	800742c <_dtoa_r+0x71c>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	1e5e      	subs	r6, r3, #1
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	42b3      	cmp	r3, r6
 800759c:	bfbf      	itttt	lt
 800759e:	9b07      	ldrlt	r3, [sp, #28]
 80075a0:	9607      	strlt	r6, [sp, #28]
 80075a2:	1af2      	sublt	r2, r6, r3
 80075a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80075a6:	bfb6      	itet	lt
 80075a8:	189b      	addlt	r3, r3, r2
 80075aa:	1b9e      	subge	r6, r3, r6
 80075ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	bfb8      	it	lt
 80075b2:	2600      	movlt	r6, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfb7      	itett	lt
 80075b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80075bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80075c0:	1a9d      	sublt	r5, r3, r2
 80075c2:	2300      	movlt	r3, #0
 80075c4:	e734      	b.n	8007430 <_dtoa_r+0x720>
 80075c6:	9e07      	ldr	r6, [sp, #28]
 80075c8:	9d04      	ldr	r5, [sp, #16]
 80075ca:	9f08      	ldr	r7, [sp, #32]
 80075cc:	e73b      	b.n	8007446 <_dtoa_r+0x736>
 80075ce:	9a07      	ldr	r2, [sp, #28]
 80075d0:	e767      	b.n	80074a2 <_dtoa_r+0x792>
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	dc18      	bgt.n	800760a <_dtoa_r+0x8fa>
 80075d8:	f1ba 0f00 	cmp.w	sl, #0
 80075dc:	d115      	bne.n	800760a <_dtoa_r+0x8fa>
 80075de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075e2:	b993      	cbnz	r3, 800760a <_dtoa_r+0x8fa>
 80075e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075e8:	0d1b      	lsrs	r3, r3, #20
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	b183      	cbz	r3, 8007610 <_dtoa_r+0x900>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	9b05      	ldr	r3, [sp, #20]
 80075f6:	3301      	adds	r3, #1
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	f04f 0801 	mov.w	r8, #1
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	f47f af6a 	bne.w	80074da <_dtoa_r+0x7ca>
 8007606:	2001      	movs	r0, #1
 8007608:	e76f      	b.n	80074ea <_dtoa_r+0x7da>
 800760a:	f04f 0800 	mov.w	r8, #0
 800760e:	e7f6      	b.n	80075fe <_dtoa_r+0x8ee>
 8007610:	4698      	mov	r8, r3
 8007612:	e7f4      	b.n	80075fe <_dtoa_r+0x8ee>
 8007614:	f43f af7d 	beq.w	8007512 <_dtoa_r+0x802>
 8007618:	4618      	mov	r0, r3
 800761a:	301c      	adds	r0, #28
 800761c:	e772      	b.n	8007504 <_dtoa_r+0x7f4>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	dc37      	bgt.n	8007694 <_dtoa_r+0x984>
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	2b02      	cmp	r3, #2
 8007628:	dd34      	ble.n	8007694 <_dtoa_r+0x984>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	9302      	str	r3, [sp, #8]
 800762e:	9b02      	ldr	r3, [sp, #8]
 8007630:	b96b      	cbnz	r3, 800764e <_dtoa_r+0x93e>
 8007632:	4631      	mov	r1, r6
 8007634:	2205      	movs	r2, #5
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f9d4 	bl	80079e4 <__multadd>
 800763c:	4601      	mov	r1, r0
 800763e:	4606      	mov	r6, r0
 8007640:	ee18 0a10 	vmov	r0, s16
 8007644:	f000 fbee 	bl	8007e24 <__mcmp>
 8007648:	2800      	cmp	r0, #0
 800764a:	f73f adbb 	bgt.w	80071c4 <_dtoa_r+0x4b4>
 800764e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007650:	9d01      	ldr	r5, [sp, #4]
 8007652:	43db      	mvns	r3, r3
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	4631      	mov	r1, r6
 800765c:	4620      	mov	r0, r4
 800765e:	f000 f99f 	bl	80079a0 <_Bfree>
 8007662:	2f00      	cmp	r7, #0
 8007664:	f43f aea4 	beq.w	80073b0 <_dtoa_r+0x6a0>
 8007668:	f1b8 0f00 	cmp.w	r8, #0
 800766c:	d005      	beq.n	800767a <_dtoa_r+0x96a>
 800766e:	45b8      	cmp	r8, r7
 8007670:	d003      	beq.n	800767a <_dtoa_r+0x96a>
 8007672:	4641      	mov	r1, r8
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f993 	bl	80079a0 <_Bfree>
 800767a:	4639      	mov	r1, r7
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f98f 	bl	80079a0 <_Bfree>
 8007682:	e695      	b.n	80073b0 <_dtoa_r+0x6a0>
 8007684:	2600      	movs	r6, #0
 8007686:	4637      	mov	r7, r6
 8007688:	e7e1      	b.n	800764e <_dtoa_r+0x93e>
 800768a:	9700      	str	r7, [sp, #0]
 800768c:	4637      	mov	r7, r6
 800768e:	e599      	b.n	80071c4 <_dtoa_r+0x4b4>
 8007690:	40240000 	.word	0x40240000
 8007694:	9b08      	ldr	r3, [sp, #32]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80ca 	beq.w	8007830 <_dtoa_r+0xb20>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	9302      	str	r3, [sp, #8]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	dd05      	ble.n	80076b0 <_dtoa_r+0x9a0>
 80076a4:	4639      	mov	r1, r7
 80076a6:	462a      	mov	r2, r5
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fb4b 	bl	8007d44 <__lshift>
 80076ae:	4607      	mov	r7, r0
 80076b0:	f1b8 0f00 	cmp.w	r8, #0
 80076b4:	d05b      	beq.n	800776e <_dtoa_r+0xa5e>
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 f931 	bl	8007920 <_Balloc>
 80076be:	4605      	mov	r5, r0
 80076c0:	b928      	cbnz	r0, 80076ce <_dtoa_r+0x9be>
 80076c2:	4b87      	ldr	r3, [pc, #540]	; (80078e0 <_dtoa_r+0xbd0>)
 80076c4:	4602      	mov	r2, r0
 80076c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076ca:	f7ff bb3b 	b.w	8006d44 <_dtoa_r+0x34>
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	3202      	adds	r2, #2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	f107 010c 	add.w	r1, r7, #12
 80076d8:	300c      	adds	r0, #12
 80076da:	f000 f913 	bl	8007904 <memcpy>
 80076de:	2201      	movs	r2, #1
 80076e0:	4629      	mov	r1, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fb2e 	bl	8007d44 <__lshift>
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	f103 0901 	add.w	r9, r3, #1
 80076ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	f00a 0301 	and.w	r3, sl, #1
 80076fa:	46b8      	mov	r8, r7
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	4607      	mov	r7, r0
 8007700:	4631      	mov	r1, r6
 8007702:	ee18 0a10 	vmov	r0, s16
 8007706:	f7ff fa75 	bl	8006bf4 <quorem>
 800770a:	4641      	mov	r1, r8
 800770c:	9002      	str	r0, [sp, #8]
 800770e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007712:	ee18 0a10 	vmov	r0, s16
 8007716:	f000 fb85 	bl	8007e24 <__mcmp>
 800771a:	463a      	mov	r2, r7
 800771c:	9003      	str	r0, [sp, #12]
 800771e:	4631      	mov	r1, r6
 8007720:	4620      	mov	r0, r4
 8007722:	f000 fb9b 	bl	8007e5c <__mdiff>
 8007726:	68c2      	ldr	r2, [r0, #12]
 8007728:	f109 3bff 	add.w	fp, r9, #4294967295
 800772c:	4605      	mov	r5, r0
 800772e:	bb02      	cbnz	r2, 8007772 <_dtoa_r+0xa62>
 8007730:	4601      	mov	r1, r0
 8007732:	ee18 0a10 	vmov	r0, s16
 8007736:	f000 fb75 	bl	8007e24 <__mcmp>
 800773a:	4602      	mov	r2, r0
 800773c:	4629      	mov	r1, r5
 800773e:	4620      	mov	r0, r4
 8007740:	9207      	str	r2, [sp, #28]
 8007742:	f000 f92d 	bl	80079a0 <_Bfree>
 8007746:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800774a:	ea43 0102 	orr.w	r1, r3, r2
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	430b      	orrs	r3, r1
 8007752:	464d      	mov	r5, r9
 8007754:	d10f      	bne.n	8007776 <_dtoa_r+0xa66>
 8007756:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800775a:	d02a      	beq.n	80077b2 <_dtoa_r+0xaa2>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd02      	ble.n	8007768 <_dtoa_r+0xa58>
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007768:	f88b a000 	strb.w	sl, [fp]
 800776c:	e775      	b.n	800765a <_dtoa_r+0x94a>
 800776e:	4638      	mov	r0, r7
 8007770:	e7ba      	b.n	80076e8 <_dtoa_r+0x9d8>
 8007772:	2201      	movs	r2, #1
 8007774:	e7e2      	b.n	800773c <_dtoa_r+0xa2c>
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db04      	blt.n	8007786 <_dtoa_r+0xa76>
 800777c:	9906      	ldr	r1, [sp, #24]
 800777e:	430b      	orrs	r3, r1
 8007780:	9904      	ldr	r1, [sp, #16]
 8007782:	430b      	orrs	r3, r1
 8007784:	d122      	bne.n	80077cc <_dtoa_r+0xabc>
 8007786:	2a00      	cmp	r2, #0
 8007788:	ddee      	ble.n	8007768 <_dtoa_r+0xa58>
 800778a:	ee18 1a10 	vmov	r1, s16
 800778e:	2201      	movs	r2, #1
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fad7 	bl	8007d44 <__lshift>
 8007796:	4631      	mov	r1, r6
 8007798:	ee08 0a10 	vmov	s16, r0
 800779c:	f000 fb42 	bl	8007e24 <__mcmp>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	dc03      	bgt.n	80077ac <_dtoa_r+0xa9c>
 80077a4:	d1e0      	bne.n	8007768 <_dtoa_r+0xa58>
 80077a6:	f01a 0f01 	tst.w	sl, #1
 80077aa:	d0dd      	beq.n	8007768 <_dtoa_r+0xa58>
 80077ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077b0:	d1d7      	bne.n	8007762 <_dtoa_r+0xa52>
 80077b2:	2339      	movs	r3, #57	; 0x39
 80077b4:	f88b 3000 	strb.w	r3, [fp]
 80077b8:	462b      	mov	r3, r5
 80077ba:	461d      	mov	r5, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077c2:	2a39      	cmp	r2, #57	; 0x39
 80077c4:	d071      	beq.n	80078aa <_dtoa_r+0xb9a>
 80077c6:	3201      	adds	r2, #1
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e746      	b.n	800765a <_dtoa_r+0x94a>
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	dd07      	ble.n	80077e0 <_dtoa_r+0xad0>
 80077d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077d4:	d0ed      	beq.n	80077b2 <_dtoa_r+0xaa2>
 80077d6:	f10a 0301 	add.w	r3, sl, #1
 80077da:	f88b 3000 	strb.w	r3, [fp]
 80077de:	e73c      	b.n	800765a <_dtoa_r+0x94a>
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80077e6:	4599      	cmp	r9, r3
 80077e8:	d047      	beq.n	800787a <_dtoa_r+0xb6a>
 80077ea:	ee18 1a10 	vmov	r1, s16
 80077ee:	2300      	movs	r3, #0
 80077f0:	220a      	movs	r2, #10
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 f8f6 	bl	80079e4 <__multadd>
 80077f8:	45b8      	cmp	r8, r7
 80077fa:	ee08 0a10 	vmov	s16, r0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	f04f 020a 	mov.w	r2, #10
 8007806:	4641      	mov	r1, r8
 8007808:	4620      	mov	r0, r4
 800780a:	d106      	bne.n	800781a <_dtoa_r+0xb0a>
 800780c:	f000 f8ea 	bl	80079e4 <__multadd>
 8007810:	4680      	mov	r8, r0
 8007812:	4607      	mov	r7, r0
 8007814:	f109 0901 	add.w	r9, r9, #1
 8007818:	e772      	b.n	8007700 <_dtoa_r+0x9f0>
 800781a:	f000 f8e3 	bl	80079e4 <__multadd>
 800781e:	4639      	mov	r1, r7
 8007820:	4680      	mov	r8, r0
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f8dc 	bl	80079e4 <__multadd>
 800782c:	4607      	mov	r7, r0
 800782e:	e7f1      	b.n	8007814 <_dtoa_r+0xb04>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	9d01      	ldr	r5, [sp, #4]
 8007836:	ee18 0a10 	vmov	r0, s16
 800783a:	4631      	mov	r1, r6
 800783c:	f7ff f9da 	bl	8006bf4 <quorem>
 8007840:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	f805 ab01 	strb.w	sl, [r5], #1
 800784a:	1aea      	subs	r2, r5, r3
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	4293      	cmp	r3, r2
 8007850:	dd09      	ble.n	8007866 <_dtoa_r+0xb56>
 8007852:	ee18 1a10 	vmov	r1, s16
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f8c2 	bl	80079e4 <__multadd>
 8007860:	ee08 0a10 	vmov	s16, r0
 8007864:	e7e7      	b.n	8007836 <_dtoa_r+0xb26>
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	bfc8      	it	gt
 800786c:	461d      	movgt	r5, r3
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	bfd8      	it	le
 8007872:	2501      	movle	r5, #1
 8007874:	441d      	add	r5, r3
 8007876:	f04f 0800 	mov.w	r8, #0
 800787a:	ee18 1a10 	vmov	r1, s16
 800787e:	2201      	movs	r2, #1
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fa5f 	bl	8007d44 <__lshift>
 8007886:	4631      	mov	r1, r6
 8007888:	ee08 0a10 	vmov	s16, r0
 800788c:	f000 faca 	bl	8007e24 <__mcmp>
 8007890:	2800      	cmp	r0, #0
 8007892:	dc91      	bgt.n	80077b8 <_dtoa_r+0xaa8>
 8007894:	d102      	bne.n	800789c <_dtoa_r+0xb8c>
 8007896:	f01a 0f01 	tst.w	sl, #1
 800789a:	d18d      	bne.n	80077b8 <_dtoa_r+0xaa8>
 800789c:	462b      	mov	r3, r5
 800789e:	461d      	mov	r5, r3
 80078a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a4:	2a30      	cmp	r2, #48	; 0x30
 80078a6:	d0fa      	beq.n	800789e <_dtoa_r+0xb8e>
 80078a8:	e6d7      	b.n	800765a <_dtoa_r+0x94a>
 80078aa:	9a01      	ldr	r2, [sp, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d184      	bne.n	80077ba <_dtoa_r+0xaaa>
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	2331      	movs	r3, #49	; 0x31
 80078b8:	7013      	strb	r3, [r2, #0]
 80078ba:	e6ce      	b.n	800765a <_dtoa_r+0x94a>
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <_dtoa_r+0xbd4>)
 80078be:	f7ff ba95 	b.w	8006dec <_dtoa_r+0xdc>
 80078c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f47f aa6e 	bne.w	8006da6 <_dtoa_r+0x96>
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <_dtoa_r+0xbd8>)
 80078cc:	f7ff ba8e 	b.w	8006dec <_dtoa_r+0xdc>
 80078d0:	9b02      	ldr	r3, [sp, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dcae      	bgt.n	8007834 <_dtoa_r+0xb24>
 80078d6:	9b06      	ldr	r3, [sp, #24]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	f73f aea8 	bgt.w	800762e <_dtoa_r+0x91e>
 80078de:	e7a9      	b.n	8007834 <_dtoa_r+0xb24>
 80078e0:	08008e3f 	.word	0x08008e3f
 80078e4:	08008d9c 	.word	0x08008d9c
 80078e8:	08008dc0 	.word	0x08008dc0

080078ec <_localeconv_r>:
 80078ec:	4800      	ldr	r0, [pc, #0]	; (80078f0 <_localeconv_r+0x4>)
 80078ee:	4770      	bx	lr
 80078f0:	20000160 	.word	0x20000160

080078f4 <malloc>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <malloc+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 bc17 	b.w	800812c <_malloc_r>
 80078fe:	bf00      	nop
 8007900:	2000000c 	.word	0x2000000c

08007904 <memcpy>:
 8007904:	440a      	add	r2, r1
 8007906:	4291      	cmp	r1, r2
 8007908:	f100 33ff 	add.w	r3, r0, #4294967295
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	4770      	bx	lr
 8007910:	b510      	push	{r4, lr}
 8007912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791a:	4291      	cmp	r1, r2
 800791c:	d1f9      	bne.n	8007912 <memcpy+0xe>
 800791e:	bd10      	pop	{r4, pc}

08007920 <_Balloc>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007924:	4604      	mov	r4, r0
 8007926:	460d      	mov	r5, r1
 8007928:	b976      	cbnz	r6, 8007948 <_Balloc+0x28>
 800792a:	2010      	movs	r0, #16
 800792c:	f7ff ffe2 	bl	80078f4 <malloc>
 8007930:	4602      	mov	r2, r0
 8007932:	6260      	str	r0, [r4, #36]	; 0x24
 8007934:	b920      	cbnz	r0, 8007940 <_Balloc+0x20>
 8007936:	4b18      	ldr	r3, [pc, #96]	; (8007998 <_Balloc+0x78>)
 8007938:	4818      	ldr	r0, [pc, #96]	; (800799c <_Balloc+0x7c>)
 800793a:	2166      	movs	r1, #102	; 0x66
 800793c:	f000 fc7a 	bl	8008234 <__assert_func>
 8007940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007944:	6006      	str	r6, [r0, #0]
 8007946:	60c6      	str	r6, [r0, #12]
 8007948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800794a:	68f3      	ldr	r3, [r6, #12]
 800794c:	b183      	cbz	r3, 8007970 <_Balloc+0x50>
 800794e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007956:	b9b8      	cbnz	r0, 8007988 <_Balloc+0x68>
 8007958:	2101      	movs	r1, #1
 800795a:	fa01 f605 	lsl.w	r6, r1, r5
 800795e:	1d72      	adds	r2, r6, #5
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	4620      	mov	r0, r4
 8007964:	f000 fb60 	bl	8008028 <_calloc_r>
 8007968:	b160      	cbz	r0, 8007984 <_Balloc+0x64>
 800796a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800796e:	e00e      	b.n	800798e <_Balloc+0x6e>
 8007970:	2221      	movs	r2, #33	; 0x21
 8007972:	2104      	movs	r1, #4
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fb57 	bl	8008028 <_calloc_r>
 800797a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797c:	60f0      	str	r0, [r6, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e4      	bne.n	800794e <_Balloc+0x2e>
 8007984:	2000      	movs	r0, #0
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	6802      	ldr	r2, [r0, #0]
 800798a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800798e:	2300      	movs	r3, #0
 8007990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007994:	e7f7      	b.n	8007986 <_Balloc+0x66>
 8007996:	bf00      	nop
 8007998:	08008dcd 	.word	0x08008dcd
 800799c:	08008e50 	.word	0x08008e50

080079a0 <_Bfree>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b976      	cbnz	r6, 80079c8 <_Bfree+0x28>
 80079aa:	2010      	movs	r0, #16
 80079ac:	f7ff ffa2 	bl	80078f4 <malloc>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6268      	str	r0, [r5, #36]	; 0x24
 80079b4:	b920      	cbnz	r0, 80079c0 <_Bfree+0x20>
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <_Bfree+0x3c>)
 80079b8:	4809      	ldr	r0, [pc, #36]	; (80079e0 <_Bfree+0x40>)
 80079ba:	218a      	movs	r1, #138	; 0x8a
 80079bc:	f000 fc3a 	bl	8008234 <__assert_func>
 80079c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c4:	6006      	str	r6, [r0, #0]
 80079c6:	60c6      	str	r6, [r0, #12]
 80079c8:	b13c      	cbz	r4, 80079da <_Bfree+0x3a>
 80079ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079cc:	6862      	ldr	r2, [r4, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d4:	6021      	str	r1, [r4, #0]
 80079d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	08008dcd 	.word	0x08008dcd
 80079e0:	08008e50 	.word	0x08008e50

080079e4 <__multadd>:
 80079e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e8:	690d      	ldr	r5, [r1, #16]
 80079ea:	4607      	mov	r7, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	461e      	mov	r6, r3
 80079f0:	f101 0c14 	add.w	ip, r1, #20
 80079f4:	2000      	movs	r0, #0
 80079f6:	f8dc 3000 	ldr.w	r3, [ip]
 80079fa:	b299      	uxth	r1, r3
 80079fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007a00:	0c1e      	lsrs	r6, r3, #16
 8007a02:	0c0b      	lsrs	r3, r1, #16
 8007a04:	fb02 3306 	mla	r3, r2, r6, r3
 8007a08:	b289      	uxth	r1, r1
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a10:	4285      	cmp	r5, r0
 8007a12:	f84c 1b04 	str.w	r1, [ip], #4
 8007a16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a1a:	dcec      	bgt.n	80079f6 <__multadd+0x12>
 8007a1c:	b30e      	cbz	r6, 8007a62 <__multadd+0x7e>
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	dc19      	bgt.n	8007a58 <__multadd+0x74>
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	4638      	mov	r0, r7
 8007a28:	3101      	adds	r1, #1
 8007a2a:	f7ff ff79 	bl	8007920 <_Balloc>
 8007a2e:	4680      	mov	r8, r0
 8007a30:	b928      	cbnz	r0, 8007a3e <__multadd+0x5a>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <__multadd+0x84>)
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <__multadd+0x88>)
 8007a38:	21b5      	movs	r1, #181	; 0xb5
 8007a3a:	f000 fbfb 	bl	8008234 <__assert_func>
 8007a3e:	6922      	ldr	r2, [r4, #16]
 8007a40:	3202      	adds	r2, #2
 8007a42:	f104 010c 	add.w	r1, r4, #12
 8007a46:	0092      	lsls	r2, r2, #2
 8007a48:	300c      	adds	r0, #12
 8007a4a:	f7ff ff5b 	bl	8007904 <memcpy>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7ff ffa5 	bl	80079a0 <_Bfree>
 8007a56:	4644      	mov	r4, r8
 8007a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	615e      	str	r6, [r3, #20]
 8007a60:	6125      	str	r5, [r4, #16]
 8007a62:	4620      	mov	r0, r4
 8007a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a68:	08008e3f 	.word	0x08008e3f
 8007a6c:	08008e50 	.word	0x08008e50

08007a70 <__hi0bits>:
 8007a70:	0c03      	lsrs	r3, r0, #16
 8007a72:	041b      	lsls	r3, r3, #16
 8007a74:	b9d3      	cbnz	r3, 8007aac <__hi0bits+0x3c>
 8007a76:	0400      	lsls	r0, r0, #16
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a7e:	bf04      	itt	eq
 8007a80:	0200      	lsleq	r0, r0, #8
 8007a82:	3308      	addeq	r3, #8
 8007a84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a88:	bf04      	itt	eq
 8007a8a:	0100      	lsleq	r0, r0, #4
 8007a8c:	3304      	addeq	r3, #4
 8007a8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a92:	bf04      	itt	eq
 8007a94:	0080      	lsleq	r0, r0, #2
 8007a96:	3302      	addeq	r3, #2
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	db05      	blt.n	8007aa8 <__hi0bits+0x38>
 8007a9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007aa0:	f103 0301 	add.w	r3, r3, #1
 8007aa4:	bf08      	it	eq
 8007aa6:	2320      	moveq	r3, #32
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	4770      	bx	lr
 8007aac:	2300      	movs	r3, #0
 8007aae:	e7e4      	b.n	8007a7a <__hi0bits+0xa>

08007ab0 <__lo0bits>:
 8007ab0:	6803      	ldr	r3, [r0, #0]
 8007ab2:	f013 0207 	ands.w	r2, r3, #7
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	d00b      	beq.n	8007ad2 <__lo0bits+0x22>
 8007aba:	07da      	lsls	r2, r3, #31
 8007abc:	d423      	bmi.n	8007b06 <__lo0bits+0x56>
 8007abe:	0798      	lsls	r0, r3, #30
 8007ac0:	bf49      	itett	mi
 8007ac2:	085b      	lsrmi	r3, r3, #1
 8007ac4:	089b      	lsrpl	r3, r3, #2
 8007ac6:	2001      	movmi	r0, #1
 8007ac8:	600b      	strmi	r3, [r1, #0]
 8007aca:	bf5c      	itt	pl
 8007acc:	600b      	strpl	r3, [r1, #0]
 8007ace:	2002      	movpl	r0, #2
 8007ad0:	4770      	bx	lr
 8007ad2:	b298      	uxth	r0, r3
 8007ad4:	b9a8      	cbnz	r0, 8007b02 <__lo0bits+0x52>
 8007ad6:	0c1b      	lsrs	r3, r3, #16
 8007ad8:	2010      	movs	r0, #16
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	b90a      	cbnz	r2, 8007ae2 <__lo0bits+0x32>
 8007ade:	3008      	adds	r0, #8
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	071a      	lsls	r2, r3, #28
 8007ae4:	bf04      	itt	eq
 8007ae6:	091b      	lsreq	r3, r3, #4
 8007ae8:	3004      	addeq	r0, #4
 8007aea:	079a      	lsls	r2, r3, #30
 8007aec:	bf04      	itt	eq
 8007aee:	089b      	lsreq	r3, r3, #2
 8007af0:	3002      	addeq	r0, #2
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d403      	bmi.n	8007afe <__lo0bits+0x4e>
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	f100 0001 	add.w	r0, r0, #1
 8007afc:	d005      	beq.n	8007b0a <__lo0bits+0x5a>
 8007afe:	600b      	str	r3, [r1, #0]
 8007b00:	4770      	bx	lr
 8007b02:	4610      	mov	r0, r2
 8007b04:	e7e9      	b.n	8007ada <__lo0bits+0x2a>
 8007b06:	2000      	movs	r0, #0
 8007b08:	4770      	bx	lr
 8007b0a:	2020      	movs	r0, #32
 8007b0c:	4770      	bx	lr
	...

08007b10 <__i2b>:
 8007b10:	b510      	push	{r4, lr}
 8007b12:	460c      	mov	r4, r1
 8007b14:	2101      	movs	r1, #1
 8007b16:	f7ff ff03 	bl	8007920 <_Balloc>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	b928      	cbnz	r0, 8007b2a <__i2b+0x1a>
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <__i2b+0x24>)
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <__i2b+0x28>)
 8007b22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b26:	f000 fb85 	bl	8008234 <__assert_func>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	6144      	str	r4, [r0, #20]
 8007b2e:	6103      	str	r3, [r0, #16]
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	bf00      	nop
 8007b34:	08008e3f 	.word	0x08008e3f
 8007b38:	08008e50 	.word	0x08008e50

08007b3c <__multiply>:
 8007b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	4691      	mov	r9, r2
 8007b42:	690a      	ldr	r2, [r1, #16]
 8007b44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	bfb8      	it	lt
 8007b4c:	460b      	movlt	r3, r1
 8007b4e:	460c      	mov	r4, r1
 8007b50:	bfbc      	itt	lt
 8007b52:	464c      	movlt	r4, r9
 8007b54:	4699      	movlt	r9, r3
 8007b56:	6927      	ldr	r7, [r4, #16]
 8007b58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b5c:	68a3      	ldr	r3, [r4, #8]
 8007b5e:	6861      	ldr	r1, [r4, #4]
 8007b60:	eb07 060a 	add.w	r6, r7, sl
 8007b64:	42b3      	cmp	r3, r6
 8007b66:	b085      	sub	sp, #20
 8007b68:	bfb8      	it	lt
 8007b6a:	3101      	addlt	r1, #1
 8007b6c:	f7ff fed8 	bl	8007920 <_Balloc>
 8007b70:	b930      	cbnz	r0, 8007b80 <__multiply+0x44>
 8007b72:	4602      	mov	r2, r0
 8007b74:	4b44      	ldr	r3, [pc, #272]	; (8007c88 <__multiply+0x14c>)
 8007b76:	4845      	ldr	r0, [pc, #276]	; (8007c8c <__multiply+0x150>)
 8007b78:	f240 115d 	movw	r1, #349	; 0x15d
 8007b7c:	f000 fb5a 	bl	8008234 <__assert_func>
 8007b80:	f100 0514 	add.w	r5, r0, #20
 8007b84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b88:	462b      	mov	r3, r5
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4543      	cmp	r3, r8
 8007b8e:	d321      	bcc.n	8007bd4 <__multiply+0x98>
 8007b90:	f104 0314 	add.w	r3, r4, #20
 8007b94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b98:	f109 0314 	add.w	r3, r9, #20
 8007b9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ba0:	9202      	str	r2, [sp, #8]
 8007ba2:	1b3a      	subs	r2, r7, r4
 8007ba4:	3a15      	subs	r2, #21
 8007ba6:	f022 0203 	bic.w	r2, r2, #3
 8007baa:	3204      	adds	r2, #4
 8007bac:	f104 0115 	add.w	r1, r4, #21
 8007bb0:	428f      	cmp	r7, r1
 8007bb2:	bf38      	it	cc
 8007bb4:	2204      	movcc	r2, #4
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	9a02      	ldr	r2, [sp, #8]
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d80c      	bhi.n	8007bda <__multiply+0x9e>
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	dd03      	ble.n	8007bcc <__multiply+0x90>
 8007bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05a      	beq.n	8007c82 <__multiply+0x146>
 8007bcc:	6106      	str	r6, [r0, #16]
 8007bce:	b005      	add	sp, #20
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	f843 2b04 	str.w	r2, [r3], #4
 8007bd8:	e7d8      	b.n	8007b8c <__multiply+0x50>
 8007bda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bde:	f1ba 0f00 	cmp.w	sl, #0
 8007be2:	d024      	beq.n	8007c2e <__multiply+0xf2>
 8007be4:	f104 0e14 	add.w	lr, r4, #20
 8007be8:	46a9      	mov	r9, r5
 8007bea:	f04f 0c00 	mov.w	ip, #0
 8007bee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bf2:	f8d9 1000 	ldr.w	r1, [r9]
 8007bf6:	fa1f fb82 	uxth.w	fp, r2
 8007bfa:	b289      	uxth	r1, r1
 8007bfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c04:	f8d9 2000 	ldr.w	r2, [r9]
 8007c08:	4461      	add	r1, ip
 8007c0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c16:	b289      	uxth	r1, r1
 8007c18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c1c:	4577      	cmp	r7, lr
 8007c1e:	f849 1b04 	str.w	r1, [r9], #4
 8007c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c26:	d8e2      	bhi.n	8007bee <__multiply+0xb2>
 8007c28:	9a01      	ldr	r2, [sp, #4]
 8007c2a:	f845 c002 	str.w	ip, [r5, r2]
 8007c2e:	9a03      	ldr	r2, [sp, #12]
 8007c30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c34:	3304      	adds	r3, #4
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	d020      	beq.n	8007c7e <__multiply+0x142>
 8007c3c:	6829      	ldr	r1, [r5, #0]
 8007c3e:	f104 0c14 	add.w	ip, r4, #20
 8007c42:	46ae      	mov	lr, r5
 8007c44:	f04f 0a00 	mov.w	sl, #0
 8007c48:	f8bc b000 	ldrh.w	fp, [ip]
 8007c4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c50:	fb09 220b 	mla	r2, r9, fp, r2
 8007c54:	4492      	add	sl, r2
 8007c56:	b289      	uxth	r1, r1
 8007c58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c64:	f8be 1000 	ldrh.w	r1, [lr]
 8007c68:	0c12      	lsrs	r2, r2, #16
 8007c6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007c6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c72:	4567      	cmp	r7, ip
 8007c74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c78:	d8e6      	bhi.n	8007c48 <__multiply+0x10c>
 8007c7a:	9a01      	ldr	r2, [sp, #4]
 8007c7c:	50a9      	str	r1, [r5, r2]
 8007c7e:	3504      	adds	r5, #4
 8007c80:	e79a      	b.n	8007bb8 <__multiply+0x7c>
 8007c82:	3e01      	subs	r6, #1
 8007c84:	e79c      	b.n	8007bc0 <__multiply+0x84>
 8007c86:	bf00      	nop
 8007c88:	08008e3f 	.word	0x08008e3f
 8007c8c:	08008e50 	.word	0x08008e50

08007c90 <__pow5mult>:
 8007c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c94:	4615      	mov	r5, r2
 8007c96:	f012 0203 	ands.w	r2, r2, #3
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	d007      	beq.n	8007cb0 <__pow5mult+0x20>
 8007ca0:	4c25      	ldr	r4, [pc, #148]	; (8007d38 <__pow5mult+0xa8>)
 8007ca2:	3a01      	subs	r2, #1
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007caa:	f7ff fe9b 	bl	80079e4 <__multadd>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	10ad      	asrs	r5, r5, #2
 8007cb2:	d03d      	beq.n	8007d30 <__pow5mult+0xa0>
 8007cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cb6:	b97c      	cbnz	r4, 8007cd8 <__pow5mult+0x48>
 8007cb8:	2010      	movs	r0, #16
 8007cba:	f7ff fe1b 	bl	80078f4 <malloc>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8007cc2:	b928      	cbnz	r0, 8007cd0 <__pow5mult+0x40>
 8007cc4:	4b1d      	ldr	r3, [pc, #116]	; (8007d3c <__pow5mult+0xac>)
 8007cc6:	481e      	ldr	r0, [pc, #120]	; (8007d40 <__pow5mult+0xb0>)
 8007cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ccc:	f000 fab2 	bl	8008234 <__assert_func>
 8007cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cd4:	6004      	str	r4, [r0, #0]
 8007cd6:	60c4      	str	r4, [r0, #12]
 8007cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ce0:	b94c      	cbnz	r4, 8007cf6 <__pow5mult+0x66>
 8007ce2:	f240 2171 	movw	r1, #625	; 0x271
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff12 	bl	8007b10 <__i2b>
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	6003      	str	r3, [r0, #0]
 8007cf6:	f04f 0900 	mov.w	r9, #0
 8007cfa:	07eb      	lsls	r3, r5, #31
 8007cfc:	d50a      	bpl.n	8007d14 <__pow5mult+0x84>
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4622      	mov	r2, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ff1a 	bl	8007b3c <__multiply>
 8007d08:	4639      	mov	r1, r7
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff fe47 	bl	80079a0 <_Bfree>
 8007d12:	4647      	mov	r7, r8
 8007d14:	106d      	asrs	r5, r5, #1
 8007d16:	d00b      	beq.n	8007d30 <__pow5mult+0xa0>
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	b938      	cbnz	r0, 8007d2c <__pow5mult+0x9c>
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff ff0b 	bl	8007b3c <__multiply>
 8007d26:	6020      	str	r0, [r4, #0]
 8007d28:	f8c0 9000 	str.w	r9, [r0]
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	e7e4      	b.n	8007cfa <__pow5mult+0x6a>
 8007d30:	4638      	mov	r0, r7
 8007d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d36:	bf00      	nop
 8007d38:	08008fa0 	.word	0x08008fa0
 8007d3c:	08008dcd 	.word	0x08008dcd
 8007d40:	08008e50 	.word	0x08008e50

08007d44 <__lshift>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	6849      	ldr	r1, [r1, #4]
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	4607      	mov	r7, r0
 8007d56:	4691      	mov	r9, r2
 8007d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d5c:	f108 0601 	add.w	r6, r8, #1
 8007d60:	42b3      	cmp	r3, r6
 8007d62:	db0b      	blt.n	8007d7c <__lshift+0x38>
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff fddb 	bl	8007920 <_Balloc>
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	b948      	cbnz	r0, 8007d82 <__lshift+0x3e>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	4b2a      	ldr	r3, [pc, #168]	; (8007e1c <__lshift+0xd8>)
 8007d72:	482b      	ldr	r0, [pc, #172]	; (8007e20 <__lshift+0xdc>)
 8007d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d78:	f000 fa5c 	bl	8008234 <__assert_func>
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	e7ee      	b.n	8007d60 <__lshift+0x1c>
 8007d82:	2300      	movs	r3, #0
 8007d84:	f100 0114 	add.w	r1, r0, #20
 8007d88:	f100 0210 	add.w	r2, r0, #16
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	4553      	cmp	r3, sl
 8007d90:	db37      	blt.n	8007e02 <__lshift+0xbe>
 8007d92:	6920      	ldr	r0, [r4, #16]
 8007d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d98:	f104 0314 	add.w	r3, r4, #20
 8007d9c:	f019 091f 	ands.w	r9, r9, #31
 8007da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007da4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007da8:	d02f      	beq.n	8007e0a <__lshift+0xc6>
 8007daa:	f1c9 0e20 	rsb	lr, r9, #32
 8007dae:	468a      	mov	sl, r1
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	fa02 f209 	lsl.w	r2, r2, r9
 8007dba:	ea42 020c 	orr.w	r2, r2, ip
 8007dbe:	f84a 2b04 	str.w	r2, [sl], #4
 8007dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc6:	4298      	cmp	r0, r3
 8007dc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007dcc:	d8f2      	bhi.n	8007db4 <__lshift+0x70>
 8007dce:	1b03      	subs	r3, r0, r4
 8007dd0:	3b15      	subs	r3, #21
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	f104 0215 	add.w	r2, r4, #21
 8007ddc:	4290      	cmp	r0, r2
 8007dde:	bf38      	it	cc
 8007de0:	2304      	movcc	r3, #4
 8007de2:	f841 c003 	str.w	ip, [r1, r3]
 8007de6:	f1bc 0f00 	cmp.w	ip, #0
 8007dea:	d001      	beq.n	8007df0 <__lshift+0xac>
 8007dec:	f108 0602 	add.w	r6, r8, #2
 8007df0:	3e01      	subs	r6, #1
 8007df2:	4638      	mov	r0, r7
 8007df4:	612e      	str	r6, [r5, #16]
 8007df6:	4621      	mov	r1, r4
 8007df8:	f7ff fdd2 	bl	80079a0 <_Bfree>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e06:	3301      	adds	r3, #1
 8007e08:	e7c1      	b.n	8007d8e <__lshift+0x4a>
 8007e0a:	3904      	subs	r1, #4
 8007e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e14:	4298      	cmp	r0, r3
 8007e16:	d8f9      	bhi.n	8007e0c <__lshift+0xc8>
 8007e18:	e7ea      	b.n	8007df0 <__lshift+0xac>
 8007e1a:	bf00      	nop
 8007e1c:	08008e3f 	.word	0x08008e3f
 8007e20:	08008e50 	.word	0x08008e50

08007e24 <__mcmp>:
 8007e24:	b530      	push	{r4, r5, lr}
 8007e26:	6902      	ldr	r2, [r0, #16]
 8007e28:	690c      	ldr	r4, [r1, #16]
 8007e2a:	1b12      	subs	r2, r2, r4
 8007e2c:	d10e      	bne.n	8007e4c <__mcmp+0x28>
 8007e2e:	f100 0314 	add.w	r3, r0, #20
 8007e32:	3114      	adds	r1, #20
 8007e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e44:	42a5      	cmp	r5, r4
 8007e46:	d003      	beq.n	8007e50 <__mcmp+0x2c>
 8007e48:	d305      	bcc.n	8007e56 <__mcmp+0x32>
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	4283      	cmp	r3, r0
 8007e52:	d3f3      	bcc.n	8007e3c <__mcmp+0x18>
 8007e54:	e7fa      	b.n	8007e4c <__mcmp+0x28>
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	e7f7      	b.n	8007e4c <__mcmp+0x28>

08007e5c <__mdiff>:
 8007e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	460c      	mov	r4, r1
 8007e62:	4606      	mov	r6, r0
 8007e64:	4611      	mov	r1, r2
 8007e66:	4620      	mov	r0, r4
 8007e68:	4690      	mov	r8, r2
 8007e6a:	f7ff ffdb 	bl	8007e24 <__mcmp>
 8007e6e:	1e05      	subs	r5, r0, #0
 8007e70:	d110      	bne.n	8007e94 <__mdiff+0x38>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff fd53 	bl	8007920 <_Balloc>
 8007e7a:	b930      	cbnz	r0, 8007e8a <__mdiff+0x2e>
 8007e7c:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <__mdiff+0x10c>)
 8007e7e:	4602      	mov	r2, r0
 8007e80:	f240 2132 	movw	r1, #562	; 0x232
 8007e84:	4839      	ldr	r0, [pc, #228]	; (8007f6c <__mdiff+0x110>)
 8007e86:	f000 f9d5 	bl	8008234 <__assert_func>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	bfa4      	itt	ge
 8007e96:	4643      	movge	r3, r8
 8007e98:	46a0      	movge	r8, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ea0:	bfa6      	itte	ge
 8007ea2:	461c      	movge	r4, r3
 8007ea4:	2500      	movge	r5, #0
 8007ea6:	2501      	movlt	r5, #1
 8007ea8:	f7ff fd3a 	bl	8007920 <_Balloc>
 8007eac:	b920      	cbnz	r0, 8007eb8 <__mdiff+0x5c>
 8007eae:	4b2e      	ldr	r3, [pc, #184]	; (8007f68 <__mdiff+0x10c>)
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007eb6:	e7e5      	b.n	8007e84 <__mdiff+0x28>
 8007eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ebc:	6926      	ldr	r6, [r4, #16]
 8007ebe:	60c5      	str	r5, [r0, #12]
 8007ec0:	f104 0914 	add.w	r9, r4, #20
 8007ec4:	f108 0514 	add.w	r5, r8, #20
 8007ec8:	f100 0e14 	add.w	lr, r0, #20
 8007ecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ed4:	f108 0210 	add.w	r2, r8, #16
 8007ed8:	46f2      	mov	sl, lr
 8007eda:	2100      	movs	r1, #0
 8007edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ee4:	fa1f f883 	uxth.w	r8, r3
 8007ee8:	fa11 f18b 	uxtah	r1, r1, fp
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	eba1 0808 	sub.w	r8, r1, r8
 8007ef2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ef6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007efa:	fa1f f888 	uxth.w	r8, r8
 8007efe:	1419      	asrs	r1, r3, #16
 8007f00:	454e      	cmp	r6, r9
 8007f02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f06:	f84a 3b04 	str.w	r3, [sl], #4
 8007f0a:	d8e7      	bhi.n	8007edc <__mdiff+0x80>
 8007f0c:	1b33      	subs	r3, r6, r4
 8007f0e:	3b15      	subs	r3, #21
 8007f10:	f023 0303 	bic.w	r3, r3, #3
 8007f14:	3304      	adds	r3, #4
 8007f16:	3415      	adds	r4, #21
 8007f18:	42a6      	cmp	r6, r4
 8007f1a:	bf38      	it	cc
 8007f1c:	2304      	movcc	r3, #4
 8007f1e:	441d      	add	r5, r3
 8007f20:	4473      	add	r3, lr
 8007f22:	469e      	mov	lr, r3
 8007f24:	462e      	mov	r6, r5
 8007f26:	4566      	cmp	r6, ip
 8007f28:	d30e      	bcc.n	8007f48 <__mdiff+0xec>
 8007f2a:	f10c 0203 	add.w	r2, ip, #3
 8007f2e:	1b52      	subs	r2, r2, r5
 8007f30:	f022 0203 	bic.w	r2, r2, #3
 8007f34:	3d03      	subs	r5, #3
 8007f36:	45ac      	cmp	ip, r5
 8007f38:	bf38      	it	cc
 8007f3a:	2200      	movcc	r2, #0
 8007f3c:	441a      	add	r2, r3
 8007f3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f42:	b17b      	cbz	r3, 8007f64 <__mdiff+0x108>
 8007f44:	6107      	str	r7, [r0, #16]
 8007f46:	e7a3      	b.n	8007e90 <__mdiff+0x34>
 8007f48:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f4c:	fa11 f288 	uxtah	r2, r1, r8
 8007f50:	1414      	asrs	r4, r2, #16
 8007f52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f56:	b292      	uxth	r2, r2
 8007f58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f5c:	f84e 2b04 	str.w	r2, [lr], #4
 8007f60:	1421      	asrs	r1, r4, #16
 8007f62:	e7e0      	b.n	8007f26 <__mdiff+0xca>
 8007f64:	3f01      	subs	r7, #1
 8007f66:	e7ea      	b.n	8007f3e <__mdiff+0xe2>
 8007f68:	08008e3f 	.word	0x08008e3f
 8007f6c:	08008e50 	.word	0x08008e50

08007f70 <__d2b>:
 8007f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	4689      	mov	r9, r1
 8007f76:	2101      	movs	r1, #1
 8007f78:	ec57 6b10 	vmov	r6, r7, d0
 8007f7c:	4690      	mov	r8, r2
 8007f7e:	f7ff fccf 	bl	8007920 <_Balloc>
 8007f82:	4604      	mov	r4, r0
 8007f84:	b930      	cbnz	r0, 8007f94 <__d2b+0x24>
 8007f86:	4602      	mov	r2, r0
 8007f88:	4b25      	ldr	r3, [pc, #148]	; (8008020 <__d2b+0xb0>)
 8007f8a:	4826      	ldr	r0, [pc, #152]	; (8008024 <__d2b+0xb4>)
 8007f8c:	f240 310a 	movw	r1, #778	; 0x30a
 8007f90:	f000 f950 	bl	8008234 <__assert_func>
 8007f94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f9c:	bb35      	cbnz	r5, 8007fec <__d2b+0x7c>
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	d028      	beq.n	8007ff6 <__d2b+0x86>
 8007fa4:	4668      	mov	r0, sp
 8007fa6:	9600      	str	r6, [sp, #0]
 8007fa8:	f7ff fd82 	bl	8007ab0 <__lo0bits>
 8007fac:	9900      	ldr	r1, [sp, #0]
 8007fae:	b300      	cbz	r0, 8007ff2 <__d2b+0x82>
 8007fb0:	9a01      	ldr	r2, [sp, #4]
 8007fb2:	f1c0 0320 	rsb	r3, r0, #32
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	40c2      	lsrs	r2, r0
 8007fbe:	6163      	str	r3, [r4, #20]
 8007fc0:	9201      	str	r2, [sp, #4]
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	61a3      	str	r3, [r4, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf14      	ite	ne
 8007fca:	2202      	movne	r2, #2
 8007fcc:	2201      	moveq	r2, #1
 8007fce:	6122      	str	r2, [r4, #16]
 8007fd0:	b1d5      	cbz	r5, 8008008 <__d2b+0x98>
 8007fd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fd6:	4405      	add	r5, r0
 8007fd8:	f8c9 5000 	str.w	r5, [r9]
 8007fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fe0:	f8c8 0000 	str.w	r0, [r8]
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	b003      	add	sp, #12
 8007fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ff0:	e7d5      	b.n	8007f9e <__d2b+0x2e>
 8007ff2:	6161      	str	r1, [r4, #20]
 8007ff4:	e7e5      	b.n	8007fc2 <__d2b+0x52>
 8007ff6:	a801      	add	r0, sp, #4
 8007ff8:	f7ff fd5a 	bl	8007ab0 <__lo0bits>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	6163      	str	r3, [r4, #20]
 8008000:	2201      	movs	r2, #1
 8008002:	6122      	str	r2, [r4, #16]
 8008004:	3020      	adds	r0, #32
 8008006:	e7e3      	b.n	8007fd0 <__d2b+0x60>
 8008008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800800c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008010:	f8c9 0000 	str.w	r0, [r9]
 8008014:	6918      	ldr	r0, [r3, #16]
 8008016:	f7ff fd2b 	bl	8007a70 <__hi0bits>
 800801a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800801e:	e7df      	b.n	8007fe0 <__d2b+0x70>
 8008020:	08008e3f 	.word	0x08008e3f
 8008024:	08008e50 	.word	0x08008e50

08008028 <_calloc_r>:
 8008028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800802a:	fba1 2402 	umull	r2, r4, r1, r2
 800802e:	b94c      	cbnz	r4, 8008044 <_calloc_r+0x1c>
 8008030:	4611      	mov	r1, r2
 8008032:	9201      	str	r2, [sp, #4]
 8008034:	f000 f87a 	bl	800812c <_malloc_r>
 8008038:	9a01      	ldr	r2, [sp, #4]
 800803a:	4605      	mov	r5, r0
 800803c:	b930      	cbnz	r0, 800804c <_calloc_r+0x24>
 800803e:	4628      	mov	r0, r5
 8008040:	b003      	add	sp, #12
 8008042:	bd30      	pop	{r4, r5, pc}
 8008044:	220c      	movs	r2, #12
 8008046:	6002      	str	r2, [r0, #0]
 8008048:	2500      	movs	r5, #0
 800804a:	e7f8      	b.n	800803e <_calloc_r+0x16>
 800804c:	4621      	mov	r1, r4
 800804e:	f7fe f95f 	bl	8006310 <memset>
 8008052:	e7f4      	b.n	800803e <_calloc_r+0x16>

08008054 <_free_r>:
 8008054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008056:	2900      	cmp	r1, #0
 8008058:	d044      	beq.n	80080e4 <_free_r+0x90>
 800805a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805e:	9001      	str	r0, [sp, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f1a1 0404 	sub.w	r4, r1, #4
 8008066:	bfb8      	it	lt
 8008068:	18e4      	addlt	r4, r4, r3
 800806a:	f000 f925 	bl	80082b8 <__malloc_lock>
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <_free_r+0x94>)
 8008070:	9801      	ldr	r0, [sp, #4]
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	b933      	cbnz	r3, 8008084 <_free_r+0x30>
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	6014      	str	r4, [r2, #0]
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008080:	f000 b920 	b.w	80082c4 <__malloc_unlock>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d908      	bls.n	800809a <_free_r+0x46>
 8008088:	6825      	ldr	r5, [r4, #0]
 800808a:	1961      	adds	r1, r4, r5
 800808c:	428b      	cmp	r3, r1
 800808e:	bf01      	itttt	eq
 8008090:	6819      	ldreq	r1, [r3, #0]
 8008092:	685b      	ldreq	r3, [r3, #4]
 8008094:	1949      	addeq	r1, r1, r5
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	e7ed      	b.n	8008076 <_free_r+0x22>
 800809a:	461a      	mov	r2, r3
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	b10b      	cbz	r3, 80080a4 <_free_r+0x50>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d9fa      	bls.n	800809a <_free_r+0x46>
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	1855      	adds	r5, r2, r1
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d10b      	bne.n	80080c4 <_free_r+0x70>
 80080ac:	6824      	ldr	r4, [r4, #0]
 80080ae:	4421      	add	r1, r4
 80080b0:	1854      	adds	r4, r2, r1
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	d1e0      	bne.n	800807a <_free_r+0x26>
 80080b8:	681c      	ldr	r4, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	4421      	add	r1, r4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	e7da      	b.n	800807a <_free_r+0x26>
 80080c4:	d902      	bls.n	80080cc <_free_r+0x78>
 80080c6:	230c      	movs	r3, #12
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	e7d6      	b.n	800807a <_free_r+0x26>
 80080cc:	6825      	ldr	r5, [r4, #0]
 80080ce:	1961      	adds	r1, r4, r5
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf04      	itt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	bf04      	itt	eq
 80080dc:	1949      	addeq	r1, r1, r5
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	6054      	str	r4, [r2, #4]
 80080e2:	e7ca      	b.n	800807a <_free_r+0x26>
 80080e4:	b003      	add	sp, #12
 80080e6:	bd30      	pop	{r4, r5, pc}
 80080e8:	2000081c 	.word	0x2000081c

080080ec <sbrk_aligned>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4e0e      	ldr	r6, [pc, #56]	; (8008128 <sbrk_aligned+0x3c>)
 80080f0:	460c      	mov	r4, r1
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	b911      	cbnz	r1, 80080fe <sbrk_aligned+0x12>
 80080f8:	f000 f88c 	bl	8008214 <_sbrk_r>
 80080fc:	6030      	str	r0, [r6, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 f887 	bl	8008214 <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d00a      	beq.n	8008120 <sbrk_aligned+0x34>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d007      	beq.n	8008124 <sbrk_aligned+0x38>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4628      	mov	r0, r5
 8008118:	f000 f87c 	bl	8008214 <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d101      	bne.n	8008124 <sbrk_aligned+0x38>
 8008120:	f04f 34ff 	mov.w	r4, #4294967295
 8008124:	4620      	mov	r0, r4
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	20000820 	.word	0x20000820

0800812c <_malloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	1ccd      	adds	r5, r1, #3
 8008132:	f025 0503 	bic.w	r5, r5, #3
 8008136:	3508      	adds	r5, #8
 8008138:	2d0c      	cmp	r5, #12
 800813a:	bf38      	it	cc
 800813c:	250c      	movcc	r5, #12
 800813e:	2d00      	cmp	r5, #0
 8008140:	4607      	mov	r7, r0
 8008142:	db01      	blt.n	8008148 <_malloc_r+0x1c>
 8008144:	42a9      	cmp	r1, r5
 8008146:	d905      	bls.n	8008154 <_malloc_r+0x28>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	2600      	movs	r6, #0
 800814e:	4630      	mov	r0, r6
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	4e2e      	ldr	r6, [pc, #184]	; (8008210 <_malloc_r+0xe4>)
 8008156:	f000 f8af 	bl	80082b8 <__malloc_lock>
 800815a:	6833      	ldr	r3, [r6, #0]
 800815c:	461c      	mov	r4, r3
 800815e:	bb34      	cbnz	r4, 80081ae <_malloc_r+0x82>
 8008160:	4629      	mov	r1, r5
 8008162:	4638      	mov	r0, r7
 8008164:	f7ff ffc2 	bl	80080ec <sbrk_aligned>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	4604      	mov	r4, r0
 800816c:	d14d      	bne.n	800820a <_malloc_r+0xde>
 800816e:	6834      	ldr	r4, [r6, #0]
 8008170:	4626      	mov	r6, r4
 8008172:	2e00      	cmp	r6, #0
 8008174:	d140      	bne.n	80081f8 <_malloc_r+0xcc>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	4631      	mov	r1, r6
 800817a:	4638      	mov	r0, r7
 800817c:	eb04 0803 	add.w	r8, r4, r3
 8008180:	f000 f848 	bl	8008214 <_sbrk_r>
 8008184:	4580      	cmp	r8, r0
 8008186:	d13a      	bne.n	80081fe <_malloc_r+0xd2>
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	3503      	adds	r5, #3
 800818c:	1a6d      	subs	r5, r5, r1
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	4629      	mov	r1, r5
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ffa5 	bl	80080ec <sbrk_aligned>
 80081a2:	3001      	adds	r0, #1
 80081a4:	d02b      	beq.n	80081fe <_malloc_r+0xd2>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	442b      	add	r3, r5
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	e00e      	b.n	80081cc <_malloc_r+0xa0>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	1b52      	subs	r2, r2, r5
 80081b2:	d41e      	bmi.n	80081f2 <_malloc_r+0xc6>
 80081b4:	2a0b      	cmp	r2, #11
 80081b6:	d916      	bls.n	80081e6 <_malloc_r+0xba>
 80081b8:	1961      	adds	r1, r4, r5
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6025      	str	r5, [r4, #0]
 80081be:	bf18      	it	ne
 80081c0:	6059      	strne	r1, [r3, #4]
 80081c2:	6863      	ldr	r3, [r4, #4]
 80081c4:	bf08      	it	eq
 80081c6:	6031      	streq	r1, [r6, #0]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f000 f877 	bl	80082c4 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0b6      	beq.n	800814e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7b3      	b.n	800814e <_malloc_r+0x22>
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	bf0c      	ite	eq
 80081ec:	6032      	streq	r2, [r6, #0]
 80081ee:	605a      	strne	r2, [r3, #4]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xa0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7b2      	b.n	800815e <_malloc_r+0x32>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b9      	b.n	8008172 <_malloc_r+0x46>
 80081fe:	230c      	movs	r3, #12
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4638      	mov	r0, r7
 8008204:	f000 f85e 	bl	80082c4 <__malloc_unlock>
 8008208:	e7a1      	b.n	800814e <_malloc_r+0x22>
 800820a:	6025      	str	r5, [r4, #0]
 800820c:	e7de      	b.n	80081cc <_malloc_r+0xa0>
 800820e:	bf00      	nop
 8008210:	2000081c 	.word	0x2000081c

08008214 <_sbrk_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d06      	ldr	r5, [pc, #24]	; (8008230 <_sbrk_r+0x1c>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7f9 f9fe 	bl	8001620 <_sbrk>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_sbrk_r+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_sbrk_r+0x1a>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20000824 	.word	0x20000824

08008234 <__assert_func>:
 8008234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008236:	4614      	mov	r4, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <__assert_func+0x2c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	68d8      	ldr	r0, [r3, #12]
 8008242:	b14c      	cbz	r4, 8008258 <__assert_func+0x24>
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <__assert_func+0x30>)
 8008246:	9100      	str	r1, [sp, #0]
 8008248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800824c:	4906      	ldr	r1, [pc, #24]	; (8008268 <__assert_func+0x34>)
 800824e:	462b      	mov	r3, r5
 8008250:	f000 f80e 	bl	8008270 <fiprintf>
 8008254:	f000 fa64 	bl	8008720 <abort>
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <__assert_func+0x38>)
 800825a:	461c      	mov	r4, r3
 800825c:	e7f3      	b.n	8008246 <__assert_func+0x12>
 800825e:	bf00      	nop
 8008260:	2000000c 	.word	0x2000000c
 8008264:	08008fac 	.word	0x08008fac
 8008268:	08008fb9 	.word	0x08008fb9
 800826c:	08008fe7 	.word	0x08008fe7

08008270 <fiprintf>:
 8008270:	b40e      	push	{r1, r2, r3}
 8008272:	b503      	push	{r0, r1, lr}
 8008274:	4601      	mov	r1, r0
 8008276:	ab03      	add	r3, sp, #12
 8008278:	4805      	ldr	r0, [pc, #20]	; (8008290 <fiprintf+0x20>)
 800827a:	f853 2b04 	ldr.w	r2, [r3], #4
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	f000 f84f 	bl	8008324 <_vfiprintf_r>
 8008286:	b002      	add	sp, #8
 8008288:	f85d eb04 	ldr.w	lr, [sp], #4
 800828c:	b003      	add	sp, #12
 800828e:	4770      	bx	lr
 8008290:	2000000c 	.word	0x2000000c

08008294 <__ascii_mbtowc>:
 8008294:	b082      	sub	sp, #8
 8008296:	b901      	cbnz	r1, 800829a <__ascii_mbtowc+0x6>
 8008298:	a901      	add	r1, sp, #4
 800829a:	b142      	cbz	r2, 80082ae <__ascii_mbtowc+0x1a>
 800829c:	b14b      	cbz	r3, 80082b2 <__ascii_mbtowc+0x1e>
 800829e:	7813      	ldrb	r3, [r2, #0]
 80082a0:	600b      	str	r3, [r1, #0]
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	1e10      	subs	r0, r2, #0
 80082a6:	bf18      	it	ne
 80082a8:	2001      	movne	r0, #1
 80082aa:	b002      	add	sp, #8
 80082ac:	4770      	bx	lr
 80082ae:	4610      	mov	r0, r2
 80082b0:	e7fb      	b.n	80082aa <__ascii_mbtowc+0x16>
 80082b2:	f06f 0001 	mvn.w	r0, #1
 80082b6:	e7f8      	b.n	80082aa <__ascii_mbtowc+0x16>

080082b8 <__malloc_lock>:
 80082b8:	4801      	ldr	r0, [pc, #4]	; (80082c0 <__malloc_lock+0x8>)
 80082ba:	f000 bbf1 	b.w	8008aa0 <__retarget_lock_acquire_recursive>
 80082be:	bf00      	nop
 80082c0:	20000828 	.word	0x20000828

080082c4 <__malloc_unlock>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__malloc_unlock+0x8>)
 80082c6:	f000 bbec 	b.w	8008aa2 <__retarget_lock_release_recursive>
 80082ca:	bf00      	nop
 80082cc:	20000828 	.word	0x20000828

080082d0 <__sfputc_r>:
 80082d0:	6893      	ldr	r3, [r2, #8]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	b410      	push	{r4}
 80082d8:	6093      	str	r3, [r2, #8]
 80082da:	da08      	bge.n	80082ee <__sfputc_r+0x1e>
 80082dc:	6994      	ldr	r4, [r2, #24]
 80082de:	42a3      	cmp	r3, r4
 80082e0:	db01      	blt.n	80082e6 <__sfputc_r+0x16>
 80082e2:	290a      	cmp	r1, #10
 80082e4:	d103      	bne.n	80082ee <__sfputc_r+0x1e>
 80082e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ea:	f000 b94b 	b.w	8008584 <__swbuf_r>
 80082ee:	6813      	ldr	r3, [r2, #0]
 80082f0:	1c58      	adds	r0, r3, #1
 80082f2:	6010      	str	r0, [r2, #0]
 80082f4:	7019      	strb	r1, [r3, #0]
 80082f6:	4608      	mov	r0, r1
 80082f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <__sfputs_r>:
 80082fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008300:	4606      	mov	r6, r0
 8008302:	460f      	mov	r7, r1
 8008304:	4614      	mov	r4, r2
 8008306:	18d5      	adds	r5, r2, r3
 8008308:	42ac      	cmp	r4, r5
 800830a:	d101      	bne.n	8008310 <__sfputs_r+0x12>
 800830c:	2000      	movs	r0, #0
 800830e:	e007      	b.n	8008320 <__sfputs_r+0x22>
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	463a      	mov	r2, r7
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff ffda 	bl	80082d0 <__sfputc_r>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d1f3      	bne.n	8008308 <__sfputs_r+0xa>
 8008320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008324 <_vfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	460d      	mov	r5, r1
 800832a:	b09d      	sub	sp, #116	; 0x74
 800832c:	4614      	mov	r4, r2
 800832e:	4698      	mov	r8, r3
 8008330:	4606      	mov	r6, r0
 8008332:	b118      	cbz	r0, 800833c <_vfiprintf_r+0x18>
 8008334:	6983      	ldr	r3, [r0, #24]
 8008336:	b90b      	cbnz	r3, 800833c <_vfiprintf_r+0x18>
 8008338:	f000 fb14 	bl	8008964 <__sinit>
 800833c:	4b89      	ldr	r3, [pc, #548]	; (8008564 <_vfiprintf_r+0x240>)
 800833e:	429d      	cmp	r5, r3
 8008340:	d11b      	bne.n	800837a <_vfiprintf_r+0x56>
 8008342:	6875      	ldr	r5, [r6, #4]
 8008344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	d405      	bmi.n	8008356 <_vfiprintf_r+0x32>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	059a      	lsls	r2, r3, #22
 800834e:	d402      	bmi.n	8008356 <_vfiprintf_r+0x32>
 8008350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008352:	f000 fba5 	bl	8008aa0 <__retarget_lock_acquire_recursive>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	071b      	lsls	r3, r3, #28
 800835a:	d501      	bpl.n	8008360 <_vfiprintf_r+0x3c>
 800835c:	692b      	ldr	r3, [r5, #16]
 800835e:	b9eb      	cbnz	r3, 800839c <_vfiprintf_r+0x78>
 8008360:	4629      	mov	r1, r5
 8008362:	4630      	mov	r0, r6
 8008364:	f000 f96e 	bl	8008644 <__swsetup_r>
 8008368:	b1c0      	cbz	r0, 800839c <_vfiprintf_r+0x78>
 800836a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800836c:	07dc      	lsls	r4, r3, #31
 800836e:	d50e      	bpl.n	800838e <_vfiprintf_r+0x6a>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	b01d      	add	sp, #116	; 0x74
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	4b7b      	ldr	r3, [pc, #492]	; (8008568 <_vfiprintf_r+0x244>)
 800837c:	429d      	cmp	r5, r3
 800837e:	d101      	bne.n	8008384 <_vfiprintf_r+0x60>
 8008380:	68b5      	ldr	r5, [r6, #8]
 8008382:	e7df      	b.n	8008344 <_vfiprintf_r+0x20>
 8008384:	4b79      	ldr	r3, [pc, #484]	; (800856c <_vfiprintf_r+0x248>)
 8008386:	429d      	cmp	r5, r3
 8008388:	bf08      	it	eq
 800838a:	68f5      	ldreq	r5, [r6, #12]
 800838c:	e7da      	b.n	8008344 <_vfiprintf_r+0x20>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	0598      	lsls	r0, r3, #22
 8008392:	d4ed      	bmi.n	8008370 <_vfiprintf_r+0x4c>
 8008394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008396:	f000 fb84 	bl	8008aa2 <__retarget_lock_release_recursive>
 800839a:	e7e9      	b.n	8008370 <_vfiprintf_r+0x4c>
 800839c:	2300      	movs	r3, #0
 800839e:	9309      	str	r3, [sp, #36]	; 0x24
 80083a0:	2320      	movs	r3, #32
 80083a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083aa:	2330      	movs	r3, #48	; 0x30
 80083ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008570 <_vfiprintf_r+0x24c>
 80083b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083b4:	f04f 0901 	mov.w	r9, #1
 80083b8:	4623      	mov	r3, r4
 80083ba:	469a      	mov	sl, r3
 80083bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c0:	b10a      	cbz	r2, 80083c6 <_vfiprintf_r+0xa2>
 80083c2:	2a25      	cmp	r2, #37	; 0x25
 80083c4:	d1f9      	bne.n	80083ba <_vfiprintf_r+0x96>
 80083c6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ca:	d00b      	beq.n	80083e4 <_vfiprintf_r+0xc0>
 80083cc:	465b      	mov	r3, fp
 80083ce:	4622      	mov	r2, r4
 80083d0:	4629      	mov	r1, r5
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ff93 	bl	80082fe <__sfputs_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	f000 80aa 	beq.w	8008532 <_vfiprintf_r+0x20e>
 80083de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083e0:	445a      	add	r2, fp
 80083e2:	9209      	str	r2, [sp, #36]	; 0x24
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80a2 	beq.w	8008532 <_vfiprintf_r+0x20e>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f04f 32ff 	mov.w	r2, #4294967295
 80083f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083f8:	f10a 0a01 	add.w	sl, sl, #1
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008404:	931a      	str	r3, [sp, #104]	; 0x68
 8008406:	4654      	mov	r4, sl
 8008408:	2205      	movs	r2, #5
 800840a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840e:	4858      	ldr	r0, [pc, #352]	; (8008570 <_vfiprintf_r+0x24c>)
 8008410:	f7f7 feee 	bl	80001f0 <memchr>
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	b9d8      	cbnz	r0, 8008450 <_vfiprintf_r+0x12c>
 8008418:	06d1      	lsls	r1, r2, #27
 800841a:	bf44      	itt	mi
 800841c:	2320      	movmi	r3, #32
 800841e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008422:	0713      	lsls	r3, r2, #28
 8008424:	bf44      	itt	mi
 8008426:	232b      	movmi	r3, #43	; 0x2b
 8008428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800842c:	f89a 3000 	ldrb.w	r3, [sl]
 8008430:	2b2a      	cmp	r3, #42	; 0x2a
 8008432:	d015      	beq.n	8008460 <_vfiprintf_r+0x13c>
 8008434:	9a07      	ldr	r2, [sp, #28]
 8008436:	4654      	mov	r4, sl
 8008438:	2000      	movs	r0, #0
 800843a:	f04f 0c0a 	mov.w	ip, #10
 800843e:	4621      	mov	r1, r4
 8008440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008444:	3b30      	subs	r3, #48	; 0x30
 8008446:	2b09      	cmp	r3, #9
 8008448:	d94e      	bls.n	80084e8 <_vfiprintf_r+0x1c4>
 800844a:	b1b0      	cbz	r0, 800847a <_vfiprintf_r+0x156>
 800844c:	9207      	str	r2, [sp, #28]
 800844e:	e014      	b.n	800847a <_vfiprintf_r+0x156>
 8008450:	eba0 0308 	sub.w	r3, r0, r8
 8008454:	fa09 f303 	lsl.w	r3, r9, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	46a2      	mov	sl, r4
 800845e:	e7d2      	b.n	8008406 <_vfiprintf_r+0xe2>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	1d19      	adds	r1, r3, #4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	9103      	str	r1, [sp, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfbb      	ittet	lt
 800846c:	425b      	neglt	r3, r3
 800846e:	f042 0202 	orrlt.w	r2, r2, #2
 8008472:	9307      	strge	r3, [sp, #28]
 8008474:	9307      	strlt	r3, [sp, #28]
 8008476:	bfb8      	it	lt
 8008478:	9204      	strlt	r2, [sp, #16]
 800847a:	7823      	ldrb	r3, [r4, #0]
 800847c:	2b2e      	cmp	r3, #46	; 0x2e
 800847e:	d10c      	bne.n	800849a <_vfiprintf_r+0x176>
 8008480:	7863      	ldrb	r3, [r4, #1]
 8008482:	2b2a      	cmp	r3, #42	; 0x2a
 8008484:	d135      	bne.n	80084f2 <_vfiprintf_r+0x1ce>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	1d1a      	adds	r2, r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	9203      	str	r2, [sp, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfb8      	it	lt
 8008492:	f04f 33ff 	movlt.w	r3, #4294967295
 8008496:	3402      	adds	r4, #2
 8008498:	9305      	str	r3, [sp, #20]
 800849a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008580 <_vfiprintf_r+0x25c>
 800849e:	7821      	ldrb	r1, [r4, #0]
 80084a0:	2203      	movs	r2, #3
 80084a2:	4650      	mov	r0, sl
 80084a4:	f7f7 fea4 	bl	80001f0 <memchr>
 80084a8:	b140      	cbz	r0, 80084bc <_vfiprintf_r+0x198>
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	eba0 000a 	sub.w	r0, r0, sl
 80084b0:	fa03 f000 	lsl.w	r0, r3, r0
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	4303      	orrs	r3, r0
 80084b8:	3401      	adds	r4, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c0:	482c      	ldr	r0, [pc, #176]	; (8008574 <_vfiprintf_r+0x250>)
 80084c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084c6:	2206      	movs	r2, #6
 80084c8:	f7f7 fe92 	bl	80001f0 <memchr>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d03f      	beq.n	8008550 <_vfiprintf_r+0x22c>
 80084d0:	4b29      	ldr	r3, [pc, #164]	; (8008578 <_vfiprintf_r+0x254>)
 80084d2:	bb1b      	cbnz	r3, 800851c <_vfiprintf_r+0x1f8>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	3307      	adds	r3, #7
 80084d8:	f023 0307 	bic.w	r3, r3, #7
 80084dc:	3308      	adds	r3, #8
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	443b      	add	r3, r7
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	e767      	b.n	80083b8 <_vfiprintf_r+0x94>
 80084e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ec:	460c      	mov	r4, r1
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7a5      	b.n	800843e <_vfiprintf_r+0x11a>
 80084f2:	2300      	movs	r3, #0
 80084f4:	3401      	adds	r4, #1
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f04f 0c0a 	mov.w	ip, #10
 80084fe:	4620      	mov	r0, r4
 8008500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008504:	3a30      	subs	r2, #48	; 0x30
 8008506:	2a09      	cmp	r2, #9
 8008508:	d903      	bls.n	8008512 <_vfiprintf_r+0x1ee>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0c5      	beq.n	800849a <_vfiprintf_r+0x176>
 800850e:	9105      	str	r1, [sp, #20]
 8008510:	e7c3      	b.n	800849a <_vfiprintf_r+0x176>
 8008512:	fb0c 2101 	mla	r1, ip, r1, r2
 8008516:	4604      	mov	r4, r0
 8008518:	2301      	movs	r3, #1
 800851a:	e7f0      	b.n	80084fe <_vfiprintf_r+0x1da>
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462a      	mov	r2, r5
 8008522:	4b16      	ldr	r3, [pc, #88]	; (800857c <_vfiprintf_r+0x258>)
 8008524:	a904      	add	r1, sp, #16
 8008526:	4630      	mov	r0, r6
 8008528:	f7fd ff9a 	bl	8006460 <_printf_float>
 800852c:	4607      	mov	r7, r0
 800852e:	1c78      	adds	r0, r7, #1
 8008530:	d1d6      	bne.n	80084e0 <_vfiprintf_r+0x1bc>
 8008532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008534:	07d9      	lsls	r1, r3, #31
 8008536:	d405      	bmi.n	8008544 <_vfiprintf_r+0x220>
 8008538:	89ab      	ldrh	r3, [r5, #12]
 800853a:	059a      	lsls	r2, r3, #22
 800853c:	d402      	bmi.n	8008544 <_vfiprintf_r+0x220>
 800853e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008540:	f000 faaf 	bl	8008aa2 <__retarget_lock_release_recursive>
 8008544:	89ab      	ldrh	r3, [r5, #12]
 8008546:	065b      	lsls	r3, r3, #25
 8008548:	f53f af12 	bmi.w	8008370 <_vfiprintf_r+0x4c>
 800854c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800854e:	e711      	b.n	8008374 <_vfiprintf_r+0x50>
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	462a      	mov	r2, r5
 8008556:	4b09      	ldr	r3, [pc, #36]	; (800857c <_vfiprintf_r+0x258>)
 8008558:	a904      	add	r1, sp, #16
 800855a:	4630      	mov	r0, r6
 800855c:	f7fe fa24 	bl	80069a8 <_printf_i>
 8008560:	e7e4      	b.n	800852c <_vfiprintf_r+0x208>
 8008562:	bf00      	nop
 8008564:	08009124 	.word	0x08009124
 8008568:	08009144 	.word	0x08009144
 800856c:	08009104 	.word	0x08009104
 8008570:	08008ff2 	.word	0x08008ff2
 8008574:	08008ffc 	.word	0x08008ffc
 8008578:	08006461 	.word	0x08006461
 800857c:	080082ff 	.word	0x080082ff
 8008580:	08008ff8 	.word	0x08008ff8

08008584 <__swbuf_r>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	460e      	mov	r6, r1
 8008588:	4614      	mov	r4, r2
 800858a:	4605      	mov	r5, r0
 800858c:	b118      	cbz	r0, 8008596 <__swbuf_r+0x12>
 800858e:	6983      	ldr	r3, [r0, #24]
 8008590:	b90b      	cbnz	r3, 8008596 <__swbuf_r+0x12>
 8008592:	f000 f9e7 	bl	8008964 <__sinit>
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <__swbuf_r+0x98>)
 8008598:	429c      	cmp	r4, r3
 800859a:	d12b      	bne.n	80085f4 <__swbuf_r+0x70>
 800859c:	686c      	ldr	r4, [r5, #4]
 800859e:	69a3      	ldr	r3, [r4, #24]
 80085a0:	60a3      	str	r3, [r4, #8]
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	071a      	lsls	r2, r3, #28
 80085a6:	d52f      	bpl.n	8008608 <__swbuf_r+0x84>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	b36b      	cbz	r3, 8008608 <__swbuf_r+0x84>
 80085ac:	6923      	ldr	r3, [r4, #16]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6963      	ldr	r3, [r4, #20]
 80085b4:	b2f6      	uxtb	r6, r6
 80085b6:	4283      	cmp	r3, r0
 80085b8:	4637      	mov	r7, r6
 80085ba:	dc04      	bgt.n	80085c6 <__swbuf_r+0x42>
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f93c 	bl	800883c <_fflush_r>
 80085c4:	bb30      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60a3      	str	r3, [r4, #8]
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	701e      	strb	r6, [r3, #0]
 80085d4:	6963      	ldr	r3, [r4, #20]
 80085d6:	3001      	adds	r0, #1
 80085d8:	4283      	cmp	r3, r0
 80085da:	d004      	beq.n	80085e6 <__swbuf_r+0x62>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	07db      	lsls	r3, r3, #31
 80085e0:	d506      	bpl.n	80085f0 <__swbuf_r+0x6c>
 80085e2:	2e0a      	cmp	r6, #10
 80085e4:	d104      	bne.n	80085f0 <__swbuf_r+0x6c>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f927 	bl	800883c <_fflush_r>
 80085ee:	b988      	cbnz	r0, 8008614 <__swbuf_r+0x90>
 80085f0:	4638      	mov	r0, r7
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <__swbuf_r+0x9c>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d101      	bne.n	80085fe <__swbuf_r+0x7a>
 80085fa:	68ac      	ldr	r4, [r5, #8]
 80085fc:	e7cf      	b.n	800859e <__swbuf_r+0x1a>
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <__swbuf_r+0xa0>)
 8008600:	429c      	cmp	r4, r3
 8008602:	bf08      	it	eq
 8008604:	68ec      	ldreq	r4, [r5, #12]
 8008606:	e7ca      	b.n	800859e <__swbuf_r+0x1a>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 f81a 	bl	8008644 <__swsetup_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	d0cb      	beq.n	80085ac <__swbuf_r+0x28>
 8008614:	f04f 37ff 	mov.w	r7, #4294967295
 8008618:	e7ea      	b.n	80085f0 <__swbuf_r+0x6c>
 800861a:	bf00      	nop
 800861c:	08009124 	.word	0x08009124
 8008620:	08009144 	.word	0x08009144
 8008624:	08009104 	.word	0x08009104

08008628 <__ascii_wctomb>:
 8008628:	b149      	cbz	r1, 800863e <__ascii_wctomb+0x16>
 800862a:	2aff      	cmp	r2, #255	; 0xff
 800862c:	bf85      	ittet	hi
 800862e:	238a      	movhi	r3, #138	; 0x8a
 8008630:	6003      	strhi	r3, [r0, #0]
 8008632:	700a      	strbls	r2, [r1, #0]
 8008634:	f04f 30ff 	movhi.w	r0, #4294967295
 8008638:	bf98      	it	ls
 800863a:	2001      	movls	r0, #1
 800863c:	4770      	bx	lr
 800863e:	4608      	mov	r0, r1
 8008640:	4770      	bx	lr
	...

08008644 <__swsetup_r>:
 8008644:	4b32      	ldr	r3, [pc, #200]	; (8008710 <__swsetup_r+0xcc>)
 8008646:	b570      	push	{r4, r5, r6, lr}
 8008648:	681d      	ldr	r5, [r3, #0]
 800864a:	4606      	mov	r6, r0
 800864c:	460c      	mov	r4, r1
 800864e:	b125      	cbz	r5, 800865a <__swsetup_r+0x16>
 8008650:	69ab      	ldr	r3, [r5, #24]
 8008652:	b913      	cbnz	r3, 800865a <__swsetup_r+0x16>
 8008654:	4628      	mov	r0, r5
 8008656:	f000 f985 	bl	8008964 <__sinit>
 800865a:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <__swsetup_r+0xd0>)
 800865c:	429c      	cmp	r4, r3
 800865e:	d10f      	bne.n	8008680 <__swsetup_r+0x3c>
 8008660:	686c      	ldr	r4, [r5, #4]
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008668:	0719      	lsls	r1, r3, #28
 800866a:	d42c      	bmi.n	80086c6 <__swsetup_r+0x82>
 800866c:	06dd      	lsls	r5, r3, #27
 800866e:	d411      	bmi.n	8008694 <__swsetup_r+0x50>
 8008670:	2309      	movs	r3, #9
 8008672:	6033      	str	r3, [r6, #0]
 8008674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	f04f 30ff 	mov.w	r0, #4294967295
 800867e:	e03e      	b.n	80086fe <__swsetup_r+0xba>
 8008680:	4b25      	ldr	r3, [pc, #148]	; (8008718 <__swsetup_r+0xd4>)
 8008682:	429c      	cmp	r4, r3
 8008684:	d101      	bne.n	800868a <__swsetup_r+0x46>
 8008686:	68ac      	ldr	r4, [r5, #8]
 8008688:	e7eb      	b.n	8008662 <__swsetup_r+0x1e>
 800868a:	4b24      	ldr	r3, [pc, #144]	; (800871c <__swsetup_r+0xd8>)
 800868c:	429c      	cmp	r4, r3
 800868e:	bf08      	it	eq
 8008690:	68ec      	ldreq	r4, [r5, #12]
 8008692:	e7e6      	b.n	8008662 <__swsetup_r+0x1e>
 8008694:	0758      	lsls	r0, r3, #29
 8008696:	d512      	bpl.n	80086be <__swsetup_r+0x7a>
 8008698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800869a:	b141      	cbz	r1, 80086ae <__swsetup_r+0x6a>
 800869c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a0:	4299      	cmp	r1, r3
 80086a2:	d002      	beq.n	80086aa <__swsetup_r+0x66>
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7ff fcd5 	bl	8008054 <_free_r>
 80086aa:	2300      	movs	r3, #0
 80086ac:	6363      	str	r3, [r4, #52]	; 0x34
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	2300      	movs	r3, #0
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	f043 0308 	orr.w	r3, r3, #8
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	b94b      	cbnz	r3, 80086de <__swsetup_r+0x9a>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d4:	d003      	beq.n	80086de <__swsetup_r+0x9a>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 fa09 	bl	8008af0 <__smakebuf_r>
 80086de:	89a0      	ldrh	r0, [r4, #12]
 80086e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086e4:	f010 0301 	ands.w	r3, r0, #1
 80086e8:	d00a      	beq.n	8008700 <__swsetup_r+0xbc>
 80086ea:	2300      	movs	r3, #0
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	6963      	ldr	r3, [r4, #20]
 80086f0:	425b      	negs	r3, r3
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	b943      	cbnz	r3, 800870a <__swsetup_r+0xc6>
 80086f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086fc:	d1ba      	bne.n	8008674 <__swsetup_r+0x30>
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	0781      	lsls	r1, r0, #30
 8008702:	bf58      	it	pl
 8008704:	6963      	ldrpl	r3, [r4, #20]
 8008706:	60a3      	str	r3, [r4, #8]
 8008708:	e7f4      	b.n	80086f4 <__swsetup_r+0xb0>
 800870a:	2000      	movs	r0, #0
 800870c:	e7f7      	b.n	80086fe <__swsetup_r+0xba>
 800870e:	bf00      	nop
 8008710:	2000000c 	.word	0x2000000c
 8008714:	08009124 	.word	0x08009124
 8008718:	08009144 	.word	0x08009144
 800871c:	08009104 	.word	0x08009104

08008720 <abort>:
 8008720:	b508      	push	{r3, lr}
 8008722:	2006      	movs	r0, #6
 8008724:	f000 fa4c 	bl	8008bc0 <raise>
 8008728:	2001      	movs	r0, #1
 800872a:	f7f8 ff01 	bl	8001530 <_exit>
	...

08008730 <__sflush_r>:
 8008730:	898a      	ldrh	r2, [r1, #12]
 8008732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	4605      	mov	r5, r0
 8008738:	0710      	lsls	r0, r2, #28
 800873a:	460c      	mov	r4, r1
 800873c:	d458      	bmi.n	80087f0 <__sflush_r+0xc0>
 800873e:	684b      	ldr	r3, [r1, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	dc05      	bgt.n	8008750 <__sflush_r+0x20>
 8008744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc02      	bgt.n	8008750 <__sflush_r+0x20>
 800874a:	2000      	movs	r0, #0
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008752:	2e00      	cmp	r6, #0
 8008754:	d0f9      	beq.n	800874a <__sflush_r+0x1a>
 8008756:	2300      	movs	r3, #0
 8008758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800875c:	682f      	ldr	r7, [r5, #0]
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	d032      	beq.n	80087c8 <__sflush_r+0x98>
 8008762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	075a      	lsls	r2, r3, #29
 8008768:	d505      	bpl.n	8008776 <__sflush_r+0x46>
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	1ac0      	subs	r0, r0, r3
 800876e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008770:	b10b      	cbz	r3, 8008776 <__sflush_r+0x46>
 8008772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008774:	1ac0      	subs	r0, r0, r3
 8008776:	2300      	movs	r3, #0
 8008778:	4602      	mov	r2, r0
 800877a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800877c:	6a21      	ldr	r1, [r4, #32]
 800877e:	4628      	mov	r0, r5
 8008780:	47b0      	blx	r6
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	d106      	bne.n	8008796 <__sflush_r+0x66>
 8008788:	6829      	ldr	r1, [r5, #0]
 800878a:	291d      	cmp	r1, #29
 800878c:	d82c      	bhi.n	80087e8 <__sflush_r+0xb8>
 800878e:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <__sflush_r+0x108>)
 8008790:	40ca      	lsrs	r2, r1
 8008792:	07d6      	lsls	r6, r2, #31
 8008794:	d528      	bpl.n	80087e8 <__sflush_r+0xb8>
 8008796:	2200      	movs	r2, #0
 8008798:	6062      	str	r2, [r4, #4]
 800879a:	04d9      	lsls	r1, r3, #19
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	6022      	str	r2, [r4, #0]
 80087a0:	d504      	bpl.n	80087ac <__sflush_r+0x7c>
 80087a2:	1c42      	adds	r2, r0, #1
 80087a4:	d101      	bne.n	80087aa <__sflush_r+0x7a>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b903      	cbnz	r3, 80087ac <__sflush_r+0x7c>
 80087aa:	6560      	str	r0, [r4, #84]	; 0x54
 80087ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ae:	602f      	str	r7, [r5, #0]
 80087b0:	2900      	cmp	r1, #0
 80087b2:	d0ca      	beq.n	800874a <__sflush_r+0x1a>
 80087b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d002      	beq.n	80087c2 <__sflush_r+0x92>
 80087bc:	4628      	mov	r0, r5
 80087be:	f7ff fc49 	bl	8008054 <_free_r>
 80087c2:	2000      	movs	r0, #0
 80087c4:	6360      	str	r0, [r4, #52]	; 0x34
 80087c6:	e7c1      	b.n	800874c <__sflush_r+0x1c>
 80087c8:	6a21      	ldr	r1, [r4, #32]
 80087ca:	2301      	movs	r3, #1
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b0      	blx	r6
 80087d0:	1c41      	adds	r1, r0, #1
 80087d2:	d1c7      	bne.n	8008764 <__sflush_r+0x34>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0c4      	beq.n	8008764 <__sflush_r+0x34>
 80087da:	2b1d      	cmp	r3, #29
 80087dc:	d001      	beq.n	80087e2 <__sflush_r+0xb2>
 80087de:	2b16      	cmp	r3, #22
 80087e0:	d101      	bne.n	80087e6 <__sflush_r+0xb6>
 80087e2:	602f      	str	r7, [r5, #0]
 80087e4:	e7b1      	b.n	800874a <__sflush_r+0x1a>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	e7ad      	b.n	800874c <__sflush_r+0x1c>
 80087f0:	690f      	ldr	r7, [r1, #16]
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	d0a9      	beq.n	800874a <__sflush_r+0x1a>
 80087f6:	0793      	lsls	r3, r2, #30
 80087f8:	680e      	ldr	r6, [r1, #0]
 80087fa:	bf08      	it	eq
 80087fc:	694b      	ldreq	r3, [r1, #20]
 80087fe:	600f      	str	r7, [r1, #0]
 8008800:	bf18      	it	ne
 8008802:	2300      	movne	r3, #0
 8008804:	eba6 0807 	sub.w	r8, r6, r7
 8008808:	608b      	str	r3, [r1, #8]
 800880a:	f1b8 0f00 	cmp.w	r8, #0
 800880e:	dd9c      	ble.n	800874a <__sflush_r+0x1a>
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008814:	4643      	mov	r3, r8
 8008816:	463a      	mov	r2, r7
 8008818:	4628      	mov	r0, r5
 800881a:	47b0      	blx	r6
 800881c:	2800      	cmp	r0, #0
 800881e:	dc06      	bgt.n	800882e <__sflush_r+0xfe>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e78e      	b.n	800874c <__sflush_r+0x1c>
 800882e:	4407      	add	r7, r0
 8008830:	eba8 0800 	sub.w	r8, r8, r0
 8008834:	e7e9      	b.n	800880a <__sflush_r+0xda>
 8008836:	bf00      	nop
 8008838:	20400001 	.word	0x20400001

0800883c <_fflush_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	690b      	ldr	r3, [r1, #16]
 8008840:	4605      	mov	r5, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b913      	cbnz	r3, 800884c <_fflush_r+0x10>
 8008846:	2500      	movs	r5, #0
 8008848:	4628      	mov	r0, r5
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	b118      	cbz	r0, 8008856 <_fflush_r+0x1a>
 800884e:	6983      	ldr	r3, [r0, #24]
 8008850:	b90b      	cbnz	r3, 8008856 <_fflush_r+0x1a>
 8008852:	f000 f887 	bl	8008964 <__sinit>
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <_fflush_r+0x6c>)
 8008858:	429c      	cmp	r4, r3
 800885a:	d11b      	bne.n	8008894 <_fflush_r+0x58>
 800885c:	686c      	ldr	r4, [r5, #4]
 800885e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0ef      	beq.n	8008846 <_fflush_r+0xa>
 8008866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008868:	07d0      	lsls	r0, r2, #31
 800886a:	d404      	bmi.n	8008876 <_fflush_r+0x3a>
 800886c:	0599      	lsls	r1, r3, #22
 800886e:	d402      	bmi.n	8008876 <_fflush_r+0x3a>
 8008870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008872:	f000 f915 	bl	8008aa0 <__retarget_lock_acquire_recursive>
 8008876:	4628      	mov	r0, r5
 8008878:	4621      	mov	r1, r4
 800887a:	f7ff ff59 	bl	8008730 <__sflush_r>
 800887e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008880:	07da      	lsls	r2, r3, #31
 8008882:	4605      	mov	r5, r0
 8008884:	d4e0      	bmi.n	8008848 <_fflush_r+0xc>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	059b      	lsls	r3, r3, #22
 800888a:	d4dd      	bmi.n	8008848 <_fflush_r+0xc>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f000 f908 	bl	8008aa2 <__retarget_lock_release_recursive>
 8008892:	e7d9      	b.n	8008848 <_fflush_r+0xc>
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <_fflush_r+0x70>)
 8008896:	429c      	cmp	r4, r3
 8008898:	d101      	bne.n	800889e <_fflush_r+0x62>
 800889a:	68ac      	ldr	r4, [r5, #8]
 800889c:	e7df      	b.n	800885e <_fflush_r+0x22>
 800889e:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <_fflush_r+0x74>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	bf08      	it	eq
 80088a4:	68ec      	ldreq	r4, [r5, #12]
 80088a6:	e7da      	b.n	800885e <_fflush_r+0x22>
 80088a8:	08009124 	.word	0x08009124
 80088ac:	08009144 	.word	0x08009144
 80088b0:	08009104 	.word	0x08009104

080088b4 <std>:
 80088b4:	2300      	movs	r3, #0
 80088b6:	b510      	push	{r4, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	e9c0 3300 	strd	r3, r3, [r0]
 80088be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088c2:	6083      	str	r3, [r0, #8]
 80088c4:	8181      	strh	r1, [r0, #12]
 80088c6:	6643      	str	r3, [r0, #100]	; 0x64
 80088c8:	81c2      	strh	r2, [r0, #14]
 80088ca:	6183      	str	r3, [r0, #24]
 80088cc:	4619      	mov	r1, r3
 80088ce:	2208      	movs	r2, #8
 80088d0:	305c      	adds	r0, #92	; 0x5c
 80088d2:	f7fd fd1d 	bl	8006310 <memset>
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std+0x38>)
 80088d8:	6263      	str	r3, [r4, #36]	; 0x24
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <std+0x3c>)
 80088dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <std+0x40>)
 80088e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <std+0x44>)
 80088e4:	6224      	str	r4, [r4, #32]
 80088e6:	6323      	str	r3, [r4, #48]	; 0x30
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	bf00      	nop
 80088ec:	08008bf9 	.word	0x08008bf9
 80088f0:	08008c1b 	.word	0x08008c1b
 80088f4:	08008c53 	.word	0x08008c53
 80088f8:	08008c77 	.word	0x08008c77

080088fc <_cleanup_r>:
 80088fc:	4901      	ldr	r1, [pc, #4]	; (8008904 <_cleanup_r+0x8>)
 80088fe:	f000 b8af 	b.w	8008a60 <_fwalk_reent>
 8008902:	bf00      	nop
 8008904:	0800883d 	.word	0x0800883d

08008908 <__sfmoreglue>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	2268      	movs	r2, #104	; 0x68
 800890c:	1e4d      	subs	r5, r1, #1
 800890e:	4355      	muls	r5, r2
 8008910:	460e      	mov	r6, r1
 8008912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008916:	f7ff fc09 	bl	800812c <_malloc_r>
 800891a:	4604      	mov	r4, r0
 800891c:	b140      	cbz	r0, 8008930 <__sfmoreglue+0x28>
 800891e:	2100      	movs	r1, #0
 8008920:	e9c0 1600 	strd	r1, r6, [r0]
 8008924:	300c      	adds	r0, #12
 8008926:	60a0      	str	r0, [r4, #8]
 8008928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800892c:	f7fd fcf0 	bl	8006310 <memset>
 8008930:	4620      	mov	r0, r4
 8008932:	bd70      	pop	{r4, r5, r6, pc}

08008934 <__sfp_lock_acquire>:
 8008934:	4801      	ldr	r0, [pc, #4]	; (800893c <__sfp_lock_acquire+0x8>)
 8008936:	f000 b8b3 	b.w	8008aa0 <__retarget_lock_acquire_recursive>
 800893a:	bf00      	nop
 800893c:	20000829 	.word	0x20000829

08008940 <__sfp_lock_release>:
 8008940:	4801      	ldr	r0, [pc, #4]	; (8008948 <__sfp_lock_release+0x8>)
 8008942:	f000 b8ae 	b.w	8008aa2 <__retarget_lock_release_recursive>
 8008946:	bf00      	nop
 8008948:	20000829 	.word	0x20000829

0800894c <__sinit_lock_acquire>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__sinit_lock_acquire+0x8>)
 800894e:	f000 b8a7 	b.w	8008aa0 <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	2000082a 	.word	0x2000082a

08008958 <__sinit_lock_release>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__sinit_lock_release+0x8>)
 800895a:	f000 b8a2 	b.w	8008aa2 <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	2000082a 	.word	0x2000082a

08008964 <__sinit>:
 8008964:	b510      	push	{r4, lr}
 8008966:	4604      	mov	r4, r0
 8008968:	f7ff fff0 	bl	800894c <__sinit_lock_acquire>
 800896c:	69a3      	ldr	r3, [r4, #24]
 800896e:	b11b      	cbz	r3, 8008978 <__sinit+0x14>
 8008970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008974:	f7ff bff0 	b.w	8008958 <__sinit_lock_release>
 8008978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800897c:	6523      	str	r3, [r4, #80]	; 0x50
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <__sinit+0x68>)
 8008980:	4a13      	ldr	r2, [pc, #76]	; (80089d0 <__sinit+0x6c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	62a2      	str	r2, [r4, #40]	; 0x28
 8008986:	42a3      	cmp	r3, r4
 8008988:	bf04      	itt	eq
 800898a:	2301      	moveq	r3, #1
 800898c:	61a3      	streq	r3, [r4, #24]
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f820 	bl	80089d4 <__sfp>
 8008994:	6060      	str	r0, [r4, #4]
 8008996:	4620      	mov	r0, r4
 8008998:	f000 f81c 	bl	80089d4 <__sfp>
 800899c:	60a0      	str	r0, [r4, #8]
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 f818 	bl	80089d4 <__sfp>
 80089a4:	2200      	movs	r2, #0
 80089a6:	60e0      	str	r0, [r4, #12]
 80089a8:	2104      	movs	r1, #4
 80089aa:	6860      	ldr	r0, [r4, #4]
 80089ac:	f7ff ff82 	bl	80088b4 <std>
 80089b0:	68a0      	ldr	r0, [r4, #8]
 80089b2:	2201      	movs	r2, #1
 80089b4:	2109      	movs	r1, #9
 80089b6:	f7ff ff7d 	bl	80088b4 <std>
 80089ba:	68e0      	ldr	r0, [r4, #12]
 80089bc:	2202      	movs	r2, #2
 80089be:	2112      	movs	r1, #18
 80089c0:	f7ff ff78 	bl	80088b4 <std>
 80089c4:	2301      	movs	r3, #1
 80089c6:	61a3      	str	r3, [r4, #24]
 80089c8:	e7d2      	b.n	8008970 <__sinit+0xc>
 80089ca:	bf00      	nop
 80089cc:	08008d88 	.word	0x08008d88
 80089d0:	080088fd 	.word	0x080088fd

080089d4 <__sfp>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	4607      	mov	r7, r0
 80089d8:	f7ff ffac 	bl	8008934 <__sfp_lock_acquire>
 80089dc:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <__sfp+0x84>)
 80089de:	681e      	ldr	r6, [r3, #0]
 80089e0:	69b3      	ldr	r3, [r6, #24]
 80089e2:	b913      	cbnz	r3, 80089ea <__sfp+0x16>
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff ffbd 	bl	8008964 <__sinit>
 80089ea:	3648      	adds	r6, #72	; 0x48
 80089ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089f0:	3b01      	subs	r3, #1
 80089f2:	d503      	bpl.n	80089fc <__sfp+0x28>
 80089f4:	6833      	ldr	r3, [r6, #0]
 80089f6:	b30b      	cbz	r3, 8008a3c <__sfp+0x68>
 80089f8:	6836      	ldr	r6, [r6, #0]
 80089fa:	e7f7      	b.n	80089ec <__sfp+0x18>
 80089fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a00:	b9d5      	cbnz	r5, 8008a38 <__sfp+0x64>
 8008a02:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <__sfp+0x88>)
 8008a04:	60e3      	str	r3, [r4, #12]
 8008a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a0c:	f000 f847 	bl	8008a9e <__retarget_lock_init_recursive>
 8008a10:	f7ff ff96 	bl	8008940 <__sfp_lock_release>
 8008a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a1c:	6025      	str	r5, [r4, #0]
 8008a1e:	61a5      	str	r5, [r4, #24]
 8008a20:	2208      	movs	r2, #8
 8008a22:	4629      	mov	r1, r5
 8008a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a28:	f7fd fc72 	bl	8006310 <memset>
 8008a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a34:	4620      	mov	r0, r4
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a38:	3468      	adds	r4, #104	; 0x68
 8008a3a:	e7d9      	b.n	80089f0 <__sfp+0x1c>
 8008a3c:	2104      	movs	r1, #4
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f7ff ff62 	bl	8008908 <__sfmoreglue>
 8008a44:	4604      	mov	r4, r0
 8008a46:	6030      	str	r0, [r6, #0]
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d1d5      	bne.n	80089f8 <__sfp+0x24>
 8008a4c:	f7ff ff78 	bl	8008940 <__sfp_lock_release>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	e7ee      	b.n	8008a34 <__sfp+0x60>
 8008a56:	bf00      	nop
 8008a58:	08008d88 	.word	0x08008d88
 8008a5c:	ffff0001 	.word	0xffff0001

08008a60 <_fwalk_reent>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	4606      	mov	r6, r0
 8008a66:	4688      	mov	r8, r1
 8008a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a6c:	2700      	movs	r7, #0
 8008a6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a72:	f1b9 0901 	subs.w	r9, r9, #1
 8008a76:	d505      	bpl.n	8008a84 <_fwalk_reent+0x24>
 8008a78:	6824      	ldr	r4, [r4, #0]
 8008a7a:	2c00      	cmp	r4, #0
 8008a7c:	d1f7      	bne.n	8008a6e <_fwalk_reent+0xe>
 8008a7e:	4638      	mov	r0, r7
 8008a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a84:	89ab      	ldrh	r3, [r5, #12]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d907      	bls.n	8008a9a <_fwalk_reent+0x3a>
 8008a8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	d003      	beq.n	8008a9a <_fwalk_reent+0x3a>
 8008a92:	4629      	mov	r1, r5
 8008a94:	4630      	mov	r0, r6
 8008a96:	47c0      	blx	r8
 8008a98:	4307      	orrs	r7, r0
 8008a9a:	3568      	adds	r5, #104	; 0x68
 8008a9c:	e7e9      	b.n	8008a72 <_fwalk_reent+0x12>

08008a9e <__retarget_lock_init_recursive>:
 8008a9e:	4770      	bx	lr

08008aa0 <__retarget_lock_acquire_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <__retarget_lock_release_recursive>:
 8008aa2:	4770      	bx	lr

08008aa4 <__swhatbuf_r>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	460e      	mov	r6, r1
 8008aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aac:	2900      	cmp	r1, #0
 8008aae:	b096      	sub	sp, #88	; 0x58
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	461d      	mov	r5, r3
 8008ab4:	da08      	bge.n	8008ac8 <__swhatbuf_r+0x24>
 8008ab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	061a      	lsls	r2, r3, #24
 8008ac0:	d410      	bmi.n	8008ae4 <__swhatbuf_r+0x40>
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	e00e      	b.n	8008ae6 <__swhatbuf_r+0x42>
 8008ac8:	466a      	mov	r2, sp
 8008aca:	f000 f8fb 	bl	8008cc4 <_fstat_r>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dbf1      	blt.n	8008ab6 <__swhatbuf_r+0x12>
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008adc:	425a      	negs	r2, r3
 8008ade:	415a      	adcs	r2, r3
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	e7ee      	b.n	8008ac2 <__swhatbuf_r+0x1e>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	b016      	add	sp, #88	; 0x58
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008af0 <__smakebuf_r>:
 8008af0:	898b      	ldrh	r3, [r1, #12]
 8008af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008af4:	079d      	lsls	r5, r3, #30
 8008af6:	4606      	mov	r6, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	d507      	bpl.n	8008b0c <__smakebuf_r+0x1c>
 8008afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	2301      	movs	r3, #1
 8008b06:	6163      	str	r3, [r4, #20]
 8008b08:	b002      	add	sp, #8
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	ab01      	add	r3, sp, #4
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f7ff ffc8 	bl	8008aa4 <__swhatbuf_r>
 8008b14:	9900      	ldr	r1, [sp, #0]
 8008b16:	4605      	mov	r5, r0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff fb07 	bl	800812c <_malloc_r>
 8008b1e:	b948      	cbnz	r0, 8008b34 <__smakebuf_r+0x44>
 8008b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d4ef      	bmi.n	8008b08 <__smakebuf_r+0x18>
 8008b28:	f023 0303 	bic.w	r3, r3, #3
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	e7e3      	b.n	8008afc <__smakebuf_r+0xc>
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <__smakebuf_r+0x7c>)
 8008b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	6020      	str	r0, [r4, #0]
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	6163      	str	r3, [r4, #20]
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	6120      	str	r0, [r4, #16]
 8008b4a:	b15b      	cbz	r3, 8008b64 <__smakebuf_r+0x74>
 8008b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f8c9 	bl	8008ce8 <_isatty_r>
 8008b56:	b128      	cbz	r0, 8008b64 <__smakebuf_r+0x74>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	89a0      	ldrh	r0, [r4, #12]
 8008b66:	4305      	orrs	r5, r0
 8008b68:	81a5      	strh	r5, [r4, #12]
 8008b6a:	e7cd      	b.n	8008b08 <__smakebuf_r+0x18>
 8008b6c:	080088fd 	.word	0x080088fd

08008b70 <_raise_r>:
 8008b70:	291f      	cmp	r1, #31
 8008b72:	b538      	push	{r3, r4, r5, lr}
 8008b74:	4604      	mov	r4, r0
 8008b76:	460d      	mov	r5, r1
 8008b78:	d904      	bls.n	8008b84 <_raise_r+0x14>
 8008b7a:	2316      	movs	r3, #22
 8008b7c:	6003      	str	r3, [r0, #0]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b86:	b112      	cbz	r2, 8008b8e <_raise_r+0x1e>
 8008b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b8c:	b94b      	cbnz	r3, 8008ba2 <_raise_r+0x32>
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f830 	bl	8008bf4 <_getpid_r>
 8008b94:	462a      	mov	r2, r5
 8008b96:	4601      	mov	r1, r0
 8008b98:	4620      	mov	r0, r4
 8008b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b9e:	f000 b817 	b.w	8008bd0 <_kill_r>
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d00a      	beq.n	8008bbc <_raise_r+0x4c>
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	d103      	bne.n	8008bb2 <_raise_r+0x42>
 8008baa:	2316      	movs	r3, #22
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e7e7      	b.n	8008b82 <_raise_r+0x12>
 8008bb2:	2400      	movs	r4, #0
 8008bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bb8:	4628      	mov	r0, r5
 8008bba:	4798      	blx	r3
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e7e0      	b.n	8008b82 <_raise_r+0x12>

08008bc0 <raise>:
 8008bc0:	4b02      	ldr	r3, [pc, #8]	; (8008bcc <raise+0xc>)
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	f7ff bfd3 	b.w	8008b70 <_raise_r>
 8008bca:	bf00      	nop
 8008bcc:	2000000c 	.word	0x2000000c

08008bd0 <_kill_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d07      	ldr	r5, [pc, #28]	; (8008bf0 <_kill_r+0x20>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	f7f8 fc97 	bl	8001510 <_kill>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	d102      	bne.n	8008bec <_kill_r+0x1c>
 8008be6:	682b      	ldr	r3, [r5, #0]
 8008be8:	b103      	cbz	r3, 8008bec <_kill_r+0x1c>
 8008bea:	6023      	str	r3, [r4, #0]
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000824 	.word	0x20000824

08008bf4 <_getpid_r>:
 8008bf4:	f7f8 bc84 	b.w	8001500 <_getpid>

08008bf8 <__sread>:
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c00:	f000 f894 	bl	8008d2c <_read_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	bfab      	itete	ge
 8008c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c0c:	181b      	addge	r3, r3, r0
 8008c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c12:	bfac      	ite	ge
 8008c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c16:	81a3      	strhlt	r3, [r4, #12]
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <__swrite>:
 8008c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1e:	461f      	mov	r7, r3
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	05db      	lsls	r3, r3, #23
 8008c24:	4605      	mov	r5, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	4616      	mov	r6, r2
 8008c2a:	d505      	bpl.n	8008c38 <__swrite+0x1e>
 8008c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c30:	2302      	movs	r3, #2
 8008c32:	2200      	movs	r2, #0
 8008c34:	f000 f868 	bl	8008d08 <_lseek_r>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	4632      	mov	r2, r6
 8008c46:	463b      	mov	r3, r7
 8008c48:	4628      	mov	r0, r5
 8008c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4e:	f000 b817 	b.w	8008c80 <_write_r>

08008c52 <__sseek>:
 8008c52:	b510      	push	{r4, lr}
 8008c54:	460c      	mov	r4, r1
 8008c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5a:	f000 f855 	bl	8008d08 <_lseek_r>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	bf15      	itete	ne
 8008c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c6e:	81a3      	strheq	r3, [r4, #12]
 8008c70:	bf18      	it	ne
 8008c72:	81a3      	strhne	r3, [r4, #12]
 8008c74:	bd10      	pop	{r4, pc}

08008c76 <__sclose>:
 8008c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7a:	f000 b813 	b.w	8008ca4 <_close_r>
	...

08008c80 <_write_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d07      	ldr	r5, [pc, #28]	; (8008ca0 <_write_r+0x20>)
 8008c84:	4604      	mov	r4, r0
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7f8 fc75 	bl	800157e <_write>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_write_r+0x1e>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_write_r+0x1e>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20000824 	.word	0x20000824

08008ca4 <_close_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	; (8008cc0 <_close_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f8 fc81 	bl	80015b6 <_close>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_close_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_close_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20000824 	.word	0x20000824

08008cc4 <_fstat_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	; (8008ce4 <_fstat_r+0x20>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	4611      	mov	r1, r2
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	f7f8 fc7c 	bl	80015ce <_fstat>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	d102      	bne.n	8008ce0 <_fstat_r+0x1c>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	b103      	cbz	r3, 8008ce0 <_fstat_r+0x1c>
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000824 	.word	0x20000824

08008ce8 <_isatty_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_isatty_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f8 fc7b 	bl	80015ee <_isatty>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_isatty_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_isatty_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20000824 	.word	0x20000824

08008d08 <_lseek_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_lseek_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f8 fc74 	bl	8001604 <_lseek>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_lseek_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_lseek_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000824 	.word	0x20000824

08008d2c <_read_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d07      	ldr	r5, [pc, #28]	; (8008d4c <_read_r+0x20>)
 8008d30:	4604      	mov	r4, r0
 8008d32:	4608      	mov	r0, r1
 8008d34:	4611      	mov	r1, r2
 8008d36:	2200      	movs	r2, #0
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f7f8 fc02 	bl	8001544 <_read>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_read_r+0x1e>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_read_r+0x1e>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000824 	.word	0x20000824

08008d50 <_init>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	bf00      	nop
 8008d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d56:	bc08      	pop	{r3}
 8008d58:	469e      	mov	lr, r3
 8008d5a:	4770      	bx	lr

08008d5c <_fini>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr
